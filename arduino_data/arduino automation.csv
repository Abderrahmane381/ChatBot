source,texte
arduino automation,Arduino Pro Micro and Bluetooth based Home Automation
arduino automation,Table of Contents
arduino automation,Arduino Pro Micro and Bluetooth:
arduino automation,"Arduino Pro Micro and Bluetooth based Home Automation-It has been six months since I designed theArduino Pro Micro, and during this time, I have extensively explored its capabilities by interfacing it with various sensors and breakout boards. I’ve had the pleasure of working with a range of modules, including thePN532 NFC RFID module, theMLX90614 non-contact infrared temperature sensor, and theR557 Capacitive Fingerprint module."
arduino automation,"So far, this journey has been quite rewarding, and I am generally satisfied with the experiments and tests I’ve conducted. However, before considering the Arduino Pro Micro for integration into real-world products, I feel it’s essential to subject it to further testing with additional modules."
arduino automation,"The Arduino Pro Micro has proven to be a versatile and reliable platform, but thorough testing with a variety of modules will help ensure its compatibility and performance in a wider range of applications. Stay tuned as we continue to explore and expand the possibilities of this remarkable microcontroller board. Your support and feedback are invaluable in shaping the future of our projects!"
arduino automation,"Next, in this series I am going to useHC05 or HC06Bluetooth module with the Arduino Pro Micro for controlling 110/220Vac Loads using my custom designed Android Smartphone application designed in Android studio. You can read my article on theAndroid application designingif you want to make a similar android application. You can also watch my video on how to design yourself anArduino pro microusingAltium Designer."
arduino automation,"Anyway, you can see I have connected a 4-channel relay module, HC05 Bluetooth module, and for the demonstration purposes I have connected 220Vac bulbs. I am using my designed5V and 3A power supplyto power up the Arduino Pro Micro. Everything looks good and now let’s power up the project."
arduino automation,"When the 110/220Vac supply is connected never touch the relay contacts as it can be dangerous.  So, as far as possible, wear protective gloves and perform such high voltage experiments in the presence of a companion or someone having basic knowledge of the electrical systems."
arduino automation,"Now, all you need is to take out your cell phone, pair your smartphone’s Bluetooth with the HC05 Bluetooth module."
arduino automation,"Then open the Android application, search for the paired device. Click connect and start controlling anything you want. You can use any android application just send the commands that I have used in the programming."
arduino automation,"As expected, Arduino Pro Micro also works exceptionally well with the Bluetooth. By adding the 5V and 3A power supply, Arduino Pro Micro, Bluetooth module, and 4 relays on a single PCB an amazing end-user product can be designed."
arduino automation,"Now, let’s go ahead and take a look at the connections."
arduino automation,Amazon Links:
arduino automation,HC05 Bluetooth
arduino automation,HC06 Bluetooth module
arduino automation,Arduino Pro Micro
arduino automation,4 Channels relay module
arduino automation,Arduino Nano USB C type (Recommended)
arduino automation,*Please Note: These are affiliate links. I may make a commission if you buy the components through these links. I would appreciate your support in this way!
arduino automation,HC05 or HC06 Bluetooth Module:
arduino automation,"The HC-05 and HC-06 are two common Bluetooth modules used in various electronic projects for wireless communication. They both have similar form factors and capabilities, but there are some differences between them that you should consider when choosing one for your project. Here’s a comparison:"
arduino automation,Bluetooth Versions:
arduino automation,"HC-05: The HC-05 module is based on Bluetooth 2.0+EDR (Enhanced Data Rate), which provides faster data transfer rates compared to the older Bluetooth 1.0 standard."
arduino automation,"HC-06: The HC-06 module is also based on Bluetooth 2.0+EDR, so it has similar Bluetooth capabilities as the HC-05."
arduino automation,Operating Modes:
arduino automation,HC-05: The HC-05 can operate in both Master and Slave modes. This means it can initiate connections with other Bluetooth devices (Master) or accept incoming connections (Slave).
arduino automation,"HC-06: The HC-06 is primarily designed for Slave mode, which means it can only accept incoming connections from other Bluetooth devices. It cannot be used as a Master to initiate connections."
arduino automation,Configuration:
arduino automation,"HC-05: The HC-05 is often considered more versatile because it can be configured to operate in both Master and Slave modes using AT commands. This makes it more suitable for various applications, including establishing point-to-point or point-to-multipoint connections."
arduino automation,"HC-06: The HC-06 is typically set to Slave mode by default and cannot be easily reconfigured to act as a Master. This makes it more suitable for applications where you only need a simple wireless link, like connecting a microcontroller to a smartphone."
arduino automation,Pairing:
arduino automation,"HC-05: The HC-05 can be paired with other Bluetooth devices, allowing secure communication with encryption. This is useful for applications that require data privacy and security."
arduino automation,"HC-06: The HC-06 can also be paired, but it may not support advanced security features to the same extent as the HC-05."
arduino automation,Price:
arduino automation,"HC-06 modules are often cheaper than HC-05 modules, which can be a factor to consider if you are working on a budget."
arduino automation,Use Cases:
arduino automation,"HC-05: It is suitable for applications where you need more control over Bluetooth communication, such as creating a wireless serial link between devices, setting up a Bluetooth-controlled robot, or establishing a Bluetooth data link between two microcontrollers."
arduino automation,"HC-06: It is suitable for simpler applications where you just need a basic wireless connection, such as interfacing with a smartphone app or connecting a microcontroller to Bluetooth headphones."
arduino automation,"In summary, if you need a more versatile module that can operate in both Master and Slave modes and support advanced configuration options, the HC-05 may be the better choice. On the other hand, if you have a simple application that only requires a Slave module for basic wireless communication, the HC-06 may be more cost-effective. Your choice depends on the specific requirements of your project."
arduino automation,Arduino Nano or Arduino Pro Micro:
arduino automation,"The choice between an Arduino Nano and an Arduino Pro Micro depends on the specific requirements of your project. Both boards are popular among makers and developers, but they have some differences in terms of form factor, features, and capabilities. Here’s a comparison to help you decide which one is more suitable for your needs:"
arduino automation,Arduino Nano:
arduino automation,"Form Factor:The Arduino Nano is relatively compact and has a similar form factor to the Arduino Uno. It is a small, breadboard-friendly board, making it easy to prototype and integrate into projects."
arduino automation,"Microcontroller:The Arduino Nano typically uses an ATmega328P microcontroller, which is the same microcontroller used in the Arduino Uno. It has 32KB of Flash memory, 2KB of RAM, and 1KB of EEPROM."
arduino automation,"Voltage Regulator:The Nano often includes a voltage regulator that allows it to be powered from a wide range of voltage sources (usually 7-12V), making it suitable for various power supply options."
arduino automation,"I/O Pins:The Nano provides multiple digital and analog I/O pins for interfacing with sensors, displays, and other components."
arduino automation,"USB Interface:It typically uses a micro-USB connector for programming and power, making it easy to connect to a computer."
arduino automation,Price:Arduino Nano boards are generally affordable and widely available.
arduino automation,Arduino Pro Micro:
arduino automation,Form Factor:The Arduino Pro Micro is smaller and more compact compared to the Nano. It is often used in projects with limited space.
arduino automation,"Microcontroller:The Pro Micro uses various microcontrollers, including the ATmega32U4. This microcontroller has 32KB of Flash memory, 2.5KB of RAM, and 1KB of EEPROM."
arduino automation,"Voltage Regulator:The Pro Micro may not include a voltage regulator by default, which means it typically requires a stable 5V power supply. Some versions of the Pro Micro do have voltage regulators, so check the specific variant you’re using."
arduino automation,"I/O Pins:The Pro Micro provides digital and analog I/O pins, but the number and arrangement of pins may vary depending on the version of the board."
arduino automation,"USB Interface:It uses a micro-USB or mini-USB connector for programming and power, depending on the variant. Some versions also come with a built-in USB-to-Serial converter."
arduino automation,"Price:Arduino Pro Micro boards are generally affordable, but prices may vary depending on the specific version and features."
arduino automation,Considerations:
arduino automation,"If you need a small, compact board for space-constrained projects, the Arduino Pro Micro might be a better choice."
arduino automation,"If you want the versatility of using a wide range of voltage sources and a more standard USB connection, the Arduino Nano is a good option."
arduino automation,"Check the specific requirements of your project, including the required I/O pins, power supply, and microcontroller features, to determine which board is the most suitable."
arduino automation,Arduino Pro Micro & Bluetooth interfacing:
arduino automation,"4 relays are connected to the Arduino Pro Micro digital pins 4, 5, 6, and 7. The VCC and GND pins of the HC05 Bluetooth module are connected to the 5V and GND of the power supply. Connect the TX and RX pins of the HC05 Bluetooth module to the Arduino Pro Micro RX and TX pins respectively."
arduino automation,5V and 3A power supply circuit diagram:
arduino automation,Video Tutorial
arduino automation,Relay circuit diagram:
arduino automation,"Here is a circuit diagram of the one-channel relay module, if you want to make your own relay module."
arduino automation,Arduino Pro Micro & Bluetooth Programming:
arduino automation,"I started off by adding the Arduino.h header file. Next, I defined pins for all the 4 relays which are connected to the Arduino Pro Micro pins 4, 5, 6, and 7."
arduino automation,"Next, I defined a serial port for the HC05 Bluetooth module."
arduino automation,"In the void setup() function, I activated the serial communication and set all the 4 loads as output. Now, let’s go to the loop() function that runs repeatedly."
arduino automation,"Inside the loop() function, I defined a variable of the type string that I am going to use for storing the string which I am going to receive from the Bluetooth module."
arduino automation,"This line means if data is available on the serial port. It’s the data that is sent from the android application. So, if data is available on the serial port then read the complete line and store it in the variable. From the android application I am only going to send the numbers and when these numbers are received by the Arduino, these are stored as a string."
arduino automation,"So, that’s why I am converting it back into integer."
arduino automation,"And then these are if conditions to check the numbers, each number is used to turn ON and turn OFF a specific load. So, that’s all for now."
arduino automation,Watch Video Tutorial:
arduino automation,Engr. Shahzada Fahad
arduino automation,Related Articles
arduino automation,Digital 360° Tilt Sensor with Arduino and ESP32
arduino automation,Underwater Ultrasonic Sensor with Arduino
arduino automation,"Weighing Scale using Arduino, HX711, and a Load Cell"
arduino automation,Force Sensitive Resistor FSR with Arduino
arduino automation,One Comment
arduino automation,How to creat projects
arduino automation,Leave a ReplyCancel reply
arduino automation,Your email address will not be published.Required fields are marked*
arduino automation,Comment*
arduino automation,Name*
arduino automation,Email*
arduino automation,Website
arduino automation,"Save my name, email, and website in this browser for the next time I comment."
arduino automation,Δ
arduino automation,"pH meter Arduino, pH Meter Calibration, DIYMORE pH Sensor Arduino Code"
arduino automation,Arduino Libraries Download and Projects they are used in “Project codes”
arduino automation,"Decoder, 3 to 8 Decoder Block Diagram, Truth Table, and Logic Diagram"
arduino automation,We are using cookies to give you the best experience on our website.
arduino automation,You can find out more about which cookies we are using or switch them off insettings.
arduino automation,This website uses cookies so that we can provide you with the best user experience possible. Cookie information is stored in your browser and performs functions such as recognising you when you return to our website and helping our team to understand which sections of the website you find most interesting and useful.
arduino automation,Strictly Necessary Cookie should be enabled at all times so that we can save your preferences for cookie settings.
arduino automation,"If you disable this cookie, we will not be able to save your preferences. This means that every time you visit this website you will need to enable or disable cookies again."
arduino automation1,"Arduino GSM Module based Home Automation, Sim900A GSM module"
arduino automation1,Table of Contents
arduino automation1,Arduino GSM Module based Home Automation:
arduino automation1,"Arduino GSM Module based Home Automation, Sim900A GSM module-In today’s article, we are going to make the World’s most secured GSM based Home Automation system using Arduino and Sim900a GSM Module. You can use Arduino Nano or Arduino Uno."
arduino automation1,"If I use a simple command like this then anyone can control the home appliances or other highly sensitive loads using their cell phones. Because, there is no check who is sending the control command. An automation system like this is useless if it has no security."
arduino automation1,"So, I came up with an idea of adding a password in the control command."
arduino automation1,"This password can consist of letters, numbers, and special characters. Without a password, nobody would be able to control anything. Because, each time you want to Turn On or Turn OFF a specific load, you will have to enter the password. You can set an extremely strong password and then nobody would be able to control anything. This is the type of GSM based Home Automation that you can totally rely on. Let me demonstrate this for you."
arduino automation1,"For demonstration purposes, I have selected abc123 as the password, then I selected the load, and then 1 or 0 as a control signal to Turn ON or Turn OFF that load."
arduino automation1,"You might have noticed I used percentage sign; I am doing this because when the Arduino receives this message. Then the Arduino can easily split this message using % sign as the delimiter. Anyway, the message is ready, and I am going to send it to the Arduino."
arduino automation1,"This is amazing, isn’t it?"
arduino automation1,"Now, to turn OFF the same load, I will have to type the same control command but this time I am going to send 0 as the control signal to turn OFF the Load1."
arduino automation1,"The same way, I can control Load2 and let me also tell, instead of writing load1 and load2, you can also write the load names, bulb1, bulb2, etc. And if I am going to type a wrong password, nothing is going to happen."
arduino automation1,"I also have this Electronic Door Lock connected to the Arduino. And to control this Lock I am using the same password, but this time instead of using load as the name, I am using the name lock, and 1 or 0 to open or close the Electronic Door Lock."
arduino automation1,"Anyway, I am going to send this message, and let’s see if it’s going to open the Door Lock."
arduino automation1,"Great, I am also able to control the Electronic Lock. Now, you can also build yourself the mostly highly secured Locker. There are more than a million ways you can use this idea. I am sure by now, you might have got an idea of how does this system work. So, without any further delay let’s get started!!!"
arduino automation1,Amazon Links:
arduino automation1,Arduino Nano USB-C Type (Recommended)
arduino automation1,GSM Sim900A Module
arduino automation1,*Disclosure: These are affiliate links. As an Amazon Associate I earn from qualifying purchases.
arduino automation1,Sim900a GSM Module:
arduino automation1,"This is the GSM Sim900A mini Module. The first thing that you will notice about this GSM module is that, it has no onboard voltage regulator, so be very careful while applying the voltage; Because voltages greater than 5 volts can easily damage this module. Ideal voltage for this GSM module is 4.7v but you can easily power up this GSM Sim900A module using a 5v and 2A adaptor. if you don’t have a 5v adaptor then you can make yourself power 5V and 3A power supply. I have a detailed article onhow to build yourself a 5V and 3A power supply."
arduino automation1,There are a few things that I really like about this GSM sim900A module which are
arduino automation1,This is the cheapest GSM module available on the Market.
arduino automation1,"Another cool thing is, it can be easily interfaced with 5V supported controller boards like Arduino Uno, Arduino mega, Arduino Nano etc and also with 3.3v controller boards like Nodemcu ESP8266 Wifi Module and ESP32 etc. The GSM Sim900A module interfacing with Nodemcu ESP8266 and ESP32, I have already explained in my previous videos."
arduino automation1,"Anyway, I have also a detailed article on theGSM Sim900a moduleexplaining its"
arduino automation1,Key features
arduino automation1,Functional diagram
arduino automation1,Pins description
arduino automation1,Its applications
arduino automation1,How to use it
arduino automation1,Its pinout and AT commands.
arduino automation1,"Now, let’s go ahead and take a look at the circuit diagram."
arduino automation1,Arduino GSM Based Home Automation Circuit:
arduino automation1,"As usual, I am using my Arduino Nano and LoRa based development board. This development board has the advantage of having this 5V and 3A power supply which is more than enough to power up the Arduino and the GSM module."
arduino automation1,"This development board also has 5V SPDT type relays. So, this development board is ideal for testing this project. And for now, forget about the onboard LoRa module and the 5V Buzzer. Only concentrate on the connections I am about to explain."
arduino automation1,Connect the power supply pins of the GSM Sim900a module to the regulated 5v and 3A power supply. The 5V and GND wires from the 5V and 3A power supply are connected to the Arduino Vin and Gnd pins.
arduino automation1,Connect the GSM module TXD 5V pin to the Arduino digital pin D9 and connect the RXD 5V pin to the Arduino digital pin D10.
arduino automation1,"The 4 channel relay module connected to the Arduino digital pins 4, 5, 6, and 7. And if you want to make your own relay module then you can follow the circuit diagram given below."
arduino automation1,You can also read my article ondifferent types of relays and how to use them.
arduino automation1,"So, that’s all about the connections. Now, let’s go ahead and take a look at the programming."
arduino automation1,"Altium Designer, Altium 365, & Octopart:"
arduino automation1,"Altium Designer is the world’s most trusted PCB design system. Altium Designer enables engineers to effortlessly connect with every facet of the electronics design process. Over 35 years of innovation and development focused on a truly unified design environment makes it the most widely used PCB design solution. With Altium Designer you can create PCB designs with an intuitive and powerful interface that connects you to every aspect of the electronics design process. Route it your way through any angle, tune for the delay, Push, Slide, and Walkaround faster than ever."
arduino automation1,"Easily work together with your mechanical team and forget about the days of swapping design files. Every design change stays in sync between Altium Designer and SOLIDWORKS, PTC Creo, Autodesk Inventor, Autodesk Fusion 360, or Siemens NX*."
arduino automation1,"Interact and collaborate with mechanical designers like never before in a photo-realistic, 3D design environment."
arduino automation1,"One of the best things about Altium Designer is that you can share your designs with your team members using Altium 365. They can check your design, leave comments, and if there are any issues, they can fix them from anywhere in the world. Altium Designer also uses the world’s fastest components search engine, Octopart, so you won’t have any difficulty in searching for components."
arduino automation1,"Altium Designer,Altium 365, andOctopart—unleashes the full potential of electronics design by seamlessly integrating design tools, collaboration platforms, and component databases. Together, they offer engineers a comprehensive and synchronized experience, leading to improved productivity, reduced errors, and accelerated innovation in the world of electronics design."
arduino automation1,Arduino GSM Based Home Automation Programming:
arduino automation1,"I started off by adding the SoftwareSerial.h header file. With the help of this library I can defined multiple serial ports. As you can see using the SoftwareSerial I have defined another serial port using the Arduino pins 9 and 10. I could also connect the GSM module to the Arduino default Serial port, but I used it for the debugging purposes."
arduino automation1,"4 relays are connected to the Arduino pins 4, 5, 6, and 7."
arduino automation1,"I also defined a variable passcode of the type String, so that I can use a combination of letters, numbers, and characters. So, my password is “abc123”. If I want to change my password then I can simply change this passcode over here."
arduino automation1,I also defined a variable for storing the message.
arduino automation1,"Code in the void setup() function is exactly the same, as used in my previous GSM based security system. So, let’s go to the loop() function."
arduino automation1,"We simply check if a message is received then store the entire string message in the variable incoming, and then using the % sign as the delimiter we split the message, and store the corresponding values in variables password, load, and loadstatus."
arduino automation1,And then I have defined multiple conditions to turn ON and turn OFF the desired loads.
arduino automation1,"The getValue() function is used to split the message using any character as the delimiter. So, that’s all about the programming."
arduino automation1,"For the step by step explanation watch the video tutorial and don’t forget to like, share, and subscribe."
arduino automation1,Watch Video Tutorial:
arduino automation1,Engr. Shahzada Fahad
arduino automation1,Related Articles
arduino automation1,Digital 360° Tilt Sensor with Arduino and ESP32
arduino automation1,Underwater Ultrasonic Sensor with Arduino
arduino automation1,"Weighing Scale using Arduino, HX711, and a Load Cell"
arduino automation1,Force Sensitive Resistor FSR with Arduino
arduino automation1,Leave a ReplyCancel reply
arduino automation1,Your email address will not be published.Required fields are marked*
arduino automation1,Comment*
arduino automation1,Name*
arduino automation1,Email*
arduino automation1,Website
arduino automation1,"Save my name, email, and website in this browser for the next time I comment."
arduino automation1,Δ
arduino automation1,"pH meter Arduino, pH Meter Calibration, DIYMORE pH Sensor Arduino Code"
arduino automation1,Arduino Libraries Download and Projects they are used in “Project codes”
arduino automation1,"Decoder, 3 to 8 Decoder Block Diagram, Truth Table, and Logic Diagram"
arduino automation1,We are using cookies to give you the best experience on our website.
arduino automation1,You can find out more about which cookies we are using or switch them off insettings.
arduino automation1,This website uses cookies so that we can provide you with the best user experience possible. Cookie information is stored in your browser and performs functions such as recognising you when you return to our website and helping our team to understand which sections of the website you find most interesting and useful.
arduino automation1,Strictly Necessary Cookie should be enabled at all times so that we can save your preferences for cookie settings.
arduino automation1,"If you disable this cookie, we will not be able to save your preferences. This means that every time you visit this website you will need to enable or disable cookies again."
arduino automation2,"Arduino and Lora based Automation Project with Feedback message, Lora SX1278"
arduino automation2,LoRa Wireless Range testing
arduino automation2,Table of Contents
arduino automation2,Arduino and Lora based Automation Project:
arduino automation2,"Arduino and Lora based Automation Project with Feedback message-In this article, you will learn how to make a completely functional Automation system included with a feedback feature using a pair of Arduino boards, Lora SX1278 transceiver modules, 4-channels relay module, and some electrical loads. I will also share with you the maximum distance and how quickly and accurately it sends the feedback message."
arduino automation2,"I have already made several videos and have written many articles on SX1278 Lora transceiver modules, however, today’s article is of a somewhat different level, because the project which I am going to design today, will prove useful for you. Why am I saying so? You will get its answer during the practical demonstration."
arduino automation2,"As I have just said, I have already written many articles on Lora transceiver modules. In my very first article, I explained the pinout, technical specifications, and how to useLora SX1278 with Arduino. So, during that project, I sent the “hello world” message wirelessly. You are well aware that for the beginners “hello world” project is an ideal project. This was basically a getting started tutorial."
arduino automation2,"After this, I explained in detail how you can conducttwo-way communication over a long distance. For demonstration, I used a push button on one side, whereas on the other side I used a potentiometer as an analog sensor. If you are interested in controlling and monitoring both at the same time, then you must surely watch this video."
arduino automation2,"Anyways, after this, I implemented aLora Network, because, in most of the cases, only two Lora modules are not enough. To cover more locations, I created a LoraWAN network based on 3 nodes. In this network, every node had a specific address. So, if you want to monitor multiple sensors from multiple locations, then this video must be worth watching for you guys."
arduino automation2,"Anyhow, I then designed aLora Gatewayand for this purpose, I used the Lora SX1278 module with ESP8266 Wi-Fi module. This is quite an interesting project because first, you bring the sensor data from a remote location, where no internet facility is available, to the node where the internet is available. And then you send that sensor data to an IoT platform with the help of a gateway. By doing so, you can monitor any sensor from any part of the world, provided you have an internet connection."
arduino automation2,"Apart from this, there are other projects as well, however, the projects which I have just mentioned, are undoubtedly very important projects, because you can design any project by modifying these projects. Let’s now move on to our todays’ project."
arduino automation2,"You can see 4 buttons on the transmitter side Arduino. Using these very 4 buttons, I am going to control certain loads on the receiver side. For demonstration purposes, I have put 4 bulbs on the receiver’s side, which are connected to 4 relays. Besides lights, you can use any other 110/220Vac loads or use any other DC type loads."
arduino automation2,"If you want to use 110/220Vac supply, you must not forget to use protective gloves, because 110/220Vac can prove fatal. So, as far as possible you must ensure the presence of a friend or any companion while carrying on work on such projects. When the AC supply is ON, do not touch the relay module."
arduino automation2,"I am using the same SX1278 Lora Transceiver modules on the receiver as well as the transmitter side. Anyways, I turned ON the Receiver side using a 12V adaptor."
arduino automation2,"I am powering up the transmitter side through a 4S lipo battery pack. You may also use a 3S battery pack or any other type of battery or a DC adopter for this purpose. If you also want to make such a 4S Lipo battery pack, then read my article onhow to make 3S and 4S lipo battery packs. Anyway, this is my portableArduino and Lora-basedremote controller, which is still passing through the testing phases. When everything gets final, I will design a small PCB and an enclosure for it. Anyways, let us start testing."
arduino automation2,I can randomly turn ON or turn OFF any light and it is working quite superbly. This small delay occurs because I have used timers on the transmitter and receiver sides. You can increase or decrease the timer value if you want. During the line-of-sight testing there tends to be no issues. I have checked this system so many times and it is working perfectly.
arduino automation2,"However, one gets frustrated after finding that no electrical loads are visible. I am turning buttons ON and OFF, however, I cannot determine whether the loads are being controlled on the receiver’s side or not, because I cannot see loads as yet."
arduino automation2,"Perhaps, loads are being controlled, however, I am confused because still I cannot see the loads. In such a situation, we might have problems, as it is possible that Arduino might have turned OFF and you keep thinking that the signals which you are sending, are being successfully implemented, while in reality, nothing might be happening. We can solve this issue if the receiver side sends us a feedback message. And this is what I am going to do next."
arduino automation2,"I have modified the code and you can see I have also added a display on the transmitter side. I will display the status of electrical loads on this display. So let us power up the transmitter side and see how this system works.Now, Arduino and Lora-based automation systems present quite a practical look. Whenever I turn ON/OFF any button on the transmitter side, the receiver side sends me feedback on whether that load has turned ON or not.Now even if I do not see electrical appliances or loads, there is no problem, because I keep on receiving feedback from the receiver’s side. Now, if there is some issue on the receiver side, I’ll not receive any kind of feedback. Or if I get out of the range, even then I’ll receive no feedback.Anyways, I have been testing this project for the last two days and it is working exceptionally well.If you are thinking about its real implementation, do not forget to use the watchdog timer on the receiver side. Because with the help of a watchdog timer, you can restart the receiver side Arduino automatically, if it hangs due to any particular reason.Tested Range:You can see my brother is standing on the roof of my maternal uncle’s house. He has the transmitter and as you can see he is controlling these light bulbs from there. The distance between the transmitter and receiver is 118 meters. Over such a long-distance still, we were able to control the bulbs. You can also watch this in the video given at the end of this article. The maximum communication distance may be more, even more than 200 meters. I will test the maximum communication distance in some open fields, as I am planning to make a transmitter for one of my upcoming RC Airplane projects.I am sure by now you might have got an idea of how does this system works. So, without any further delay, let’s get started!!!Amazon Links:Arduino UnoArduino Nano USB-C Type (Recommended)LoRa SX1278 ModuleSSD1306 128×64 Oled i2c display Module*Disclosure: These are affiliate links. As an Amazon Associate I earn from qualifying purchases.SX1278 Lora:Lora 1278 long-distance wireless transceiver module integrates Semtech RF transceiver chip SX1278, which adopts LoRa TM Spread Spectrum modulation frequency hopping technique. The features of long-distance and high sensitivity (-139dBm) make this module perform better than FSK and GFSK modules. Multi-signal won’t affect each other even in a crowd frequency environment; it comes with strong anti-interference performance. This module is 100mW and ultra-small size, widely used in AMR, remote industrial control filed.Features:Frequency Range: 868 / 915 MHzSensitivity up to -139dBm @LoraMaximum output power: 20 dBm13mA@receiver modeSleep current <200 nAData transfer rate: @FSK,1.2-300 Kbps@Lora TM, 0.018-37.5 KbpsLora TM, FSK, GFSK & OOK Modulation modeBuilt-in ESD Protection127 dB Dynamic Range RSSIPacket engine up to 256 bytes with FIFO and CRCHopping frequencyBuilt-in temperature sensor and low battery indicatorExcellent blocking immunityOperating Temperature Range：-40 ~ + 85 °CApplications:Remote controlRemote meter readingHome security alarm and remote keyless entryIndustrial controlHome automation remote sensingIndividual data recordsToys controlSensor networkTire pressure monitoringHealth monitoringWireless PC peripheralsTag reading and writingArduino Lora Automation Project, Circuit Diagram:Lora Transmitter Circuit Diagram:The VCC of the LoRa module is connected with the 3.3V of the Arduino. The MISO Pin of the LoRa module is connected with the Arduino’s pin 12. The MOSI pin is connected with the Arduino’s pin 11. The SCLK pin of the LoRa module is connected with the Arduino’s pin 13. The NSS pin is connected with the Arduino’s pin 10 and the ground pin of the LoRa module is connected with the Arduino’s GND.4 switches are connected with the Arduino pins 2, 3, 4, and 5.SSD1306 Oled display module SCL and SDA pins are connected with the Arduino’s A5 and A4 pins.On the left side is the regulated 5V power supply which accepts a wide range of input DC voltages between 7 and 28volts.Lora Receiver Circuit Diagram:On the receiver side, a 4-channel relay module is connected with the Arduino pins 2, 3, 4, and 5. While the connections of the SX1278 Lora module remain exactly the same. Now, let’s take a look at the Transmitter and Receiver side programming.Arduino Lora Automation Project, Programming:This project is based on two programs. Download the following libraries.Download: LoRa.hDownload: Adafruit_GFX.hDownload: Adafruit_SSD1306.hLora Transmitter programming:/*
  Transmitter, nano

*/
#include <SPI.h>              // include libraries
#include <LoRa.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

byte msgCount = 0;            // count of outgoing messages
byte localAddress = 0xBB;     // address of this device
byte destination = 0xFF;      // destination to send to
long lastSendTime = 0;        // last send time
int interval = 50;          // interval between sends

// 4 buttons or switches
int sw1 = 2; 
int sw2 = 4; 
int sw3 = 6; 
int sw4 = 8;

// Stores the switches or buttons status in the form of 0 or 1
// And then these status values are used to control the loads
// on the Receiver side.
int Sensor1 = 0; 
int Sensor2 = 0; 
int Sensor3 = 0;  
int Sensor4 = 0;  

//The receiver side loads status feedback values are stored in the following variables
int load1 = 0; 
int load2 = 0; 
int load3 = 0; 
int load4 = 0;

boolean bflag = false;
String outgoing;              // outgoing message


// For Oled display
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
 
String Mymessage = """";

void setup() {
  Serial.begin(9600);                   // initialize serial
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  display.setTextColor(WHITE);

 
  pinMode(sw1, INPUT_PULLUP);
  pinMode(sw2, INPUT_PULLUP); 
  pinMode(sw3, INPUT_PULLUP); 
  pinMode(sw4, INPUT_PULLUP);

  Serial.println(""LoRa Duplex"");

  if (!LoRa.begin(433E6)) {             // initialize ratio at 915 MHz
    Serial.println(""LoRa init failed. Check your connections."");
    while (true);                       // if failed, do nothing
  }

  Serial.println(""LoRa init succeeded."");
}

void loop() {
  
  if (millis() - lastSendTime > interval) {
    Sensor1 = digitalRead(sw1);
    Sensor2 = digitalRead(sw2); 
    Sensor3 = digitalRead(sw3);
    Sensor4 = digitalRead(sw4);
        
    Mymessage = Mymessage + !Sensor1 +"","" + !Sensor2 + "","" + !Sensor3 +"","" + !Sensor4;  
    sendMessage(Mymessage);
    delay(10);
    
    Mymessage = """";
    //Serial.println(""Sending "" + message);
    lastSendTime = millis();            // timestamp the message
    interval = random(50) + 100;  
    
    }

      // parse for a packet, and call onReceive with the result:
  onReceive(LoRa.parsePacket());
  }

void sendMessage(String outgoing) {
  LoRa.beginPacket();                   // start packet
  LoRa.write(destination);              // add destination address
  LoRa.write(localAddress);             // add sender address
  LoRa.write(msgCount);                 // add message ID
  LoRa.write(outgoing.length());        // add payload length
  LoRa.print(outgoing);                 // add payload
  LoRa.endPacket();                     // finish packet and send it
  msgCount++;                           // increment message ID
}

void onReceive(int packetSize) {
  if (packetSize == 0) return;          // if there's no packet, return

  // read packet header bytes:
  int recipient = LoRa.read();          // recipient address
  byte sender = LoRa.read();            // sender address
  byte incomingMsgId = LoRa.read();     // incoming msg ID
  byte incomingLength = LoRa.read();    // incoming msg length

  String incoming = """";

  while (LoRa.available()) {
    incoming += (char)LoRa.read();
  }

  if (incomingLength != incoming.length()) {   // check length for error
    //Serial.println(""error: message length does not match length"");
    ;
    return;                             // skip rest of function
  }

  // if the recipient isn't this device or broadcast,
  if (recipient != localAddress && recipient != 0xFF) {
   // Serial.println(""This message is not for me."");
    ;
    return;                             // skip rest of function
  }

  // if message is for this device, or broadcast, print details:
  //Serial.println(""Received from: 0x"" + String(sender, HEX));
  //Serial.println(""Sent to: 0x"" + String(recipient, HEX));
  //Serial.println(""Message ID: "" + String(incomingMsgId));
 // Serial.println(""Message length: "" + String(incomingLength));
 // Serial.println(""Message: "" + incoming);
//  Serial.println(""RSSI: "" + String(LoRa.packetRssi()));
//  Serial.println(""Snr: "" + String(LoRa.packetSnr()));
//  Serial.println();


String q = getValue(incoming, ',', 0); 
String r = getValue(incoming, ',', 1); 
String s = getValue(incoming, ',', 2); 
String t = getValue(incoming, ',', 3); 
load1 = q.toInt();
load2 = r.toInt();
load3 = s.toInt();
load4 = t.toInt();

String DisplayData = """";
DisplayData = DisplayData + load1 + "","" + load2 + "","" + load3 + "","" + load4 ;
//new code end
    //clear display
  display.clearDisplay();

  display.setTextSize(2);
  display.setCursor(0,0);
  display.print(""Status:"");

  display.setTextSize(3);
  display.setCursor(0, 28);
  display.print(DisplayData);

display.display(); 
}
String getValue(String data, char separator, int index)
{
    int found = 0;
    int strIndex[] = { 0, -1 };
    int maxIndex = data.length() - 1;
 
    for (int i = 0; i <= maxIndex && found <= index; i++) {
        if (data.charAt(i) == separator || i == maxIndex) {
            found++;
            strIndex[0] = strIndex[1] + 1;
            strIndex[1] = (i == maxIndex) ? i+1 : i;
        }
    }
    return found > index ? data.substring(strIndex[0], strIndex[1]) : """";
}123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183/*Transmitter, nano*/#include <SPI.h>              // include libraries#include <LoRa.h>#include <Adafruit_GFX.h>#include <Adafruit_SSD1306.h>bytemsgCount=0;// count of outgoing messagesbytelocalAddress=0xBB;// address of this devicebytedestination=0xFF;// destination to send tolonglastSendTime=0;// last send timeintinterval=50;// interval between sends// 4 buttons or switchesintsw1=2;intsw2=4;intsw3=6;intsw4=8;// Stores the switches or buttons status in the form of 0 or 1// And then these status values are used to control the loads// on the Receiver side.intSensor1=0;intSensor2=0;intSensor3=0;intSensor4=0;//The receiver side loads status feedback values are stored in the following variablesintload1=0;intload2=0;intload3=0;intload4=0;booleanbflag=false;Stringoutgoing;// outgoing message// For Oled display#define SCREEN_WIDTH 128 // OLED display width, in pixels#define SCREEN_HEIGHT 64 // OLED display height, in pixels// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)Adafruit_SSD1306display(SCREEN_WIDTH,SCREEN_HEIGHT,&Wire,OLED_RESET);StringMymessage="""";voidsetup(){Serial.begin(9600);// initialize serialdisplay.begin(SSD1306_SWITCHCAPVCC,0x3C);display.clearDisplay();display.setTextColor(WHITE);pinMode(sw1,INPUT_PULLUP);pinMode(sw2,INPUT_PULLUP);pinMode(sw3,INPUT_PULLUP);pinMode(sw4,INPUT_PULLUP);Serial.println(""LoRa Duplex"");if(!LoRa.begin(433E6)){// initialize ratio at 915 MHzSerial.println(""LoRa init failed. Check your connections."");while(true);// if failed, do nothing}Serial.println(""LoRa init succeeded."");}voidloop(){if(millis()-lastSendTime>interval){Sensor1=digitalRead(sw1);Sensor2=digitalRead(sw2);Sensor3=digitalRead(sw3);Sensor4=digitalRead(sw4);Mymessage=Mymessage+!Sensor1+"",""+!Sensor2+"",""+!Sensor3+"",""+!Sensor4;sendMessage(Mymessage);delay(10);Mymessage="""";//Serial.println(""Sending "" + message);lastSendTime=millis();// timestamp the messageinterval=random(50)+100;}// parse for a packet, and call onReceive with the result:onReceive(LoRa.parsePacket());}voidsendMessage(Stringoutgoing){LoRa.beginPacket();// start packetLoRa.write(destination);// add destination addressLoRa.write(localAddress);// add sender addressLoRa.write(msgCount);// add message IDLoRa.write(outgoing.length());// add payload lengthLoRa.print(outgoing);// add payloadLoRa.endPacket();// finish packet and send itmsgCount++;// increment message ID}voidonReceive(intpacketSize){if(packetSize==0)return;// if there's no packet, return// read packet header bytes:intrecipient=LoRa.read();// recipient addressbytesender=LoRa.read();// sender addressbyteincomingMsgId=LoRa.read();// incoming msg IDbyteincomingLength=LoRa.read();// incoming msg lengthStringincoming="""";while(LoRa.available()){incoming+=(char)LoRa.read();}if(incomingLength!=incoming.length()){// check length for error//Serial.println(""error: message length does not match length"");;return;// skip rest of function}// if the recipient isn't this device or broadcast,if(recipient!=localAddress&&recipient!=0xFF){// Serial.println(""This message is not for me."");;return;// skip rest of function}// if message is for this device, or broadcast, print details://Serial.println(""Received from: 0x"" + String(sender, HEX));//Serial.println(""Sent to: 0x"" + String(recipient, HEX));//Serial.println(""Message ID: "" + String(incomingMsgId));// Serial.println(""Message length: "" + String(incomingLength));// Serial.println(""Message: "" + incoming);//  Serial.println(""RSSI: "" + String(LoRa.packetRssi()));//  Serial.println(""Snr: "" + String(LoRa.packetSnr()));//  Serial.println();Stringq=getValue(incoming,',',0);Stringr=getValue(incoming,',',1);Strings=getValue(incoming,',',2);Stringt=getValue(incoming,',',3);load1=q.toInt();load2=r.toInt();load3=s.toInt();load4=t.toInt();StringDisplayData="""";DisplayData=DisplayData+load1+"",""+load2+"",""+load3+"",""+load4;//new code end//clear displaydisplay.clearDisplay();display.setTextSize(2);display.setCursor(0,0);display.print(""Status:"");display.setTextSize(3);display.setCursor(0,28);display.print(DisplayData);display.display();}StringgetValue(Stringdata,charseparator,intindex){intfound=0;intstrIndex[]={0,-1};intmaxIndex=data.length()-1;for(inti=0;i<=maxIndex&&found<=index;i++){if(data.charAt(i)==separator||i==maxIndex){found++;strIndex[0]=strIndex[1]+1;strIndex[1]=(i==maxIndex)?i+1:i;}}returnfound>index?data.substring(strIndex[0],strIndex[1]):"""";}Lora Transmitter Code Explanation:#include <Adafruit_GFX.h>

#include <Adafruit_SSD1306.h>123#include <Adafruit_GFX.h>#include <Adafruit_SSD1306.h>I added the Adafruit_GFX and Adafruit_SSD1306 libraries for the Oled display module. You can download these libraries from my article.byte msgCount = 0;            // count of outgoing messages

byte localAddress = 0xBB;     // address of this device

byte destination = 0xFF;      // destination to send to

long lastSendTime = 0;        // last send time

int interval = 50;          // interval between sends123456789bytemsgCount=0;// count of outgoing messagesbytelocalAddress=0xBB;// address of this devicebytedestination=0xFF;// destination to send tolonglastSendTime=0;// last send timeintinterval=50;// interval between sendsNext, I defined the localAddress, destination, and these variables for the timer.// 4 buttons or switches

int sw1 = 2;

int sw2 = 4;

int sw3 = 6;

int sw4 = 8;123456789// 4 buttons or switchesintsw1=2;intsw2=4;intsw3=6;intsw4=8;Next, I defined 4 switches.int Sensor1 = 0;

int Sensor2 = 0;

int Sensor3 = 0; 

int Sensor4 = 0;1234567intSensor1=0;intSensor2=0;intSensor3=0;intSensor4=0;Next, I defined these 4 variables for storing the status of all the 4 switches in the form of 0 and 1. We use these status values to control relays on the receiver side.int load1 = 0;

int load2 = 0;

int load3 = 0;

int load4 = 0;1234567intload1=0;intload2=0;intload3=0;intload4=0;Next, I defined these 4 variables to store the status feedback values of the 4 loads received from the receiver side. Now, let’s go to the loop function.void loop() {

  if (millis() - lastSendTime > interval) {

    Sensor1 = digitalRead(sw1);

    Sensor2 = digitalRead(sw2);

    Sensor3 = digitalRead(sw3);

    Sensor4 = digitalRead(sw4);

       

    Mymessage = Mymessage + !Sensor1 +"","" + !Sensor2 + "","" + !Sensor3 +"","" + !Sensor4; 

    sendMessage(Mymessage);

    delay(10);

   

    Mymessage = """";

    //Serial.println(""Sending "" + message);

    lastSendTime = millis();            // timestamp the message

    interval = random(50) + 100; 

   

    }




      // parse for a packet, and call onReceive with the result:

  onReceive(LoRa.parsePacket());

  }123456789101112131415161718192021222324252627282930313233343536373839404142voidloop(){if(millis()-lastSendTime>interval){Sensor1=digitalRead(sw1);Sensor2=digitalRead(sw2);Sensor3=digitalRead(sw3);Sensor4=digitalRead(sw4);Mymessage=Mymessage+!Sensor1+"",""+!Sensor2+"",""+!Sensor3+"",""+!Sensor4;sendMessage(Mymessage);delay(10);Mymessage="""";//Serial.println(""Sending "" + message);lastSendTime=millis();// timestamp the messageinterval=random(50)+100;}// parse for a packet, and call onReceive with the result:onReceive(LoRa.parsePacket());}First, we read the status of the switches, then we make a complete message and send it to the receiver side. Arduino checks and sends the control commands after every few milliseconds. If you want you can change the interval. After sending the message then the Arduino checks if any data is received from the receiver side.void onReceive(int packetSize) {

  if (packetSize == 0) return;          // if there's no packet, return




  // read packet header bytes:

  int recipient = LoRa.read();          // recipient address

  byte sender = LoRa.read();            // sender address

  byte incomingMsgId = LoRa.read();     // incoming msg ID

  byte incomingLength = LoRa.read();    // incoming msg length




  String incoming = """";




  while (LoRa.available()) {

    incoming += (char)LoRa.read();

  }




  if (incomingLength != incoming.length()) {   // check length for error

    //Serial.println(""error: message length does not match length"");

    ;

    return;                             // skip rest of function

  }




  // if the recipient isn't this device or broadcast,

  if (recipient != localAddress && recipient != 0xFF) {

   // Serial.println(""This message is not for me."");

    ;

    return;                             // skip rest of function

  }










String q = getValue(incoming, ',', 0);

String r = getValue(incoming, ',', 1);

String s = getValue(incoming, ',', 2);

String t = getValue(incoming, ',', 3);

load1 = q.toInt();

load2 = r.toInt();

load3 = s.toInt();

load4 = t.toInt();




String DisplayData = """";

DisplayData = DisplayData + load1 + "","" + load2 + "","" + load3 + "","" + load4 ;

//new code end

    //clear display

  display.clearDisplay();




  display.setTextSize(2);

  display.setCursor(0,0);

  display.print(""Status:"");




  display.setTextSize(3);

  display.setCursor(0, 28);

  display.print(DisplayData);




display.display();

}123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121voidonReceive(intpacketSize){if(packetSize==0)return;// if there's no packet, return// read packet header bytes:intrecipient=LoRa.read();// recipient addressbytesender=LoRa.read();// sender addressbyteincomingMsgId=LoRa.read();// incoming msg IDbyteincomingLength=LoRa.read();// incoming msg lengthStringincoming="""";while(LoRa.available()){incoming+=(char)LoRa.read();}if(incomingLength!=incoming.length()){// check length for error//Serial.println(""error: message length does not match length"");;return;// skip rest of function}// if the recipient isn't this device or broadcast,if(recipient!=localAddress&&recipient!=0xFF){// Serial.println(""This message is not for me."");;return;// skip rest of function}Stringq=getValue(incoming,',',0);Stringr=getValue(incoming,',',1);Strings=getValue(incoming,',',2);Stringt=getValue(incoming,',',3);load1=q.toInt();load2=r.toInt();load3=s.toInt();load4=t.toInt();StringDisplayData="""";DisplayData=DisplayData+load1+"",""+load2+"",""+load3+"",""+load4;//new code end//clear displaydisplay.clearDisplay();display.setTextSize(2);display.setCursor(0,0);display.print(""Status:"");display.setTextSize(3);display.setCursor(0,28);display.print(DisplayData);display.display();}The data which is received from the receiver side is the feedback message, this feedback message consists of the relays status in the form 0 and 1. So, the incoming message is split and the feedback status values are stored in their respective variables, where its values are displayed on the Oled display module.String getValue(String data, char separator, int index)

{

    int found = 0;

    int strIndex[] = { 0, -1 };

    int maxIndex = data.length() - 1;




    for (int i = 0; i <= maxIndex && found <= index; i++) {

        if (data.charAt(i) == separator || i == maxIndex) {

            found++;

            strIndex[0] = strIndex[1] + 1;

            strIndex[1] = (i == maxIndex) ? i+1 : i;

        }

    }

    return found > index ? data.substring(strIndex[0], strIndex[1]) : """";

}123456789101112131415161718192021222324252627282930StringgetValue(Stringdata,charseparator,intindex){intfound=0;intstrIndex[]={0,-1};intmaxIndex=data.length()-1;for(inti=0;i<=maxIndex&&found<=index;i++){if(data.charAt(i)==separator||i==maxIndex){found++;strIndex[0]=strIndex[1]+1;strIndex[1]=(i==maxIndex)?i+1:i;}}returnfound>index?data.substring(strIndex[0],strIndex[1]):"""";}The getValue() function is used to split a string message using a delimiter. In my case, I am using Comma as the delimiter, if you want you can use any other character as the delimiter. So, that’s all about the transmitter side programming, and now let’s take a look at the receiver side programming.Lora Receiver Programming:/*
  Receiver, Nano

*/
#include <SPI.h>              // include libraries
#include <LoRa.h>

byte msgCount = 0;            // count of outgoing messages
byte localAddress = 0xFF;     // address of this device
byte destination = 0xBB;      // destination to send to
long lastSendTime = 0;        // last send time
int interval = 50;          // interval between sends

// flags to stop the unneccesary repition
boolean flag1 = false;
boolean flag2 = false;
boolean flag3 = false;
boolean flag4 = false; 

int RLY1=2;
int RLY2=3;
int RLY3=4;
int RLY4=5;

// these variables are used to store the control commands received from the Transmitter
int Sensor1 = 0; 
int Sensor2 = 0; 
int Sensor3 = 0; 
int Sensor4 = 0; 

// stores the relays status
int relay1Status;
int relay2Status;
int relay3Status;
int relay4Status;

String outgoing;              // outgoing message



String statusmessage = """";

void setup() {
  Serial.begin(9600);                   // initialize serial


 pinMode(RLY1,OUTPUT);
  pinMode(RLY2,OUTPUT);
    pinMode(RLY3,OUTPUT);
      pinMode(RLY4,OUTPUT);


  Serial.println(""LoRa Duplex"");

  if (!LoRa.begin(433E6)) {             // initialize ratio at 915 MHz
    Serial.println(""LoRa init failed. Check your connections."");
    while (true);                       // if failed, do nothing
  }

  Serial.println(""LoRa init succeeded."");
}

void loop() {

  if (millis() - lastSendTime > interval) {
  relay1Status = digitalRead(RLY1);
  relay2Status = digitalRead(RLY2);
  relay3Status = digitalRead(RLY3);
  relay4Status = digitalRead(RLY4);
  
  statusmessage = statusmessage + relay1Status + "","" + relay2Status + "","" + relay3Status + "","" + relay4Status;
  sendMessage(statusmessage); 
  delay(10);
  
   statusmessage = """";
   lastSendTime = millis();            // timestamp the message
   interval = random(50) + 100;    // 2-3 seconds
  }
  

  // parse for a packet, and call onReceive with the result:
  onReceive(LoRa.parsePacket());
}

void sendMessage(String outgoing) {
  LoRa.beginPacket();                   // start packet
  LoRa.write(destination);              // add destination address
  LoRa.write(localAddress);             // add sender address
  LoRa.write(msgCount);                 // add message ID
  LoRa.write(outgoing.length());        // add payload length
  LoRa.print(outgoing);                 // add payload
  LoRa.endPacket();                     // finish packet and send it
  msgCount++;                           // increment message ID
}

void onReceive(int packetSize) {
  if (packetSize == 0) return;          // if there's no packet, return

  // read packet header bytes:
  int recipient = LoRa.read();          // recipient address
  byte sender = LoRa.read();            // sender address
  byte incomingMsgId = LoRa.read();     // incoming msg ID
  byte incomingLength = LoRa.read();    // incoming msg length

  String incoming = """";

  while (LoRa.available()) {
    incoming += (char)LoRa.read();
  }

  if (incomingLength != incoming.length()) {   // check length for error
   // Serial.println(""error: message length does not match length"");
   ;
    return;                             // skip rest of function
  }

  // if the recipient isn't this device or broadcast,
  if (recipient != localAddress && recipient != 0xFF) {
    //Serial.println(""This message is not for me."");
    ;
    return;                             // skip rest of function
  }

  // if message is for this device, or broadcast, print details:
 // Serial.println(""Received from: 0x"" + String(sender, HEX));
 // Serial.println(""Sent to: 0x"" + String(recipient, HEX));
  //Serial.println(""Message ID: "" + String(incomingMsgId));
 // Serial.println(""Message length: "" + String(incomingLength));
 // Serial.println(""Message: "" + incoming);
  //Serial.println(""RSSI: "" + String(LoRa.packetRssi()));
  //Serial.println(""Snr: "" + String(LoRa.packetSnr()));
 // Serial.println();

 
String q = getValue(incoming, ',', 0); 
String r = getValue(incoming, ',', 1); 
String s = getValue(incoming, ',', 2); 
String t = getValue(incoming, ',', 3); 
Sensor1 = q.toInt();
Sensor2 = r.toInt();
Sensor3 = s.toInt();
Sensor4 = t.toInt();

if((Sensor1 == 1)&&(flag1==false))
{
 
  digitalWrite(RLY1,HIGH);
   relay1Status = 1;
  Serial.println(""Relay 1 is turned on"");
  flag1=true;
}

if((Sensor1 == 0)&&(flag1 ==true))
{

  digitalWrite(RLY1,LOW);
   relay1Status = 0;
  Serial.println(""Relay 1 is turned off"");
  flag1=false;
}
if((Sensor2 == 1)&&(flag2==false))
{
 
  digitalWrite(RLY2,HIGH);
   relay2Status = 0;
  Serial.println(""Relay 2 is turned on"");
  flag2=true;
}

if((Sensor2 == 0)&&(flag2 ==true))
{

  digitalWrite(RLY2,LOW);
  relay2Status = 0;
  Serial.println(""Relay 2 is turned off"");
  flag2=false;
}
if((Sensor3 == 1)&&(flag3==false))
{
 
  digitalWrite(RLY3,HIGH);
  relay3Status = 1;
  Serial.println(""Relay 3 is turned on"");
  flag3=true;
}

if((Sensor3 == 0)&&(flag3 ==true))
{

  digitalWrite(RLY3,LOW);
  relay3Status = 0;
  Serial.println(""Relay 3 is turned off"");
  flag3=false;
}

if((Sensor4 == 1)&&(flag4==false))
{
 
  digitalWrite(RLY4,HIGH);
  relay4Status = 1;
  Serial.println(""Relay 4 is turned on"");
  flag4=true;
}

if((Sensor4 == 0)&&(flag4 ==true))
{

  digitalWrite(RLY4,LOW);
  relay4Status = 0;
  Serial.println(""Relay 4 is turned off"");
  flag4=false;
}

incoming = """";
  
}
String getValue(String data, char separator, int index)
{
    int found = 0;
    int strIndex[] = { 0, -1 };
    int maxIndex = data.length() - 1;
 
    for (int i = 0; i <= maxIndex && found <= index; i++) {
        if (data.charAt(i) == separator || i == maxIndex) {
            found++;
            strIndex[0] = strIndex[1] + 1;
            strIndex[1] = (i == maxIndex) ? i+1 : i;
        }
    }
    return found > index ? data.substring(strIndex[0], strIndex[1]) : """";
}123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231/*Receiver, Nano*/#include <SPI.h>              // include libraries#include <LoRa.h>bytemsgCount=0;// count of outgoing messagesbytelocalAddress=0xFF;// address of this devicebytedestination=0xBB;// destination to send tolonglastSendTime=0;// last send timeintinterval=50;// interval between sends// flags to stop the unneccesary repitionbooleanflag1=false;booleanflag2=false;booleanflag3=false;booleanflag4=false;intRLY1=2;intRLY2=3;intRLY3=4;intRLY4=5;// these variables are used to store the control commands received from the TransmitterintSensor1=0;intSensor2=0;intSensor3=0;intSensor4=0;// stores the relays statusintrelay1Status;intrelay2Status;intrelay3Status;intrelay4Status;Stringoutgoing;// outgoing messageStringstatusmessage="""";voidsetup(){Serial.begin(9600);// initialize serialpinMode(RLY1,OUTPUT);pinMode(RLY2,OUTPUT);pinMode(RLY3,OUTPUT);pinMode(RLY4,OUTPUT);Serial.println(""LoRa Duplex"");if(!LoRa.begin(433E6)){// initialize ratio at 915 MHzSerial.println(""LoRa init failed. Check your connections."");while(true);// if failed, do nothing}Serial.println(""LoRa init succeeded."");}voidloop(){if(millis()-lastSendTime>interval){relay1Status=digitalRead(RLY1);relay2Status=digitalRead(RLY2);relay3Status=digitalRead(RLY3);relay4Status=digitalRead(RLY4);statusmessage=statusmessage+relay1Status+"",""+relay2Status+"",""+relay3Status+"",""+relay4Status;sendMessage(statusmessage);delay(10);statusmessage="""";lastSendTime=millis();// timestamp the messageinterval=random(50)+100;// 2-3 seconds}// parse for a packet, and call onReceive with the result:onReceive(LoRa.parsePacket());}voidsendMessage(Stringoutgoing){LoRa.beginPacket();// start packetLoRa.write(destination);// add destination addressLoRa.write(localAddress);// add sender addressLoRa.write(msgCount);// add message IDLoRa.write(outgoing.length());// add payload lengthLoRa.print(outgoing);// add payloadLoRa.endPacket();// finish packet and send itmsgCount++;// increment message ID}voidonReceive(intpacketSize){if(packetSize==0)return;// if there's no packet, return// read packet header bytes:intrecipient=LoRa.read();// recipient addressbytesender=LoRa.read();// sender addressbyteincomingMsgId=LoRa.read();// incoming msg IDbyteincomingLength=LoRa.read();// incoming msg lengthStringincoming="""";while(LoRa.available()){incoming+=(char)LoRa.read();}if(incomingLength!=incoming.length()){// check length for error// Serial.println(""error: message length does not match length"");;return;// skip rest of function}// if the recipient isn't this device or broadcast,if(recipient!=localAddress&&recipient!=0xFF){//Serial.println(""This message is not for me."");;return;// skip rest of function}// if message is for this device, or broadcast, print details:// Serial.println(""Received from: 0x"" + String(sender, HEX));// Serial.println(""Sent to: 0x"" + String(recipient, HEX));//Serial.println(""Message ID: "" + String(incomingMsgId));// Serial.println(""Message length: "" + String(incomingLength));// Serial.println(""Message: "" + incoming);//Serial.println(""RSSI: "" + String(LoRa.packetRssi()));//Serial.println(""Snr: "" + String(LoRa.packetSnr()));// Serial.println();Stringq=getValue(incoming,',',0);Stringr=getValue(incoming,',',1);Strings=getValue(incoming,',',2);Stringt=getValue(incoming,',',3);Sensor1=q.toInt();Sensor2=r.toInt();Sensor3=s.toInt();Sensor4=t.toInt();if((Sensor1==1)&&(flag1==false)){digitalWrite(RLY1,HIGH);relay1Status=1;Serial.println(""Relay 1 is turned on"");flag1=true;}if((Sensor1==0)&&(flag1==true)){digitalWrite(RLY1,LOW);relay1Status=0;Serial.println(""Relay 1 is turned off"");flag1=false;}if((Sensor2==1)&&(flag2==false)){digitalWrite(RLY2,HIGH);relay2Status=0;Serial.println(""Relay 2 is turned on"");flag2=true;}if((Sensor2==0)&&(flag2==true)){digitalWrite(RLY2,LOW);relay2Status=0;Serial.println(""Relay 2 is turned off"");flag2=false;}if((Sensor3==1)&&(flag3==false)){digitalWrite(RLY3,HIGH);relay3Status=1;Serial.println(""Relay 3 is turned on"");flag3=true;}if((Sensor3==0)&&(flag3==true)){digitalWrite(RLY3,LOW);relay3Status=0;Serial.println(""Relay 3 is turned off"");flag3=false;}if((Sensor4==1)&&(flag4==false)){digitalWrite(RLY4,HIGH);relay4Status=1;Serial.println(""Relay 4 is turned on"");flag4=true;}if((Sensor4==0)&&(flag4==true)){digitalWrite(RLY4,LOW);relay4Status=0;Serial.println(""Relay 4 is turned off"");flag4=false;}incoming="""";}StringgetValue(Stringdata,charseparator,intindex){intfound=0;intstrIndex[]={0,-1};intmaxIndex=data.length()-1;for(inti=0;i<=maxIndex&&found<=index;i++){if(data.charAt(i)==separator||i==maxIndex){found++;strIndex[0]=strIndex[1]+1;strIndex[1]=(i==maxIndex)?i+1:i;}}returnfound>index?data.substring(strIndex[0],strIndex[1]):"""";}Lora Receiver code Explanation:#include <SPI.h>              // include libraries

#include <LoRa.h>




byte msgCount = 0;            // count of outgoing messages

byte localAddress = 0xFF;     // address of this device

byte destination = 0xBB;      // destination to send to

long lastSendTime = 0;        // last send time

int interval = 50;          // interval between sends12345678910111213141516#include <SPI.h>              // include libraries#include <LoRa.h>bytemsgCount=0;// count of outgoing messagesbytelocalAddress=0xFF;// address of this devicebytedestination=0xBB;// destination to send tolonglastSendTime=0;// last send timeintinterval=50;// interval between sendsOn the receiver side, I am using the same libraries, addresses, and timer intervals.boolean flag1 = false;

boolean flag2 = false;

boolean flag3 = false;

boolean flag4 = false;1234567booleanflag1=false;booleanflag2=false;booleanflag3=false;booleanflag4=false;This time I also defined these 4 flags, I am using these flags to stop the unnecessary repetition of code.int RLY1=2;

int RLY2=3;

int RLY3=4;

int RLY4=5;1234567intRLY1=2;intRLY2=3;intRLY3=4;intRLY4=5;Next, you can see I also defined pins for the 4 relays.int Sensor1 = 0;

int Sensor2 = 0;

int Sensor3 = 0;

int Sensor4 = 0;1234567intSensor1=0;intSensor2=0;intSensor3=0;intSensor4=0;Next, I defined these 4 variables for storing the control commands received from the transmitter. These control commands are used to control all the 4 relays.int relay1Status;

int relay2Status;

int relay3Status;

int relay4Status;1234567intrelay1Status;intrelay2Status;intrelay3Status;intrelay4Status;Finally, I am using these 4 variables to store the status of all the 4 relays. These values are used to create the feedback message which is sent to the transmitter side. Now, let’s go to the loop function.void loop() {




  if (millis() - lastSendTime > interval) {

  relay1Status = digitalRead(RLY1);

  relay2Status = digitalRead(RLY2);

  relay3Status = digitalRead(RLY3);

  relay4Status = digitalRead(RLY4);




  statusmessage = statusmessage + relay1Status + "","" + relay2Status + "","" + relay3Status + "","" + relay4Status;

  sendMessage(statusmessage);

  delay(10);




   statusmessage = """";

   lastSendTime = millis();            // timestamp the message

   interval = random(50) + 100;    // 2-3 seconds

  }







  // parse for a packet, and call onReceive with the result:

  onReceive(LoRa.parsePacket());

}12345678910111213141516171819202122232425262728293031323334353637383940414243444546voidloop(){if(millis()-lastSendTime>interval){relay1Status=digitalRead(RLY1);relay2Status=digitalRead(RLY2);relay3Status=digitalRead(RLY3);relay4Status=digitalRead(RLY4);statusmessage=statusmessage+relay1Status+"",""+relay2Status+"",""+relay3Status+"",""+relay4Status;sendMessage(statusmessage);delay(10);statusmessage="""";lastSendTime=millis();// timestamp the messageinterval=random(50)+100;// 2-3 seconds}// parse for a packet, and call onReceive with the result:onReceive(LoRa.parsePacket());}Now, this time I am reading the status of all the four relays, then we create a complete message, which is the feedback message and send it to the transmitter side.void onReceive(int packetSize) {

  if (packetSize == 0) return;          // if there's no packet, return




  // read packet header bytes:

  int recipient = LoRa.read();          // recipient address

  byte sender = LoRa.read();            // sender address

  byte incomingMsgId = LoRa.read();     // incoming msg ID

  byte incomingLength = LoRa.read();    // incoming msg length




  String incoming = """";




  while (LoRa.available()) {

    incoming += (char)LoRa.read();

  }




  if (incomingLength != incoming.length()) {   // check length for error

   // Serial.println(""error: message length does not match length"");

   ;

    return;                             // skip rest of function

  }




  // if the recipient isn't this device or broadcast,

  if (recipient != localAddress && recipient != 0xFF) {

    //Serial.println(""This message is not for me."");

    ;

    return;                             // skip rest of function

  }










String q = getValue(incoming, ',', 0);

String r = getValue(incoming, ',', 1);

String s = getValue(incoming, ',', 2);

String t = getValue(incoming, ',', 3);

Sensor1 = q.toInt();

Sensor2 = r.toInt();

Sensor3 = s.toInt();

Sensor4 = t.toInt();




if((Sensor1 == 1)&&(flag1==false))

{




  digitalWrite(RLY1,HIGH);

   relay1Status = 1;

  Serial.println(""Relay 1 is turned on"");

  flag1=true;

}




if((Sensor1 == 0)&&(flag1 ==true))

{




  digitalWrite(RLY1,LOW);

   relay1Status = 0;

  Serial.println(""Relay 1 is turned off"");

  flag1=false;

}

if((Sensor2 == 1)&&(flag2==false))

{




  digitalWrite(RLY2,HIGH);

   relay2Status = 0;

  Serial.println(""Relay 2 is turned on"");

  flag2=true;

}




if((Sensor2 == 0)&&(flag2 ==true))

{




  digitalWrite(RLY2,LOW);

  relay2Status = 0;

  Serial.println(""Relay 2 is turned off"");

  flag2=false;

}

if((Sensor3 == 1)&&(flag3==false))

{




  digitalWrite(RLY3,HIGH);

  relay3Status = 1;

  Serial.println(""Relay 3 is turned on"");

  flag3=true;

}




if((Sensor3 == 0)&&(flag3 ==true))

{




  digitalWrite(RLY3,LOW);

  relay3Status = 0;

  Serial.println(""Relay 3 is turned off"");

  flag3=false;

}




if((Sensor4 == 1)&&(flag4==false))

{




  digitalWrite(RLY4,HIGH);

  relay4Status = 1;

  Serial.println(""Relay 4 is turned on"");

  flag4=true;

}




if((Sensor4 == 0)&&(flag4 ==true))

{




  digitalWrite(RLY4,LOW);

  relay4Status = 0;

  Serial.println(""Relay 4 is turned off"");

  flag4=false;

}




incoming = """";




}123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247voidonReceive(intpacketSize){if(packetSize==0)return;// if there's no packet, return// read packet header bytes:intrecipient=LoRa.read();// recipient addressbytesender=LoRa.read();// sender addressbyteincomingMsgId=LoRa.read();// incoming msg IDbyteincomingLength=LoRa.read();// incoming msg lengthStringincoming="""";while(LoRa.available()){incoming+=(char)LoRa.read();}if(incomingLength!=incoming.length()){// check length for error// Serial.println(""error: message length does not match length"");;return;// skip rest of function}// if the recipient isn't this device or broadcast,if(recipient!=localAddress&&recipient!=0xFF){//Serial.println(""This message is not for me."");;return;// skip rest of function}Stringq=getValue(incoming,',',0);Stringr=getValue(incoming,',',1);Strings=getValue(incoming,',',2);Stringt=getValue(incoming,',',3);Sensor1=q.toInt();Sensor2=r.toInt();Sensor3=s.toInt();Sensor4=t.toInt();if((Sensor1==1)&&(flag1==false)){digitalWrite(RLY1,HIGH);relay1Status=1;Serial.println(""Relay 1 is turned on"");flag1=true;}if((Sensor1==0)&&(flag1==true)){digitalWrite(RLY1,LOW);relay1Status=0;Serial.println(""Relay 1 is turned off"");flag1=false;}if((Sensor2==1)&&(flag2==false)){digitalWrite(RLY2,HIGH);relay2Status=0;Serial.println(""Relay 2 is turned on"");flag2=true;}if((Sensor2==0)&&(flag2==true)){digitalWrite(RLY2,LOW);relay2Status=0;Serial.println(""Relay 2 is turned off"");flag2=false;}if((Sensor3==1)&&(flag3==false)){digitalWrite(RLY3,HIGH);relay3Status=1;Serial.println(""Relay 3 is turned on"");flag3=true;}if((Sensor3==0)&&(flag3==true)){digitalWrite(RLY3,LOW);relay3Status=0;Serial.println(""Relay 3 is turned off"");flag3=false;}if((Sensor4==1)&&(flag4==false)){digitalWrite(RLY4,HIGH);relay4Status=1;Serial.println(""Relay 4 is turned on"");flag4=true;}if((Sensor4==0)&&(flag4==true)){digitalWrite(RLY4,LOW);relay4Status=0;Serial.println(""Relay 4 is turned off"");flag4=false;}incoming="""";}Then the Arduino checks if any data is received. This time the received message consists of the control commands which are received from the Transmitter. The Arduino splits the entire message and then using the if conditions the relays are turned ON or turned OFF depending on the received values. So, that’s all about the programming.Watch Video Tutorial:Tagshome automation using lora and Arduinolora feedback messagelora for home automationLora sx1278 and Arduinolora sx1278 Arduino"
arduino automation2,I have modified the code and you can see I have also added a display on the transmitter side. I will display the status of electrical loads on this display. So let us power up the transmitter side and see how this system works.
arduino automation2,"Now, Arduino and Lora-based automation systems present quite a practical look. Whenever I turn ON/OFF any button on the transmitter side, the receiver side sends me feedback on whether that load has turned ON or not."
arduino automation2,"Now even if I do not see electrical appliances or loads, there is no problem, because I keep on receiving feedback from the receiver’s side. Now, if there is some issue on the receiver side, I’ll not receive any kind of feedback. Or if I get out of the range, even then I’ll receive no feedback."
arduino automation2,"Anyways, I have been testing this project for the last two days and it is working exceptionally well."
arduino automation2,"If you are thinking about its real implementation, do not forget to use the watchdog timer on the receiver side. Because with the help of a watchdog timer, you can restart the receiver side Arduino automatically, if it hangs due to any particular reason."
arduino automation2,Tested Range:
arduino automation2,"You can see my brother is standing on the roof of my maternal uncle’s house. He has the transmitter and as you can see he is controlling these light bulbs from there. The distance between the transmitter and receiver is 118 meters. Over such a long-distance still, we were able to control the bulbs. You can also watch this in the video given at the end of this article. The maximum communication distance may be more, even more than 200 meters. I will test the maximum communication distance in some open fields, as I am planning to make a transmitter for one of my upcoming RC Airplane projects."
arduino automation2,"I am sure by now you might have got an idea of how does this system works. So, without any further delay, let’s get started!!!"
arduino automation2,Amazon Links:
arduino automation2,Arduino Uno
arduino automation2,Arduino Nano USB-C Type (Recommended)
arduino automation2,LoRa SX1278 Module
arduino automation2,SSD1306 128×64 Oled i2c display Module
arduino automation2,*Disclosure: These are affiliate links. As an Amazon Associate I earn from qualifying purchases.
arduino automation2,SX1278 Lora:
arduino automation2,"Lora 1278 long-distance wireless transceiver module integrates Semtech RF transceiver chip SX1278, which adopts LoRa TM Spread Spectrum modulation frequency hopping technique. The features of long-distance and high sensitivity (-139dBm) make this module perform better than FSK and GFSK modules. Multi-signal won’t affect each other even in a crowd frequency environment; it comes with strong anti-interference performance. This module is 100mW and ultra-small size, widely used in AMR, remote industrial control filed."
arduino automation2,Features:
arduino automation2,Applications:
arduino automation2,"Arduino Lora Automation Project, Circuit Diagram:"
arduino automation2,Lora Transmitter Circuit Diagram:
arduino automation2,The VCC of the LoRa module is connected with the 3.3V of the Arduino. The MISO Pin of the LoRa module is connected with the Arduino’s pin 12. The MOSI pin is connected with the Arduino’s pin 11. The SCLK pin of the LoRa module is connected with the Arduino’s pin 13. The NSS pin is connected with the Arduino’s pin 10 and the ground pin of the LoRa module is connected with the Arduino’s GND.
arduino automation2,"4 switches are connected with the Arduino pins 2, 3, 4, and 5."
arduino automation2,SSD1306 Oled display module SCL and SDA pins are connected with the Arduino’s A5 and A4 pins.
arduino automation2,On the left side is the regulated 5V power supply which accepts a wide range of input DC voltages between 7 and 28volts.
arduino automation2,Lora Receiver Circuit Diagram:
arduino automation2,"On the receiver side, a 4-channel relay module is connected with the Arduino pins 2, 3, 4, and 5. While the connections of the SX1278 Lora module remain exactly the same. Now, let’s take a look at the Transmitter and Receiver side programming."
arduino automation2,"Arduino Lora Automation Project, Programming:"
arduino automation2,This project is based on two programs. Download the following libraries.
arduino automation2,Download: LoRa.h
arduino automation2,Download: Adafruit_GFX.h
arduino automation2,Download: Adafruit_SSD1306.h
arduino automation2,Lora Transmitter programming:
arduino automation2,I added the Adafruit_GFX and Adafruit_SSD1306 libraries for the Oled display module. You can download these libraries from my article.
arduino automation2,"Next, I defined the localAddress, destination, and these variables for the timer."
arduino automation2,"Next, I defined 4 switches."
arduino automation2,"Next, I defined these 4 variables for storing the status of all the 4 switches in the form of 0 and 1. We use these status values to control relays on the receiver side."
arduino automation2,"Next, I defined these 4 variables to store the status feedback values of the 4 loads received from the receiver side. Now, let’s go to the loop function."
arduino automation2,"First, we read the status of the switches, then we make a complete message and send it to the receiver side. Arduino checks and sends the control commands after every few milliseconds. If you want you can change the interval. After sending the message then the Arduino checks if any data is received from the receiver side."
arduino automation2,"The data which is received from the receiver side is the feedback message, this feedback message consists of the relays status in the form 0 and 1. So, the incoming message is split and the feedback status values are stored in their respective variables, where its values are displayed on the Oled display module."
arduino automation2,"The getValue() function is used to split a string message using a delimiter. In my case, I am using Comma as the delimiter, if you want you can use any other character as the delimiter. So, that’s all about the transmitter side programming, and now let’s take a look at the receiver side programming."
arduino automation2,Lora Receiver Programming:
arduino automation2,"On the receiver side, I am using the same libraries, addresses, and timer intervals."
arduino automation2,"This time I also defined these 4 flags, I am using these flags to stop the unnecessary repetition of code."
arduino automation2,"Next, you can see I also defined pins for the 4 relays."
arduino automation2,"Next, I defined these 4 variables for storing the control commands received from the transmitter. These control commands are used to control all the 4 relays."
arduino automation2,"Finally, I am using these 4 variables to store the status of all the 4 relays. These values are used to create the feedback message which is sent to the transmitter side. Now, let’s go to the loop function."
arduino automation2,"Now, this time I am reading the status of all the four relays, then we create a complete message, which is the feedback message and send it to the transmitter side."
arduino automation2,"Then the Arduino checks if any data is received. This time the received message consists of the control commands which are received from the Transmitter. The Arduino splits the entire message and then using the if conditions the relays are turned ON or turned OFF depending on the received values. So, that’s all about the programming."
arduino automation2,Watch Video Tutorial:
arduino automation2,Engr. Shahzada Fahad
arduino automation2,Related Articles
arduino automation2,Digital 360° Tilt Sensor with Arduino and ESP32
arduino automation2,Underwater Ultrasonic Sensor with Arduino
arduino automation2,"Weighing Scale using Arduino, HX711, and a Load Cell"
arduino automation2,Force Sensitive Resistor FSR with Arduino
arduino automation2,2 Comments
arduino automation2,"Great project, just one question can I use the Arduino Nano for both tx and rx?"
arduino automation2,"Friend, tell me how you can use LEDs instead of a display, how to do it, tell me"
arduino automation2,Leave a ReplyCancel reply
arduino automation2,Your email address will not be published.Required fields are marked*
arduino automation2,Comment*
arduino automation2,Name*
arduino automation2,Email*
arduino automation2,Website
arduino automation2,"Save my name, email, and website in this browser for the next time I comment."
arduino automation2,Δ
arduino automation2,"pH meter Arduino, pH Meter Calibration, DIYMORE pH Sensor Arduino Code"
arduino automation2,Arduino Libraries Download and Projects they are used in “Project codes”
arduino automation2,"Decoder, 3 to 8 Decoder Block Diagram, Truth Table, and Logic Diagram"
arduino automation2,We are using cookies to give you the best experience on our website.
arduino automation2,You can find out more about which cookies we are using or switch them off insettings.
arduino automation2,This website uses cookies so that we can provide you with the best user experience possible. Cookie information is stored in your browser and performs functions such as recognising you when you return to our website and helping our team to understand which sections of the website you find most interesting and useful.
arduino automation2,Strictly Necessary Cookie should be enabled at all times so that we can save your preferences for cookie settings.
arduino automation2,"If you disable this cookie, we will not be able to save your preferences. This means that every time you visit this website you will need to enable or disable cookies again."
arduino automation3,Arduino IoT Cloud Home Automation Project using ESP32
arduino automation3,Table of Contents
arduino automation3,"Arduino IoT Cloud Home Automation, Description:"
arduino automation3,"Arduino IoT Cloud Home Automation Project using ESP32-Building a Home Automation system with Arduino IoT Cloud is far easier than building it with theBlynk IoT platform. A dashboard on your cell phone is automatically generated which you can use to control things from remote locations if you have access to the internet. TheArduino IoT Cloud Remote Appcan be installed on bothIoSandAndroid cell phones. You can also control your electrical devices through a dashboard from your computer screen, now the computer dashboard can be quite handy in situations when you have to monitor and control multiple things."
arduino automation3,"As you can see when I turn ON a button on my computer dashboard, the same button is also turned ON, on the cell phone dashboard. The computer dashboard and cell phone App are working together and make a dual control system which means any electrical device that is turned ON or turned OFF using the computer dashboard can also be turned OFF or turned ON using the cell phone. In this article, you will learn how to makeHome Automation systemusingArduino IoT cloudandESP32WiFi + Bluetooth module."
arduino automation3,Altium Designer:
arduino automation3,"Altium Designeris the world’s most trusted PCB design system.Altium Designerenables engineers to effortlessly connect with everyfacetof the electronics design process. Over 35 years of innovation and development focused on a truly unified design environment makes it the most widely used PCB design solution. WithAltium Designeryou can create PCB designs with anintuitiveand powerful interface that connects you to every aspect of the electronics design process. Route it your way through any angle, tune for delay, Push, Slide, and Walkaround faster than ever. Interact andcollaboratewith mechanical designers like never before in a photo-realistic, 3D design environment. If you want to get started with the Altium designer, you can click on theget started."
arduino automation3,"In my previous article, I explainedhow to get started with the Arduino IoT Cloudand explained the maximum basic things including how to register an account, how to install the ArduinoCreateAgent, how to make a dashboard, and how to write a basic program for monitoring a sensor and for controlling an LED. So, I highly recommend reading my previous getting started tutorial on theArduino IoT Cloud. Without any further delay, let’s get started!!!"
arduino automation3,Amazon Purchase Links:
arduino automation3,12v Adaptor:
arduino automation3,ESP32 WiFi + Bluetooth Module(Recommended)
arduino automation3,12V SPDT Relay:
arduino automation3,*Disclosure: These are affiliate links. As an Amazon Associate I earn from qualifying purchases.
arduino automation3,ESP32 Home Automation Circuit Diagram:
arduino automation3,"J1 is the female power jack and this is where we connect a 12v adaptor, battery, or solar panel. Two 470uf decoupling capacitors are connected at the input and output sides of the 7805 voltage regulator. The output of the voltage regulator is connected with the 5v pin of the ESP32 module and the ground of the power supply is connected with the ground of the ESP32 module."
arduino automation3,"These are 12v SPDT type relays and cannot be directly controlled using the ESP32 Module, So, that’s why we need a driver to control these relays. You can use a relay driver IC or you can use a 2n2222 NPN transistor and a 10k resistor. One pin of the relay coil is connected with the collector of the 2n2222 NPN transistor while the other pin of the relay coil is connected with the 12 volts. The emitter of the transistor is connected with the ground while the base is connected with the 10k ohm resistor."
arduino automation3,"Now to control these relays you simply need to connect these 10k resistors with the ESP32 I/O pins. In this project, I am using the GPIO pins 13, 12, 14, and 27. I will be using the same pins in the programming."
arduino automation3,These 4 relays can be used to control 4 different types of loads. The loads should be connected with thecommonandnormally openlegs of the relays. For the making watch my video tutorial on theESP32 & Blynk application based Home Automation Project.
arduino automation3,"Here is my ESP32 Development board which can be used for monitoring different sensors and controlling different DC and AC loads. If you want to make the same development board then you can download theGerber files. Now, let’s start with the Arduino IoT Cloud. As I have already explained all the steps in my previous getting started tutorial, so there is nothing left to talk about, but still, if you find anything difficult to understand then you can read my article available on www.electroniclinic.com I will provide a link in the description."
arduino automation3,Arduino IoT Cloud Home Automation:
arduino automation3,"To get started with the Arduino IoT Cloud, first, you will need to create an account, which I have already explained in mygetting started tutorial on the Arduino IoT Cloud."
arduino automation3,If you have already an account click on theIOT Cloud.
arduino automation3,"Now, click on theCREATE THINGin which we will create the variables for the various devices."
arduino automation3,Creating variables:
arduino automation3,"Now we will create variables in our case we are using four variables through which we will control four appliances. So, to add the variables click on the add variable, we will go to the setup in which we will click on theADD VARIABLE."
arduino automation3,"Now, first of all, we will create a variable for the first appliance with the name of device1 then in the select variable type, we will select the Alexa compatible in which we will select the switch."
arduino automation3,Then we will click on the add variable.
arduino automation3,"In a similar way, we will add a second variable and give it a name device2"
arduino automation3,Then we will add a third variable for the third appliance.
arduino automation3,"Finally, we will add a fourth variable for the fourth appliance."
arduino automation3,"Now, all the variables have been added and now we will configure the device"
arduino automation3,Configuring the device:
arduino automation3,Now to add the device click on the add device.
arduino automation3,Now we will select the device which we will want to add we will select the third party device
arduino automation3,"After that, we will select theESP32 deviceand select theESP32 dev moduleand click on the continue button."
arduino automation3,Now give a name to the device which isESP32and click on the Next button.
arduino automation3,Then we will click on the download button in order to use the security key and device id.
arduino automation3,"Then click on the, I saved my device and secret key and click on the continue button."
arduino automation3,After clicking on the continue button theESP32 modulewill be successfully added and click on the done button.
arduino automation3,Configuring the network:
arduino automation3,"Now after that, we will configure the network in order to connect to the wifi, we will click on the network button."
arduino automation3,When we will click on the network we will add the name of the wifi router and password. Then copy the secret key from the downloaded pdf and paste it in the secret key box and click on the save.
arduino automation3,"Arduino IoT Cloud Dashboard, Creating buttons:"
arduino automation3,After that click on the dashboards in order to design the various button for controlling the appliances.
arduino automation3,Now click on the edit button and give the name to the project which is home automation.
arduino automation3,Then click on the add button in which we will click on the switch.
arduino automation3,Now give a name to the switch as device 1 and click on the link button
arduino automation3,When we will click on the link button we will select the variable and click on the link button and the button will be linked to the variable.
arduino automation3,"In a similar way, we will add the buttons for the other three appliances and link the variable for each appliance."
arduino automation3,"After that, we will click on the thing and go back to the menu in order to write the code for each appliance. Now click on the sketch button in order to write the code"
arduino automation3,Now click on the open full editor button to write the code
arduino automation3,Arduino IoT Complete code:
arduino automation3,Uploading the code:
arduino automation3,After writing the code we will get a message to install Arduino agent in order to upload the code to the ESP32 so we will click on the learn more and download the agent and install it in the computer.
arduino automation3,This option shows that the agent is running on the computer
arduino automation3,Then we will select the board and click on the ok button.
arduino automation3,Now the board is successfully added and we will click on the upload button
arduino automation3,After uploading the code to the esp32 we will be able to control the appliances from the mobile dashboard and also from the Laptop dashboard.
arduino automation3,Video Tutorial:
arduino automation3,Engr. Shahzada Fahad
arduino automation3,Related Articles
arduino automation3,C4001 mmWave Human Detection Sensor with Arduino and ESP32
arduino automation3,ESP32-S3 Geek and Arduino IDE- Getting Started Tutorial
arduino automation3,Digital 360° Tilt Sensor with Arduino and ESP32
arduino automation3,SmartWatch Home Automation and Sensor Monitoring
arduino automation3,Leave a ReplyCancel reply
arduino automation3,Your email address will not be published.Required fields are marked*
arduino automation3,Comment*
arduino automation3,Name*
arduino automation3,Email*
arduino automation3,Website
arduino automation3,"Save my name, email, and website in this browser for the next time I comment."
arduino automation3,Δ
arduino automation3,"pH meter Arduino, pH Meter Calibration, DIYMORE pH Sensor Arduino Code"
arduino automation3,Arduino Libraries Download and Projects they are used in “Project codes”
arduino automation3,"Decoder, 3 to 8 Decoder Block Diagram, Truth Table, and Logic Diagram"
arduino automation3,We are using cookies to give you the best experience on our website.
arduino automation3,You can find out more about which cookies we are using or switch them off insettings.
arduino automation3,This website uses cookies so that we can provide you with the best user experience possible. Cookie information is stored in your browser and performs functions such as recognising you when you return to our website and helping our team to understand which sections of the website you find most interesting and useful.
arduino automation3,Strictly Necessary Cookie should be enabled at all times so that we can save your preferences for cookie settings.
arduino automation3,"If you disable this cookie, we will not be able to save your preferences. This means that every time you visit this website you will need to enable or disable cookies again."
arduino automation4,Home Automation System using Matlab GUI and Arduino
arduino automation4,Table of Contents
arduino automation4,"Home automation system, Overview:"
arduino automation4,"Home Automation System using Matlab GUI and Arduino-I have been making different types of Home automation and industrial automation projects using different types of controller boards including Arduino Uno, Arduino Nano, Arduino Mega, ESP8266, ESP32 WiFi + Bluetooth Module, Raspberry Pi, and PLC. Below is the list of some of my automation projects which I believe will really help you in making intermediate and advanced level Home automation projects."
arduino automation4,"In this tutorial, we will design a GUI “Graphical User Interface” application in Matlab for controlling different Home appliances like a fan, TV, motor, and lights. You can increase the number of appliances according to your requirement. This project is based on the Matlab and Arduino Uno. First you will need to do some settings before you can send the control commands from theMatlab GUIto theArduino Unoboard. So, if you are using theArduino and Matlabfor the first time then you should read my previous articles on the Matlab."
arduino automation4,"So, after reading the above articles and after installing theHardware support packagefor the Arduino then you are good to go."
arduino automation4,Amazon Links:
arduino automation4,Arduino Uno
arduino automation4,5v relay module
arduino automation4,Other Tools and Components:
arduino automation4,Top Arduino Sensors:
arduino automation4,Super Starter kit for Beginners
arduino automation4,Digital Oscilloscopes
arduino automation4,Variable Supply
arduino automation4,Digital Multimeter
arduino automation4,Soldering iron kits
arduino automation4,PCB small portable drill machines
arduino automation4,*Please Note: These are affiliate links. I may make a commission if you buy the components through these links. I would appreciate your support in this way!
arduino automation4,Circuit diagram of Matlab home automation Project:
arduino automation4,The circuit diagram of the Home automation project is pretty simple. As you can see the neutral wire is connected with all the devices. While the 110/220Vac phase wire is connected with the Common contact of all the relays. The relay is a mechanical switch which we will use to connect and disconnect the Live wire.
arduino automation4,You can also use a 12V relay module for which you will need 12Vdc power supply.
arduino automation4,Note: Be very careful while working on such high voltage system because it can be really dangerous. Don’t forget to wear protective gloves.
arduino automation4,Matlab GUI Design for Home Automation:
arduino automation4,"In order to make the Matlab GUI application, we will write guide in the command window in the MATLAB."
arduino automation4,When we will press enter the GUI platform will open.
arduino automation4,First of all we will insert a panel by clicking on the panel icon:
arduino automation4,"Then we will change the color of the panel and also change the title. In order to change the color double click on the panel, a dialog box will open. Now click on the background color and select the color."
arduino automation4,Now will need several buttons for ON and OFF for various appliances such as:
arduino automation4,"When we will press the FAN ON, the fan will turn ON and when we will press on the FAN OFF the fan will turn OFF and so on."
arduino automation4,"After adding these Push Buttons, the next step is to change the tag for each button and we will also need to change the title of the button. For example, for the FAN ON, we will change the title of the pushbutton to FAN ON and tag to FANON. So, you will need to repeat this for all the buttons."
arduino automation4,Now as our project GUI is complete now we will save the project. After saving the project. the code will automatically open.
arduino automation4,Matlab Home Automation code:
arduino automation4,First of all in the main function we will declare a variable which will get the value of the Arduino port. We declare the “a” variable as a global which means that it is accessible to all functions and the clear all function will clear all the previous values.
arduino automation4,Now for each button we will write the code:
arduino automation4,Fan button function:
arduino automation4,When we click the fan on button the following function will be called:
arduino automation4,Now in this function we will make digital pin 1 of the Arduino “1” which means that it will turn on the fan.
arduino automation4,Now when we will click the off button then we will write 0 to the digital pin 1 which will make the fan turn off.
arduino automation4,Light button function:
arduino automation4,Similarly we have connected light to digital pin 2 of the Arduino. when we will click the light button on the lighton function will be called in which we have make the digital pin high due to which the light will be turn on.
arduino automation4,when we will click the light off button it will make the digital pin 2 low due to which the light will be turn off.
arduino automation4,TV button function:
arduino automation4,Similarly for the TV button on function will make the digital pin 3 high due to which the TV will be turned on.
arduino automation4,When we will click the tv off button the tv will be turned off.
arduino automation4,ALL turn on and off function:
arduino automation4,Now if we want to turn on all the appliances together we will click on the all turn on it will make all the digital pins high and all the appliances will be turned on.
arduino automation4,"Similarly, when we will click on all off, all the digital pins will be low and all the appliances will turn off."
arduino automation4,"Matlab GUI Home Automation, Complete code:"
arduino automation4,"Now our project is completed and now we can click on the Run button, the MATLABE GUI will automatically get connected with the Arduino."
arduino automation4,"Now, all you need is to press the desired buttons to turn ON or turn OFF any electrical load. If you face any problems in executing the code, then I highly recommend you should read my previous articles on the Arduino and Matlab, links I have already shared above."
arduino automation4,Engr. Shahzada Fahad
arduino automation4,Related Articles
arduino automation4,"Ultrasonic sensor, Servo motor, and Arduino interfacing with MATLAB"
arduino automation4,"Matlab GUI for Image Processing, explained with examples"
arduino automation4,DC Motor Control using MATLAB GUI and Arduino fully explained
arduino automation4,Matlab Arduino to Control an Led using Serial communication
arduino automation4,Leave a ReplyCancel reply
arduino automation4,Your email address will not be published.Required fields are marked*
arduino automation4,Comment*
arduino automation4,Name*
arduino automation4,Email*
arduino automation4,Website
arduino automation4,"Save my name, email, and website in this browser for the next time I comment."
arduino automation4,Δ
arduino automation4,"pH meter Arduino, pH Meter Calibration, DIYMORE pH Sensor Arduino Code"
arduino automation4,Arduino Libraries Download and Projects they are used in “Project codes”
arduino automation4,"Decoder, 3 to 8 Decoder Block Diagram, Truth Table, and Logic Diagram"
arduino automation4,We are using cookies to give you the best experience on our website.
arduino automation4,You can find out more about which cookies we are using or switch them off insettings.
arduino automation4,This website uses cookies so that we can provide you with the best user experience possible. Cookie information is stored in your browser and performs functions such as recognising you when you return to our website and helping our team to understand which sections of the website you find most interesting and useful.
arduino automation4,Strictly Necessary Cookie should be enabled at all times so that we can save your preferences for cookie settings.
arduino automation4,"If you disable this cookie, we will not be able to save your preferences. This means that every time you visit this website you will need to enable or disable cookies again."
arduino automation5,Arduino IoT Cloud Home Automation Project using ESP32
arduino automation5,Table of Contents
arduino automation5,"Arduino IoT Cloud Home Automation, Description:"
arduino automation5,"Arduino IoT Cloud Home Automation Project using ESP32-Building a Home Automation system with Arduino IoT Cloud is far easier than building it with theBlynk IoT platform. A dashboard on your cell phone is automatically generated which you can use to control things from remote locations if you have access to the internet. TheArduino IoT Cloud Remote Appcan be installed on bothIoSandAndroid cell phones. You can also control your electrical devices through a dashboard from your computer screen, now the computer dashboard can be quite handy in situations when you have to monitor and control multiple things."
arduino automation5,"As you can see when I turn ON a button on my computer dashboard, the same button is also turned ON, on the cell phone dashboard. The computer dashboard and cell phone App are working together and make a dual control system which means any electrical device that is turned ON or turned OFF using the computer dashboard can also be turned OFF or turned ON using the cell phone. In this article, you will learn how to makeHome Automation systemusingArduino IoT cloudandESP32WiFi + Bluetooth module."
arduino automation5,Altium Designer:
arduino automation5,"Altium Designeris the world’s most trusted PCB design system.Altium Designerenables engineers to effortlessly connect with everyfacetof the electronics design process. Over 35 years of innovation and development focused on a truly unified design environment makes it the most widely used PCB design solution. WithAltium Designeryou can create PCB designs with anintuitiveand powerful interface that connects you to every aspect of the electronics design process. Route it your way through any angle, tune for delay, Push, Slide, and Walkaround faster than ever. Interact andcollaboratewith mechanical designers like never before in a photo-realistic, 3D design environment. If you want to get started with the Altium designer, you can click on theget started."
arduino automation5,"In my previous article, I explainedhow to get started with the Arduino IoT Cloudand explained the maximum basic things including how to register an account, how to install the ArduinoCreateAgent, how to make a dashboard, and how to write a basic program for monitoring a sensor and for controlling an LED. So, I highly recommend reading my previous getting started tutorial on theArduino IoT Cloud. Without any further delay, let’s get started!!!"
arduino automation5,Amazon Purchase Links:
arduino automation5,12v Adaptor:
arduino automation5,ESP32 WiFi + Bluetooth Module(Recommended)
arduino automation5,12V SPDT Relay:
arduino automation5,*Disclosure: These are affiliate links. As an Amazon Associate I earn from qualifying purchases.
arduino automation5,ESP32 Home Automation Circuit Diagram:
arduino automation5,"J1 is the female power jack and this is where we connect a 12v adaptor, battery, or solar panel. Two 470uf decoupling capacitors are connected at the input and output sides of the 7805 voltage regulator. The output of the voltage regulator is connected with the 5v pin of the ESP32 module and the ground of the power supply is connected with the ground of the ESP32 module."
arduino automation5,"These are 12v SPDT type relays and cannot be directly controlled using the ESP32 Module, So, that’s why we need a driver to control these relays. You can use a relay driver IC or you can use a 2n2222 NPN transistor and a 10k resistor. One pin of the relay coil is connected with the collector of the 2n2222 NPN transistor while the other pin of the relay coil is connected with the 12 volts. The emitter of the transistor is connected with the ground while the base is connected with the 10k ohm resistor."
arduino automation5,"Now to control these relays you simply need to connect these 10k resistors with the ESP32 I/O pins. In this project, I am using the GPIO pins 13, 12, 14, and 27. I will be using the same pins in the programming."
arduino automation5,These 4 relays can be used to control 4 different types of loads. The loads should be connected with thecommonandnormally openlegs of the relays. For the making watch my video tutorial on theESP32 & Blynk application based Home Automation Project.
arduino automation5,"Here is my ESP32 Development board which can be used for monitoring different sensors and controlling different DC and AC loads. If you want to make the same development board then you can download theGerber files. Now, let’s start with the Arduino IoT Cloud. As I have already explained all the steps in my previous getting started tutorial, so there is nothing left to talk about, but still, if you find anything difficult to understand then you can read my article available on www.electroniclinic.com I will provide a link in the description."
arduino automation5,Arduino IoT Cloud Home Automation:
arduino automation5,"To get started with the Arduino IoT Cloud, first, you will need to create an account, which I have already explained in mygetting started tutorial on the Arduino IoT Cloud."
arduino automation5,If you have already an account click on theIOT Cloud.
arduino automation5,"Now, click on theCREATE THINGin which we will create the variables for the various devices."
arduino automation5,Creating variables:
arduino automation5,"Now we will create variables in our case we are using four variables through which we will control four appliances. So, to add the variables click on the add variable, we will go to the setup in which we will click on theADD VARIABLE."
arduino automation5,"Now, first of all, we will create a variable for the first appliance with the name of device1 then in the select variable type, we will select the Alexa compatible in which we will select the switch."
arduino automation5,Then we will click on the add variable.
arduino automation5,"In a similar way, we will add a second variable and give it a name device2"
arduino automation5,Then we will add a third variable for the third appliance.
arduino automation5,"Finally, we will add a fourth variable for the fourth appliance."
arduino automation5,"Now, all the variables have been added and now we will configure the device"
arduino automation5,Configuring the device:
arduino automation5,Now to add the device click on the add device.
arduino automation5,Now we will select the device which we will want to add we will select the third party device
arduino automation5,"After that, we will select theESP32 deviceand select theESP32 dev moduleand click on the continue button."
arduino automation5,Now give a name to the device which isESP32and click on the Next button.
arduino automation5,Then we will click on the download button in order to use the security key and device id.
arduino automation5,"Then click on the, I saved my device and secret key and click on the continue button."
arduino automation5,After clicking on the continue button theESP32 modulewill be successfully added and click on the done button.
arduino automation5,Configuring the network:
arduino automation5,"Now after that, we will configure the network in order to connect to the wifi, we will click on the network button."
arduino automation5,When we will click on the network we will add the name of the wifi router and password. Then copy the secret key from the downloaded pdf and paste it in the secret key box and click on the save.
arduino automation5,"Arduino IoT Cloud Dashboard, Creating buttons:"
arduino automation5,After that click on the dashboards in order to design the various button for controlling the appliances.
arduino automation5,Now click on the edit button and give the name to the project which is home automation.
arduino automation5,Then click on the add button in which we will click on the switch.
arduino automation5,Now give a name to the switch as device 1 and click on the link button
arduino automation5,When we will click on the link button we will select the variable and click on the link button and the button will be linked to the variable.
arduino automation5,"In a similar way, we will add the buttons for the other three appliances and link the variable for each appliance."
arduino automation5,"After that, we will click on the thing and go back to the menu in order to write the code for each appliance. Now click on the sketch button in order to write the code"
arduino automation5,Now click on the open full editor button to write the code
arduino automation5,Arduino IoT Complete code:
arduino automation5,Uploading the code:
arduino automation5,After writing the code we will get a message to install Arduino agent in order to upload the code to the ESP32 so we will click on the learn more and download the agent and install it in the computer.
arduino automation5,This option shows that the agent is running on the computer
arduino automation5,Then we will select the board and click on the ok button.
arduino automation5,Now the board is successfully added and we will click on the upload button
arduino automation5,After uploading the code to the esp32 we will be able to control the appliances from the mobile dashboard and also from the Laptop dashboard.
arduino automation5,Video Tutorial:
arduino automation5,Engr. Shahzada Fahad
arduino automation5,Related Articles
arduino automation5,C4001 mmWave Human Detection Sensor with Arduino and ESP32
arduino automation5,ESP32-S3 Geek and Arduino IDE- Getting Started Tutorial
arduino automation5,Digital 360° Tilt Sensor with Arduino and ESP32
arduino automation5,SmartWatch Home Automation and Sensor Monitoring
arduino automation5,Leave a ReplyCancel reply
arduino automation5,Your email address will not be published.Required fields are marked*
arduino automation5,Comment*
arduino automation5,Name*
arduino automation5,Email*
arduino automation5,Website
arduino automation5,"Save my name, email, and website in this browser for the next time I comment."
arduino automation5,Δ
arduino automation5,"pH meter Arduino, pH Meter Calibration, DIYMORE pH Sensor Arduino Code"
arduino automation5,Arduino Libraries Download and Projects they are used in “Project codes”
arduino automation5,"Decoder, 3 to 8 Decoder Block Diagram, Truth Table, and Logic Diagram"
arduino automation5,We are using cookies to give you the best experience on our website.
arduino automation5,You can find out more about which cookies we are using or switch them off insettings.
arduino automation5,This website uses cookies so that we can provide you with the best user experience possible. Cookie information is stored in your browser and performs functions such as recognising you when you return to our website and helping our team to understand which sections of the website you find most interesting and useful.
arduino automation5,Strictly Necessary Cookie should be enabled at all times so that we can save your preferences for cookie settings.
arduino automation5,"If you disable this cookie, we will not be able to save your preferences. This means that every time you visit this website you will need to enable or disable cookies again."
arduino automation6,Android Toggle Button for Automation using Arduino & Bluetooth
arduino automation6,Table of Contents
arduino automation6,"Android Toggle Button, Description:"
arduino automation6,"Android Toggle Button for Automation using Arduino & Bluetooth– A few months back I uploaded an article on how to create your own android cell phone application to control an LED using Arduino, HC-05 Bluetooth module and an Android cell Phone. For the best understanding, I used only two buttons light ON and light OFF. The two buttons were used to turn ON and turn OFF the led. You can read thisarticle."
arduino automation6,"Using two buttons to control an LED or any other load AC or DC type is good for beginners. But when it comes to the final app development where you need to control multiple loads, this seems very impractical to have two buttons for every load. If you want to control 8 electrical loads you will need 16 buttons. After covering the basics, I decided to make another tutorial focusing on the Android toggle button or switch."
arduino automation6,"Instead of using two buttons, the same thing can be done by using only one button which is called a toggle switch or a toggle button. Previously I used an LED, so that’s why this time I decided to use a 220Vac light bulb. Later you can increase the number of toggle buttons to control multiple loads. You can download some cool png images of the electrical appliances and use them as the buttons, which you will learn in a minute."
arduino automation6,"For the practical demonstration, circuit diagram explanation, and programming watch the video given at the end of this article."
arduino automation6,Without any further delay let’s get started!!!
arduino automation6,Amazon Links:
arduino automation6,Arduino Nano USB-C Type (Recommended)
arduino automation6,12v Adaptor:
arduino automation6,Bluetooth Module: Hc-05:
arduino automation6,12V SPDT Relay:
arduino automation6,One-Channel Relay Module:
arduino automation6,2-channel relay module:
arduino automation6,12v SPDT type 4-channel relay Module:
arduino automation6,8 channel Relay Module
arduino automation6,Arduino Uno
arduino automation6,*Disclosure: These are affiliate links. As an Amazon Associate I earn from qualifying purchases.
arduino automation6,Android Toggle Button Circuit Diagram:
arduino automation6,The HC-05 or HC-06 Bluetooth Module Tx and Rx pins are connected with the Arduino’s pin number 2 and pin number 3. While the Vcc and GND pins of the Bluetooth module are connected with the Arduino’s 5 Volts and ground.
arduino automation6,"A 12 volts SPDT “Single Pole and Double Throw” type relay is used to control the AC load. This relay has a total of 5 pins, out of these 5 pins two are the coil pins, common, Normally Open, and normally closed. This relay is controlled by the driver circuit which consists of the Transistor and a 10k ohm resistor. This is a general-purpose NPN transistor. As you can see the emitter is connected with the Ground, the collector is connected with the relay coil pin while the other side of the relay coil is connected with the 12 volts. The base is connected with the Arduino’s pin number 13 through a 10k resistor. A diode is connected across the relay coil, which is used for the back EMF protection. You can use a readymade relay module or you can make the one by yourself."
arduino automation6,About HC 05 Bluetooth Module:
arduino automation6,The HC-05 Bluetooth Module used in this project is given below.
arduino automation6,"As you can see clearly in the images above, this Bluetooth module has a total of 6 male headers which are clearly labeled as STATE, RXD, TXD, GND, VCC, and EN. The EN pin has a push button that is used during the time when this module is needed to be entered into the AT commands Mode. I have a very detailed tutorial on how to use the AT commands to change the name of theBluetooth moduleand the pairing code. You can watch the following video."
arduino automation6,Relay Module with Arduino
arduino automation6,"As you can see on the left side is the 3 channel relay module, but out of these three relays currently, I am using only one relay which is connected with the Arduino’s pin number 13 and make sure you connect the relay module ground ”blue wire” with the Arduino’s ground. The Bluetooth Module is connected with the Arduino as per the circuit diagram already explained."
arduino automation6,Arduino Bluetooth Programming:
arduino automation6,"#include <SoftwareSerial.h>SoftwareSerial Blue(2, 3);long int data;"
arduino automation6,int relay1 = 13; // DEVICE 1long int password1 = 92;// light onlong int password2 = 551;// to off
arduino automation6,void setup(){
arduino automation6,"pinMode(relay1, OUTPUT);digitalWrite(relay1, LOW);"
arduino automation6,delay(500);
arduino automation6,Serial.begin(9600);Blue.begin(9600);
arduino automation6,}
arduino automation6,void loop(){
arduino automation6,while(Blue.available()==0) ;
arduino automation6,if(Blue.available()>0){data = Blue.parseInt();}delay(400);
arduino automation6,if (data == password1){
arduino automation6,"digitalWrite(relay1,HIGH);Serial.println(“device1 on “);}"
arduino automation6,"if( data == password2){digitalWrite(relay1,LOW);Serial.println(“device1 off”);}"
arduino automation6,}
arduino automation6,Arduino Bluetooth Program explanation:
arduino automation6,I started off by including the Software Serial library. The SoftwareSerial library is used to create Serial Ports. You can define multiple Serial Ports. If you are using the Arduino Mega then you don’t need to use the SoftwareSerial library as you know in Arduino Mega we have multiple Serial ports. But when it comes to the Arduino we have only one Serial Port which is available on pin number 0 and pin number 1. As I always say never use the Arduino’s default Serial Port for communication with other devices. The Arduino’s default Serial Port should only be used for debugging purposes. So using the SoftwareSerial library I defined a serial port of the Bluetooth module on pin number 2 and pin number 3 of the Arduino.
arduino automation6,The variable data is of the type long integer and is used to store the number sent from the Bluetooth application. This number can be 6 digits long to increase security.
arduino automation6,Relay is connected with the Arduino’s pin number 13 which is already explained in the circuit diagram.
arduino automation6,long int password1 = 92;
arduino automation6,long int password2 = 551;
arduino automation6,These are the two passwords that are used to turn ON and turn OFF the load. You can increase the security by using numbers consisting of 6 digits.
arduino automation6,"In every Arduino or Mega program, we have at least two functions which are the void setup and void loop functions. The void setup function executes only one time when the Arduino or Mega board is turned ON, while the void loop function executes forever until we turn OFF the Board. In the void setup function, the relay is set as the output using the pinMode() function. The relay is turned OFF by using digitalWrite function and finally, the Serial communication is activated."
arduino automation6,"In the void loop function,"
arduino automation6,while(Blue.available()==0) ;
arduino automation6,If the Arduino has not received any data from the Bluetooth module then simply wait over here.
arduino automation6,if(Blue.available()>0)
arduino automation6,{
arduino automation6,data = Blue.parseInt();
arduino automation6,}
arduino automation6,This condition means if the Arduino has received data from the Bluetooth then store the received number in data and compare this with the predefined values and then turn ON and turn OFF the relay accordingly. So that’s all about Arduino programming.
arduino automation6,Android Toggle Button app development:
arduino automation6,About Bluetooth:
arduino automation6,"The Android platform provides Bluetooth network stack support, which allows a phone to exchange data wirelessly with other Bluetooth devices. With the Android Bluetooth APIs, the application framework provides access to the Bluetooth features. These APIs allow wireless connection of applications to other Bluetooth devices, allowing point-to-point and wireless multipoint features."
arduino automation6,"Using the Bluetooth APIs, the following can be achieved by an Android application:"
arduino automation6,Check for other phones with Bluetooth
arduino automation6,"For paired Bluetooth devices, ask for a local Bluetooth adapter"
arduino automation6,Establish channels for RFCOMM
arduino automation6,Link to other phones by finding the service
arduino automation6,Data transfer from and to other phones
arduino automation6,Manage multiple links
arduino automation6,"This page is dedicated to Classic Bluetooth. Classic Bluetooth is the right choice for more battery-intensive operations, including streaming and Android phone connectivity. For low-powered Bluetooth devices, Android 4.3 (API level 18) introduces Bluetooth Low Energy API support. See Bluetooth Low Energy for more information. The document defines different models for Bluetooth, including the Health System Profile. It then describes how to use the Android Bluetooth APIs to accomplish the four main tasks required for Bluetooth communication: setting up Bluetooth, identifying devices that are either paired or accessible in the local area, linking devices, and transferring data between devices."
arduino automation6,The basics of Bluetooth
arduino automation6,"To allow Bluetooth devices to transmit data between themselves, they must first use a pairing method to form a communication channel. For incoming connection requests, one device, a discoverable device, makes itself available. Another device uses a service discovery process to find the discoverable device."
arduino automation6,"The two devices complete a bonding process where they exchange security keys after the discoverable device acknowledges the pairing request. These keys are cached for later use by the devices. The two devices exchange information after the pairing and bonding processes are complete. The device that initiated the pairing request will release the stream that connected it to the discoverable device when the session is complete. Nevertheless, the two devices remain connected, so they can automatically reconnect during a future session so long as they are within each other’s reach and the bond has not been broken by either system."
arduino automation6,Bluetooth enabling permission
arduino automation6,"You must claim two permissions to use Bluetooth features in your software. BLUETOOTH is the first of these. To perform some Bluetooth communication, you need this permission, such as requesting a link, accepting a connection, and transferring data."
arduino automation6,"ACCESS FINE LOCATION is the other permission to be declared. Your device requires this permission because you can use a Bluetooth scan to collect information about the user’s location. This data can come from the user’s own phones, as well as from Bluetooth beacons used at places like shops and transit facilities."
arduino automation6,"You will declare the BLUETOOTH ADMIN permission in addition to the BLUETOOTH permission if you want your app to trigger network discovery or modify Bluetooth settings. Many applications only need this permission for local Bluetooth devices to be discovered. Unless the program is a “power manager” which modifies Bluetooth settings upon user request, the other features provided by this permission should not be used. Declare permission(s) for Bluetooth in your manifest application file. Don’t forget to add the Bluetooth permission in manifest.xml before you create the APK file."
arduino automation6,xml version=”1.0″ encoding=”utf-8″?><manifest xmlns:android=”http://schemas.android.com/apk/res/android”package=”com.example.bluetoothlight”>
arduino automation6,<uses-permission android:name=”android.permission.BLUETOOTH” />
arduino automation6,<uses-permission android:name=”android.permission.BLUETOOTH_ADMIN” />
arduino automation6,<applicationandroid:allowBackup=”true”android:icon=”@mipmap/ic_launcher”android:label=”@string/app_name”android:roundIcon=”@mipmap/ic_launcher_round”android:supportsRtl=”true”android:theme=”@style/AppTheme”><activity android:name=”.Controlling”></activity><activity android:name=”.MainActivity”><intent-filter><action android:name=”android.intent.action.MAIN” />
arduino automation6,<category android:name=”android.intent.category.LAUNCHER” /></intent-filter></activity></application>
arduino automation6,</manifest>
arduino automation6,Android Toggle Button app development:
arduino automation6,"First of all, open the Android Studio."
arduino automation6,Click on Start a new Android Studio project
arduino automation6,While Choose your project form is open.
arduino automation6,Select the empty activity and click on the Next button
arduino automation6,"After you click on the Next button, then configure your project form is opened, over here you set the project name, package name and you can select a directory where you want to store the application. Make sure the language is set to Java. So after you are done then you can click on the Finish button."
arduino automation6,Wait for app synchronization
arduino automation6,"When your project is fully synchronized, as you can see the green dots in the following picture which is an indication that the synchronization is completed and we are ready for the next step."
arduino automation6,Before starting app design there are two main classes which is PreferencesActivity.java and
arduino automation6,ActivityHelper.java
arduino automation6,Now create a java class
arduino automation6,Enter name as the ActivityHelper and click ok
arduino automation6,And past below codeActivityHelper.java code
arduino automation6,package com.example.lightcontrol;
arduino automation6,import android.app.Activity;import android.content.SharedPreferences;import android.content.pm.ActivityInfo;import android.preference.PreferenceManager;
arduino automation6,public class ActivityHelper {public static void initialize(Activity activity) {SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(activity);
arduino automation6,"String orientation = prefs.getString(“prefOrientation”, “Null”);if (“Landscape”.equals(orientation)) {activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);} else if (“Portrait”.equals(orientation)) {activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);} else {activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR);}}}"
arduino automation6,Now create the second java class
arduino automation6,Enter class name as the preferrencesActivity and click ok
arduino automation6,PreferrencesActivity.java codepackage com.example.lightcontrol;
arduino automation6,import java.util.Map;
arduino automation6,import android.content.SharedPreferences;import android.content.SharedPreferences.OnSharedPreferenceChangeListener;import android.os.Bundle;import android.preference.EditTextPreference;import android.preference.ListPreference;import android.preference.Preference;import android.preference.PreferenceActivity;import android.preference.PreferenceManager;
arduino automation6,public class PreferencesActivity extends PreferenceActivity implements OnSharedPreferenceChangeListener {@Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);ActivityHelper.initialize(this);// Using this for compatibility with Android 2.2 devices}
arduino automation6,"public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {Preference pref = findPreference(key);"
arduino automation6,if (pref instanceof ListPreference) {ListPreference listPref = (ListPreference) pref;pref.setSummary(listPref.getEntry());ActivityHelper.initialize(this);}
arduino automation6,if (pref instanceof EditTextPreference) {EditTextPreference editPref = (EditTextPreference) pref;pref.setSummary(editPref.getText());}}
arduino automation6,@Overrideprotected void onPause() {
arduino automation6,PreferenceManager.getDefaultSharedPreferences(this).unregisterOnSharedPreferenceChangeListener(this);super.onPause();}
arduino automation6,"@Overrideprotected void onResume() {PreferenceManager.getDefaultSharedPreferences(this).registerOnSharedPreferenceChangeListener(this);Map<String, ?> keys = PreferenceManager.getDefaultSharedPreferences(this).getAll();"
arduino automation6,"for (Map.Entry<String, ?> entry : keys.entrySet()) {// Log.d(“map values”, entry.getKey() + “: ” + entry.getValue().toString());Preference pref = findPreference(entry.getKey());if (pref != null) {pref.setSummary(entry.getValue().toString());}}"
arduino automation6,super.onResume();}
arduino automation6,}
arduino automation6,Now we will make a layout for the Search and connect buttons. The search button will be used for searching the Bluetooth module and the connect button will be used to connect with the paird Bluetooth module .
arduino automation6,"For this click on the small arrow symbol given with the bluetoothlight and find the Res and click on the small arrow to expand it, under the res then click on the layout to expand it and click on the activity_main.xml this will open the design screen."
arduino automation6,Now change the layout form constraint layout to linearlayout
arduino automation6,As you can see in the picture below.
arduino automation6,Now we make another linear layout within the main linearlayout
arduino automation6,To create a button in XML we use the button attribute having some property that you can adjust as per your requirements.
arduino automation6,To check the design layout for this change from text mode to the design. As you can see at the end of the coding there are two button with captions Design and Text. You can click on the Design button. As you can see the mouse cursor.
arduino automation6,"It’s a good programming practice to keep checking your design layout as you continue to program. So now we are done with two buttons with captions search and connect. Now we will add the code for the paired device, for this, we use the listview attribute. Click on the Design button to check."
arduino automation6,Now open the mainActivity.java class
arduino automation6,MainActivity.java code
arduino automation6,To remove  this error just click on the red bulb and select create id value resource
arduino automation6,And then click ok
arduino automation6,So now you can see the list_item.xml is created
arduino automation6,Open list_item.xml file and paste this codeLinearLayout xmlns:android=”http://schemas.android.com/apk/res/android”android:layout_width=”fill_parent”android:layout_height=”fill_parent”android:gravity=”center_vertical” >
arduino automation6,<!– Defining where should text be placed. You set you text color here –>
arduino automation6,<TextViewandroid:id=”@+id/lstContent”android:layout_width=”fill_parent”android:layout_height=”wrap_content”android:layout_margin=”4dip”android:textSize=”20sp”android:gravity=”left”android:padding=”5dp”android:textColor=”#000000″ />
arduino automation6,</LinearLayout>
arduino automation6,"Now we build the main controlling window, click on the package folder right now"
arduino automation6,Then New
arduino automation6,Then Activity
arduino automation6,And click on the Empty Activity
arduino automation6,Open  activity_controlling.xml
arduino automation6,Now change the layout form constraint layout to RelativeLayout
arduino automation6,Open the activity controlling.xml and switch the text type to the design mode
arduino automation6,Before creating toggle button first of all copy these two images in drawable folder which is giving below
arduino automation6,right click on drawable and click on the android resource file
arduino automation6,Resource file name is on_off and press ok and paste the below code<?xml version=”1.0″ encoding=”utf-8″?><selector xmlns:android=”http://schemas.android.com/apk/res/android”><item android:drawable=”@drawable/on” android:state_checked=”true”/><item android:drawable=”@drawable/off” android:state_checked=”false”/>
arduino automation6,</selector>
arduino automation6,Now open activity_controlling.xml and paste the below codexml version=”1.0″ encoding=”utf-8″?><RelativeLayout xmlns:android=”http://schemas.android.com/apk/res/android”xmlns:app=”http://schemas.android.com/apk/res-auto”xmlns:tools=”http://schemas.android.com/tools”android:layout_width=”match_parent”android:layout_height=”match_parent”tools:context=”.Controlling”><TextViewandroid:id=”@+id/simpleTextView”android:layout_width=”fill_parent”android:layout_height=”wrap_content”android:text=”Programming Digest”android:textSize=”40sp”android:layout_marginTop=”50dp”android:gravity=”center_horizontal”/>
arduino automation6,<ToggleButtonandroid:layout_width=”150dp”android:layout_height=”170dp”android:id=”@+id/on_off”android:textOff=””android:textOn=””android:gravity=”center”android:layout_centerHorizontal=”true”android:layout_centerVertical=”true”android:background=”@drawable/on_off”/>
arduino automation6,</RelativeLayout>
arduino automation6,"Finally, open the Controlling.java"
arduino automation6,Controlling.java code
arduino automation6,We are done with designing and coding. Now the next step is to create the APK file.
arduino automation6,Creating Android Toggle Button application .apk file.
arduino automation6,Click on the build menu then hover the mouse on build bundle/(apk) and click on the build apk
arduino automation6,And then wait for around one minute depending on your laptop or computer processing speed.
arduino automation6,After generating the Android Toggle Button application apk file then click on locate and transfer the app-debug.apk to phone and install
arduino automation6,Watch Video Tutorial:
arduino automation6,Engr. Shahzada Fahad
arduino automation6,Related Articles
arduino automation6,Digital 360° Tilt Sensor with Arduino and ESP32
arduino automation6,Underwater Ultrasonic Sensor with Arduino
arduino automation6,"Weighing Scale using Arduino, HX711, and a Load Cell"
arduino automation6,Force Sensitive Resistor FSR with Arduino
arduino automation6,Leave a ReplyCancel reply
arduino automation6,Your email address will not be published.Required fields are marked*
arduino automation6,Comment*
arduino automation6,Name*
arduino automation6,Email*
arduino automation6,Website
arduino automation6,"Save my name, email, and website in this browser for the next time I comment."
arduino automation6,Δ
arduino automation6,"pH meter Arduino, pH Meter Calibration, DIYMORE pH Sensor Arduino Code"
arduino automation6,Arduino Libraries Download and Projects they are used in “Project codes”
arduino automation6,"Decoder, 3 to 8 Decoder Block Diagram, Truth Table, and Logic Diagram"
arduino automation6,We are using cookies to give you the best experience on our website.
arduino automation6,You can find out more about which cookies we are using or switch them off insettings.
arduino automation6,This website uses cookies so that we can provide you with the best user experience possible. Cookie information is stored in your browser and performs functions such as recognising you when you return to our website and helping our team to understand which sections of the website you find most interesting and useful.
arduino automation6,Strictly Necessary Cookie should be enabled at all times so that we can save your preferences for cookie settings.
arduino automation6,"If you disable this cookie, we will not be able to save your preferences. This means that every time you visit this website you will need to enable or disable cookies again."
arduino automation7,Arduino esp8266 wifi Home/Office Automation System
arduino automation7,Table of Contents
arduino automation7,Description:
arduino automation7,"ESP8266 Arduino-In this tutorial, you will learn how to make your own ESP8266 wifi module based Home/ Office automation Project along with a feedback system using an application on your android cell phone. This project is based on the famous ESP8266 wifi module. With the help of this project the electrical loads AC/Dc can be controlled using your android cell phone.  All the commands are processed by the Arduino Uno."
arduino automation7,"As you know any program which is written for the Arduino Uno can also Run on the Mega. So the program written for this project will also work on the Arduino Mega.  To use this project you will need to connect your ESP8266 Wifi module and cell phone with the same WIFI network. This is actually an offline automation system. This project can be used at homes, offices, colleges, universities, and so on."
arduino automation7,"For the Worldwide control system, I recommend you should use the Nodemcu ESP8266 Wifi Module because the use of the Nodemcu ESP8266 Module is very simple, you don’t have to update the firmware, the coding is very simple."
arduino automation7,Nodemcu ESP8266 based Home/Office Automation System.
arduino automation7,"You can also use the ESP32 Module, its use is just like the Nodemcu ESP8266 Wifi Module. You can add multiple analog sensors and you can also add digital sensors. I have also developed the home automation system using the ESP32 Module, i recommend you should read this article“ESP32 Home Automation Project, ESPRESSIF Home Automation”"
arduino automation7,This Tutorial covers.
arduino automation7,esp8266 wifi module software/firmware update
arduino automation7,use of at commands
arduino automation7,complete project circuit diagram
arduino automation7,interfacing ESP8266 with Arduino
arduino automation7,Arduino ESP8266 programming and finally
arduino automation7,Testing the Home/Office Automation project.
arduino automation7,"For the firmware update, you can watch a video given at the end of this Article."
arduino automation7,"Without any further delay, let’s get started!!!"
arduino automation7,Amazon Links:
arduino automation7,12v Adaptor:
arduino automation7,Arduino Uno
arduino automation7,Arduino Nano
arduino automation7,Mega 2560:
arduino automation7,esp8266 wifi module:
arduino automation7,Other Tools and Components:
arduino automation7,Top Arduino Sensors:
arduino automation7,Super Starter kit for Beginners
arduino automation7,Digital Oscilloscopes
arduino automation7,Variable Supply
arduino automation7,Digital Multimeter
arduino automation7,Soldering iron kits
arduino automation7,PCB small portable drill machines
arduino automation7,*Please Note: These are affiliate links. I may make a commission if you buy the components through these links. I would appreciate your support in this way!
arduino automation7,ESP8266 with Arduino Circuit Diagram:
arduino automation7,"The ESP8266 WIFI module Tx pin is connected with the Arduino’s pin number 2. The ch_pd pin of the ESP8266 WIFI module is connected with the Arduino’s pin number 3.3 volt. The RST pin of the wifi module is left unconnected. The VCC pin of the ESP8266 WIFI module is connected with the 3.3-volt pin of the Arduino Uno. The Ground pin of the ESP8266 WIFI module is connected with the Arduino’s Ground. The Rx pin of the wifi module is connected with pin number 3 of the Arduino Uno, while the GPIO 1 and GPIO 0 are not connected."
arduino automation7,"4 relays are connected with the Arduino pins 9 to 13. If you want you can increase or decrease the number of relays. The relays used in this project are of the type SPDT “ these are 12V and 10A relays. As you can see in the circuit diagram a 10k resistor and 2n2222 NPN transistor is connected with each relay. The 10k resistor and 2n2222 makes the driver and is used to operate this relay. Due to the voltage difference, a 12v relay cannot be directly operated by the controller so that’s why we need a driver circuit to control a relay. The Selection of the Transistor entirely depends on the relay coil resistance."
arduino automation7,"To find the relay coil resistance you will need a multimeter. Set the multimeter on the resistance and connect both the test leads of the digital multimeter with the two legs of the relay which has the coil. After you find the Coil resistance, then the next step is to use ohm’s law"
arduino automation7,V = I R
arduino automation7,"Now after putting values in this formula, you can find the Current. now depending on the value of the current calculated, we select a transistor whose collector current is greater than the relay coil current. this is the current needed to energize the relay coil. Select a transistor whose collector is approximately 3 times greater than the calculated value. This way the transistor will never heat up."
arduino automation7,"I selected 2n2222 NPN transistor and if you check the datasheet of this transistor you will find that its collector current is much greater than the relay coil current, which is best. Moreover the 2n2222 transistors are really cheap and are easily available in every electronics shop."
arduino automation7,"If you want to control your home or office appliances from remote locations, then I highly recommend you should use Nodemcu ESP8266 wifi module and Blynk Application. I have so many tutorials on Blynk Application and Nodemcu esp8266 wifi module. The use of Nodemcu esp8266 wifi module is really easy as compared to the ESP8266 wifi module."
arduino automation7,"If you have any questions regarding this project, you can let me know in a comment."
arduino automation7,Download:
arduino automation7,Cell phone application apk file:Wifi
arduino automation7,ESP8266 Arduino Programming:
arduino automation7,Watch Video Tutorial:
arduino automation7,Engr. Shahzada Fahad
arduino automation7,Related Articles
arduino automation7,How to Know WiFi Password Using ESP8266
arduino automation7,"A02YYUW Waterproof Ultrasonic Sensor with Arduino, ESP32, & ESP8266"
arduino automation7,"ESP32 CAM and ESP8266 with Google sheets, Google Drive, MLX90614,& Ultrasonic Sensor"
arduino automation7,Unleash the Potential of the Internet: 10 Essential IoT Starter Kits to Kickstart Your Journey
arduino automation7,17 Comments
arduino automation7,"Hi, so thrilled by your tutorial as it helped my understanding things better. Which platform did you use to develop the android app please?"
arduino automation7,This application is designed in Android studio. I am starting a complete series on how to make android cell phone applications for Arduino Bluetooth. Click the subscribe button and you will be notified. If you want the source code then you can get this for 25 dollars.
arduino automation7,great. thanks for the prompt response
arduino automation7,do you mind sharing the aia file well. Thanks
arduino automation7,Which application you have used to control this circuit by a mobile …..I mean what is the name of the app that you have used
arduino automation7,Hello sir i am a student of Electrical technology i making this project but when i connected the CH_PD pin of ( esp 8266 module )on Arduino Nano 3.3V pin then my esp 8266 is not work and power led is always off.
arduino automation7,"Hi, just looking through the code of this project, can you tell me how the “send command” function is working. for example “sendCommand(“AT+RST\r\n”,2000,DEBUG); // reset module”is this a specific function of software serial?if it is, where did you learn this information and could you direct me to this library commands.thanks in advance"
arduino automation7,"UPDATE, sorry, i didn’t see the “send command” function at the very end of the code, looks like clever stuff, gonna have a go this weekend. Been looking for a very long time to see how you actually use the esp as a wireless serial connection, mostly on the internet people are hosting a web page on the actual esp and just switching led on or off, your approach is just the ticket"
arduino automation7,Salve mi chiamo Cosimo sto cercando di riprodurre il tuo progetto ma non riesco a farlo funzionare. Ma nel esp8266 01 devo caricarli il file flash dawloader se è si dove posso scaricarlo?
arduino automation7,can you share the android application source code for thisemailptpmashish@gmail.com
arduino automation7,thank you for the detailed explanation. it is super useful.
arduino automation7,"Hi There, I done everything according to your instruction but have a bit of a issue. At the end when you go to serial monitor you get the ip address and port no mine does not give me all that detail it just say server ready and nothing else. Can you please help? Also myESP8266 module have no light on Please help."
arduino automation7,"it may be due to1. if you have not installed the Nodemcu esp8266 board.2. maybe you are not using the latest version.3. or, you are using a different Nodemcu Module."
arduino automation7,watch my getting started tutorial which you can find on my channel Electronic Clinic.
arduino automation7,Hi I have a problem when I select bin and download it shows failed to connect
arduino automation7,Is there anyone to help!!!
arduino automation7,AssalamualikumI am a hobbist till nowAfter watching your tutorial I  selected the bin file and clicked download and it shows connection failed! What could be the reason.
arduino automation7,I am a hobbist till now after watching your tutorial I selected bin file and clicked download and it shows connection failed I use ESP8266
arduino automation7,Thank You So Much For This loving Project May Allah Give You More Success Ameen!
arduino automation7,Leave a ReplyCancel reply
arduino automation7,Your email address will not be published.Required fields are marked*
arduino automation7,Comment*
arduino automation7,Name*
arduino automation7,Email*
arduino automation7,Website
arduino automation7,"Save my name, email, and website in this browser for the next time I comment."
arduino automation7,Δ
arduino automation7,"pH meter Arduino, pH Meter Calibration, DIYMORE pH Sensor Arduino Code"
arduino automation7,Arduino Libraries Download and Projects they are used in “Project codes”
arduino automation7,"Decoder, 3 to 8 Decoder Block Diagram, Truth Table, and Logic Diagram"
arduino automation7,We are using cookies to give you the best experience on our website.
arduino automation7,You can find out more about which cookies we are using or switch them off insettings.
arduino automation7,This website uses cookies so that we can provide you with the best user experience possible. Cookie information is stored in your browser and performs functions such as recognising you when you return to our website and helping our team to understand which sections of the website you find most interesting and useful.
arduino automation7,Strictly Necessary Cookie should be enabled at all times so that we can save your preferences for cookie settings.
arduino automation7,"If you disable this cookie, we will not be able to save your preferences. This means that every time you visit this website you will need to enable or disable cookies again."
arduino automation8,C4001 mmWave Human Detection Sensor with Arduino and ESP32
arduino automation8,Table of Contents
arduino automation8,C4001 mmWave Human Presence Sensor:
arduino automation8,"C4001 mmWave Human Detection Sensor with Arduino and ESP32-Today, I am pushing theDFrobot C4001 mmWave sensorto its absolute limits! Can it detect through walls, boxes, glass, or even under a ceiling fan? Let’s find out!"
arduino automation8,"I personally found theDFrobot C4001 mmWave Human Presence Sensorquite impressive because it supports I2C and UART communication methods and is compatible with Arduino, ESP32, ESP8266, and Raspberry Pi development boards. And that’s not all—it has a human presence detection range of 8 meters and a motion detection and ranging range of 12 meters."
arduino automation8,"And let me tell you, theC4001 mmWave Sensoris entirely different from theC1001 mmWave Sensor."
arduino automation8,We will use the C4001 mmWave sensor with both Arduino and ESP32. We will cover a total of four examples:
arduino automation8,"After making the C4001 mmWave sensor fully functional, I will perform various tests on it. For example:"
arduino automation8,For performing these tests I will be using my designedESP32 Development boardandArduino Nano Development board.
arduino automation8,You can download the projects source codes and related material from myPatreon Page.
arduino automation8,"So, without any further delay let’s get started!!!"
arduino automation8,Amazon Links:
arduino automation8,C4001 mmWave Human Presence Sensor
arduino automation8,ESP32 Dev Module
arduino automation8,Arduino Nano USB C type (Recommended)
arduino automation8,Other Tools and Components:
arduino automation8,ESP32 WiFi + Bluetooth Module (Recommended)
arduino automation8,*Please Note: These are affiliate links. I may make a commission if you buy the components through these links. I would appreciate your support in this way!
arduino automation8,Human detection:
arduino automation8,Feature
arduino automation8,"Unlike traditional infrared sensors, The C4001Millimeter Wave Presence Sensor utilizes a combination of TOF radar and Doppler radar sensing principles for active detection."
arduino automation8,"It can accurately detect human presence, slight movements, and body motion, making it highly effective for applications requiring precise monitoring."
arduino automation8,"One of its standout features is its adjustable sensing range, allowing customization based on specific needs."
arduino automation8,"Additionally, it has strong resistance to environmental factors, remaining unaffected by temperature changes, heat sources, light variations, and airflow."
arduino automation8,"A key advantage of this sensor is its penetration ability, enabling it to detect human presence through fabric, plastic, glass, and other insulating materials."
arduino automation8,"Moreover, it supports distance measurement, adding versatility to its functionality."
arduino automation8,Installation Methods
arduino automation8,"The performance of a millimeter-wave human body sensor depends on proper installation, as incorrect placement can impact its accuracy and functionality."
arduino automation8,"The commonly used installation methods for this module include top installation, bottom installation, horizontal installation, and downward tilted installation."
arduino automation8,Specifications of C4001 mmWave Sensor:
arduino automation8,The C4001 mmWave presence sensor uses FMCW modulation to measure both distance and speed. It can detect objects up to 12 meters away and track motion speeds ranging from 0.1 to 10 meters per second.
arduino automation8,"The C4001 millimeter-wave human presence sensor operates on a 3.3V or 5V power supply, making it compatible with various microcontrollers."
arduino automation8,Operating Voltage: 3.3V/5V
arduino automation8,Maximum Detection Range: 12m
arduino automation8,Beam Angle: 100*80°
arduino automation8,Modulation Mode: FMCW
arduino automation8,Operating Frequency: 24GHz
arduino automation8,Operating Temperature: -40~85℃
arduino automation8,Baud Rate: 9600
arduino automation8,I2C Address: 0x2A/0x2B
arduino automation8,Size: 22*30mm
arduino automation8,"+ is the Power, – is the Ground, C/R is I2C Clock Line or RX, and D/T is the I2C Data Line or TX."
arduino automation8,It comes with a Gravity-4P I2C/UART Sensor Connector.
arduino automation8,"It features a switch labeled “I2C/UART”, allowing me to toggle between I2C and UART communication based on my setup. Right next to it, there is another switch for selecting the I2C address (0x2A or 0x2B), which is useful when using multiple sensors on the same I2C bus."
arduino automation8,"Right now, I have set it to I2C mode. The advantage of this is that I don’t have to change the pins in the code for Arduino or ESP32. But if I select UART communication, I would have to change the pins every time. So, I will use I2C communication."
arduino automation8,And let me tell you all the programs I am going to share with you will work on both Arduino and ESP32 without any changes.
arduino automation8,Features
arduino automation8,Applications
arduino automation8,C4001 mmWave Sensor with Arduino:
arduino automation8,Connect the Red and Black wires to the Arduino 5V and Gnd. Connect the Blue wire to the Arduino A5 and the other wire to A4 pin on the Arduino. A4 is the SDA and A5 is the SCL.
arduino automation8,The 5V buzzer is connected to the Arduino digital pin 8. For the connections you can follow this circuit diagram.
arduino automation8,"Right now, I can’t permanently fix the C4001 mmWave sensor because I need to perform multiple tests on it. So, that’s why I temporarily attached it to a mobile stand using double tape."
arduino automation8,"And let me tell you; It should be at least 1.5 meters above the floor. Now, let’s go ahead and take a look at the programming."
arduino automation8,Install required library:
arduino automation8,"First, you need to install theDFRobot_C4001 library. To do this, go to the product’swiki pageand download the library from there. I have already downloaded it."
arduino automation8,"Next, go to the Sketch menu…then to Include Library…and clickAdd .ZIP Library."
arduino automation8,"Finally, select the folder and then click the open button."
arduino automation8,Example1:
arduino automation8,I downloaded this code from DFRobot’s Wiki page. You can also find the code for UART communication on the same page.
arduino automation8,"At first glance, this code might look a bit confusing, but it’s actually not that complicated. Once you read through it, you will understand it better. In the next examples, I have simplified the code significantly."
arduino automation8,Code:
arduino automation8,Practical Demonstration:
arduino automation8,"Look at the screen—Target Number, Target Speed, Target Range, and Target Energy—all updating in real-time!"
arduino automation8,"When I move towards the mmWave sensor, the Target Speed value shows a negative sign. But the moment I move away, the negative sign disappears!"
arduino automation8,"From the Target Range value, you can already tell how accurate this sensor is!"
arduino automation8,"And here’s the real game-changer; Target Energy! The more I move, the higher this value goes."
arduino automation8,Example 2:
arduino automation8,"You might have noticed that the values were fluctuating a lot. So this time, we will use a filter to make the values more stable, and along with that, we will also use a timer. We will also define the range to check how accurate the sensor is."
arduino automation8,C4001 Stable Value and Distance Program:
arduino automation8,Code Explanation
arduino automation8,"As you can see, I have simplified the code. The buzzer is connected to digital pin 8."
arduino automation8,"I have also defined a 600ms delay, meaning the buzzer will only turn OFF when no human is detected for 600ms."
arduino automation8,"For now, you can see that I have set the minimum distance to 30cm and the maximum distance to 1200cm (12 meters full range). The threshold value is set to 10. You will understand the C4001 mmWave sensor better when you experiment with different values."
arduino automation8,"Additionally, I have used a filter to stabilize the targetRange value."
arduino automation8,The buzzer will only turn ON if the person’s distance is between 0.4 and 5.0 meters.
arduino automation8,"Otherwise, the buzzer will remain OFF."
arduino automation8,"As you can see, I have used a timer, so the buzzer will turn OFF only when there is no detection for 600ms."
arduino automation8,I have already uploaded this program and now let’s watch the C4001 mmWave sensor in action.
arduino automation8,Practical Demonstration:
arduino automation8,"Right now, I am outside the room, and the buzzer is OFF. Now, I am about to enter the room; let’s see if the buzzer turns ON or not.For practical demonstration watch the video tutorial given at the end of this article."
arduino automation8,Amazing! We have successfully used the C4001 mmWave sensor to turn the buzzer ON. The buzzer will remain ON as long as I stay within the defined range.
arduino automation8,"This, in itself, works as a security system; as soon as someone enters the room, the buzzer turns ON. By using the same code, you can also control lights. In a little while, we will also test it with a light."
arduino automation8,"Now, let’s try a different range."
arduino automation8,I have set the maximum detection range to 300cm (3 meters) and also set the target range to 3 meters.
arduino automation8,"It limited the sensor’s detection range as per our preference. Similarly, you can also set your own custom range as needed."
arduino automation8,"In the next two examples, we will be using the ESP32. So now, it’s your choice whether you want to use an Arduino or the ESP32 WiFi + Bluetooth module."
arduino automation8,C4001 mmWave Sensor with ESP32:
arduino automation8,Connect the Red and Black wires of the C4001 mmWave Sensor to the ESP32’s 3.3V and GND pins.
arduino automation8,Connect the Blue wire to GPIO22 and the other wire to GPIO21.
arduino automation8,The 5V SPDT type relay is connected to the GPIO13. For the relay connections you can follow this circuit diagram.
arduino automation8,"Now, let’s go ahead and take a look at the programming."
arduino automation8,C4001 mmWave ESP32 Relay Program:
arduino automation8,Code Explanation:
arduino automation8,"The relay is connected to GPIO13. To further eliminate fluctuations, this time I am using two timers."
arduino automation8,"We could still use the previous code, but this is another approach where we can control the ON time and adjust the scan time."
arduino automation8,Everything else is almost the same. The main purpose of this example is to demonstrate how to use the C4001 mmWave sensor with the ESP32 and show you how to control a light.
arduino automation8,Practical Demonstration:
arduino automation8,"As you can see while I am outside the Sensor’s range, the light is OFF."
arduino automation8,"This time, the relay didn’t turn ON instantly. First, the C4001 mmWave sensor detected my presence for a few seconds, and only then did it turn the relay ON."
arduino automation8,"Now, the light will remain ON as long as I stay in this area."
arduino automation8,"When I leave the area, the C4001 mmWave sensor will scan the area for a few seconds, and if no movement is detected, it will turn the light OFF."
arduino automation8,"Now, it’s your choice whether you want to use the buzzer-based code or this one."
arduino automation8,C4001 mmWave with ESP32 & Blynk:
arduino automation8,"Next, we will use theC4001 mmWave sensorwith theBlynk application. With Blynk, we can monitor theC4001 sensorfrom anywhere in the world."
arduino automation8,"In my previous article and video, I set upBlynk for a Tilt sensor, and I will be using the same application for this project."
arduino automation8,"As you can see, I have named the device C4001 mmWave."
arduino automation8,"If I go to Datastreams, you will see that I am using the same virtual pin V0, but this time, I have changed its Data Type to Double."
arduino automation8,"That’s it! If you still find it difficult, I recommend watching my previous video on the 360-degree Tilt sensor or you can also read the article."
arduino automation8,"If I open the ESP32 code, you will see that I am using the same Template name, ID, and authorization token."
arduino automation8,"I have also included a watchdog timer, so you won’t need to manually restart the ESP32 if it freezes."
arduino automation8,"The rest of the code is simple and straightforward. If you read it carefully, you will understand it easily."
arduino automation8,"And if you are using ESP32 and Blynk for the first time, I highly recommend watching my getting started video onESP32 and Blynk V2.0."
arduino automation8,Practical Demonstration:
arduino automation8,"With the Blynk application, I can now monitor the C4001 mmWave sensor in real time from anywhere in the world."
arduino automation8,"You can build a highly reliable security system that you can monitor from your Smartphone. And if you have a paid Blynk plan, you can even generate alert messages."
arduino automation8,"By now, you should have a good idea of how easily the C4001 mmWave sensor can be used with Arduino and ESP32."
arduino automation8,Tests on C4001 mmWave Sensor:
arduino automation8,"Now, we are going to perform some tests, and after that, you can decide for yourself whether you should use the C4001 mmWave sensor or not."
arduino automation8,Cardboard Box:
arduino automation8,"First, I am going to start with this cardboard box, and then we will gradually increase the complexity. I am using my4S Lithium Ion battery packto power up the Arduino Nano Development board."
arduino automation8,"So, let’s see if it can detect me."
arduino automation8,It detected me so easily from inside the box. I didn’t stop here. I put three more boxes in front of it; and it still detected me without any issues.
arduino automation8,"This is crazy! I can’t stop myself from testing one more Box, but this time I am going to do something different."
arduino automation8,"Finally, this giant box! Inside this box, there’s a dinner set “a lot of stuff inside”. Let’s see if theC4001can still detect me through all these five boxes."
arduino automation8,"The range has reduced, likely because there’s a lot of stuff inside the box. When I’m close to the table, it detects me perfectly, but as I step back, the C4001 can’t detect me anymore. The first test was super impressive!"
arduino automation8,Human Detection through Hardboard:
arduino automation8,"Next up, we are taking the challenge to the next level—testing it with this hardboard sheet! The sensor is facing downward, and the real question is… can it detect my foot movement through the board? This could be a game-changer for hidden security and smart automation! Let’s find out!"
arduino automation8,"It was like a piece of cake for the C4001 mmWave Sensor. This is so incredible, we can use it inside Drawers to protect Jewelry, money, etc from being stolen."
arduino automation8,C4001 mmWave Sensor Detection throughGlass:
arduino automation8,Can the C4001 mmWave sensor detect me through glass? This could be a game-changer for security systems in shops and offices! But here’s the real challenge—I haven’t placed it directly against the glass. I left some distance to truly push its limits. Will it pass or fail? Let’s find out!
arduino automation8,This is absolutely mind blowing. I didn’t see any change in the range. You can use this behind a mirror in a Washroom/Bathroom to control the lights automatically. Hundreds of ideas are popping up in my mind. What’s in your mind? Let me know in the comment.
arduino automation8,Human Detection through Plastic:
arduino automation8,"This time, I have placed a plastic case in front of the mmWave sensor. I’m sure it won’t have any trouble penetrating it and detecting my presence."
arduino automation8,"It detected me as if there is nothing in front of the C4001 mmWave sensor. From this test its obvious that we can use it in any plastic enclosure, this way we can make it waterproofed and then we can use it outside for security purposes or for controlling lights. There are more than a thousand ways it can be used. So, it’s up to you; how you plan to use it. Best of Luck!"
arduino automation8,Human Detection through Curtains “Fabric”:
arduino automation8,Can this mmWave sensor see through a curtain?
arduino automation8,There’s quite a distance between the sensor and the curtain; so let’s put the C4001 mmWave to the test. Will it detect me even when I am completely hidden?
arduino automation8,"Just imagine… A sensor so powerful that it can detect movement without even seeing you! This could change the game for security systems, smart automation, and even futuristic tech!"
arduino automation8,Let’s find out!
arduino automation8,"This is absolutely mind blowing; This tiny sensor just proved; it can detect movement through fabric! Imagine the possibilities—security systems, hidden monitoring, and more! What would you use this for? Let me know in the comments!"
arduino automation8,Detection through a Wood door:
arduino automation8,Can the C4001 mmWave Sensor penetrate this door and still detect me on the other side?
arduino automation8,"If it detects me, I’ll be seriously impressed!"
arduino automation8,"As you can see, the sensor is quite far from the door. The real question is—can it still penetrate through and detect me on the other side? Let’s find out!"
arduino automation8,"The C4001 mmWave sensor just shocked me! Even from a distance, it successfully detected my presence through the door!"
arduino automation8,"Now imagine the possibilities; you can detect if someone is standing outside your room, create a contactless doorbell, or even build a completely invisible security system!"
arduino automation8,mmWave Sensor under a Fan:
arduino automation8,Can It Survive Under a Ceiling Fan?
arduino automation8,Many people complain that mmWave sensors struggle under direct airflow; so let’s put that to the test!
arduino automation8,"The C4001 mmWave sensor is right under a running ceiling fan; the airflow is strong, and if this sensor is truly reliable, it should still detect me without false triggers."
arduino automation8,"So what’s going to happen? Will it detect me accurately, or will the airflow confuse it? Let’s find out!"
arduino automation8,"Drop your predictions in the comments before we begin! Do you think this sensor can handle it, or will it fail?"
arduino automation8,"The fan is running at full speed, and I am standing outside the sensor’s range. The buzzer has been OFF for the last 3 minutes—no false triggering at all!"
arduino automation8,But now comes the real challenge!
arduino automation8,I am about to step closer to the C4001 mmWave sensor—will it detect me accurately despite the strong airflow? Or will it fail like most other mmWave sensors? Let’s find out!
arduino automation8,"This is unbelievable! Most mmWave sensors struggle under direct air contact, but the C4001 is rock solid! This sensor is on a whole new level!"
arduino automation8,C4001 mmWave Sensor Detection through a Wall:
arduino automation8,The Ultimate Challenge:
arduino automation8,Can this mmWave Sensor Detect through Walls?
arduino automation8,We have tested it through curtains… We have tested it through a Door… we have tested it under a running ceiling fan… but now comes the final and most insane test yet;human detection behind a wall!
arduino automation8,I am going to step behind this wall; behind this hardboard sheet is a brick wall. Let’s see if the C4001 mmWave sensor can still detect me.
arduino automation8,It’s NOT detecting me!
arduino automation8,"So, here is the reality; the C4001 mmWave sensor works great through most of the materials, but it struggles with solid walls. This is something you should definitely keep in mind when using it for security applications."
arduino automation8,"Not all mmWave sensors are the same—some are built for ultra-penetration, while others are designed for short-range detection. So, always test before you build!"
arduino automation8,Well if you are specifically looking for a sensor that can detect humans behind a wall then you should read my article on aMicrowave sensorthat can detect Humans behind the walls.
arduino automation8,"So, that’s all for now."
arduino automation8,Support me onPatreonfor more articles and videos.
arduino automation8,Watch Video Tutorial:
arduino automation8,Engr. Shahzada Fahad
arduino automation8,Related Articles
arduino automation8,ESP32-S3 Geek and Arduino IDE- Getting Started Tutorial
arduino automation8,Digital 360° Tilt Sensor with Arduino and ESP32
arduino automation8,SmartWatch Home Automation and Sensor Monitoring
arduino automation8,Smart Staircase Lighting with ESP32 and mmWave Sensor | Motion-Activated LED Strip
arduino automation8,Leave a ReplyCancel reply
arduino automation8,Your email address will not be published.Required fields are marked*
arduino automation8,Comment*
arduino automation8,Name*
arduino automation8,Email*
arduino automation8,Website
arduino automation8,"Save my name, email, and website in this browser for the next time I comment."
arduino automation8,Δ
arduino automation8,"pH meter Arduino, pH Meter Calibration, DIYMORE pH Sensor Arduino Code"
arduino automation8,Arduino Libraries Download and Projects they are used in “Project codes”
arduino automation8,"Decoder, 3 to 8 Decoder Block Diagram, Truth Table, and Logic Diagram"
arduino automation8,We are using cookies to give you the best experience on our website.
arduino automation8,You can find out more about which cookies we are using or switch them off insettings.
arduino automation8,This website uses cookies so that we can provide you with the best user experience possible. Cookie information is stored in your browser and performs functions such as recognising you when you return to our website and helping our team to understand which sections of the website you find most interesting and useful.
arduino automation8,Strictly Necessary Cookie should be enabled at all times so that we can save your preferences for cookie settings.
arduino automation8,"If you disable this cookie, we will not be able to save your preferences. This means that every time you visit this website you will need to enable or disable cookies again."
arduino logs1,"Arduino Hydroponics, DIY Hydroponics System using pH Sensor & EC Sensor, Hydroponic"
arduino logs1,Table of Contents
arduino logs1,"Hydroponics System, Description:"
arduino logs1,"Hydroponics is a branch of hydroculture. It is the process of cultivating plants without soil. The plants receive nourishment through mineral nutrients dissolved in water, instead of soil. In my previous tutorial, I have already explained how to monitor the soil nutrients like Nitrogen, phosphorus, and Potassium using theNPK Sensor,Arduino, and anAndroid cell phone application. Besides this, I have also explained explained how to monitor theSoil pH Value, Humidity, and temperature."
arduino logs1,"Read our latest article on “ESP32 Hydroponic System using pH Sensor, EC Sensor, A02YYUW Waterproof Ultrasonic Sensor, DS18B20 waterproof one-wire digital temperature sensor, and Blynk application“."
arduino logs1,"Hydroponics is basically growing plants without soil. It is a more efficient way to provide food and water to your plants. Plants don’t use soil – they use the food and water that are in the soil. Soil’s function is to supply plants nutrients and to anchor the plants’ roots. Hydroponic gardeners may use different types of inert media to support the plants, such as rockwool, coconut fibre, river rock, Styrofoam, or clay pellets."
arduino logs1,"Hydroponics is a Latin word meaning “working water.” In the absence of soil, water goes to work providing nutrients, hydration, and oxygen to plant life. From watermelons to jalapeños to orchids, plants flourish under the careful regimen of hydroponics. Using minimal space, 90% less water than traditional agriculture, and ingenious design, hydroponic gardens grow beautiful fruits and flowers in half the time. If you want to study more about the Hydroponics system then I highly recommend read theFresh Water Systemsarticle."
arduino logs1,"Hydroponic makes it easier to measure and fill the exact amounts of nutrients in the water solutions, since each plant requires different nutrients. This can be really a tedious job if you do it manually. Well, I am not a Hydroponics expert and I really don’t know how much nutrients should be added in the water solution. But I can help you in designing and making your own Hydroponics system which you can use to measure and fill the exact amount of nutrients in the water using Solenoid valves which can be controlled as per the measured values."
arduino logs1,"So, this article is all about how to make your own Hydroponics system using Arduino,pH Sensor,EC sensor or TDS meter,DS18b20 one-wire digital temperature sensor,TOF10120 Laser distance Rangefinder, and anOled display Module."
arduino logs1,"Before, making the final PCB I started with the Arduino Nano Development board and breadboard to perform my initial tests."
arduino logs1,"This is the analog pH sensor kit from theDIYMORE, which needs to be properly calibrated before you can use it for measuring the pH values of different liquids. The pH sensor calibration I have already explained in my previous article “Ph Meter with Arduino and Calibration”. Although the DIYMore is a good pH sensor, but recently the DFRobot has launched a newpH Sensorand it can be used with 3.3V and 5V compatible controller boards.  I have tested it with Arduino and also with the ESP32."
arduino logs1,"I started off by connecting the pH sensor Probe with the Interface circuit. Next, I connected the Red wire with the V+ pin of the interface circuit. Black wire with the GND pin and the Yellow wire with the Po pin of the interface circuit. Finally, I connected the Red wire with the Arduino’s 3.3V, Black wire with the GND pin of the Arduino, and the Yellow wire with the Analog pin A0."
arduino logs1,"This is the EC Sensor or TDS meter V1.0 from the DFrobot which is completely compatible with Arduino. One thing that I really like about this TDS Meter is that it supports 3.3 to 5.5 Volts wide voltage input, and 0 to 2.3 Volts analog voltage output, which makes this TDS meter compatible with 5V and 3.3V control systems or boards. I have very detailed tutorials on the TDS or EC sensor in which I have explained how to use it withArduinoandESP32for monitoring the water quality."
arduino logs1,"The TDS meter is connected with the Arduino or any other controller board using the A, +, and – pins as you can see in the image given above. For the easy interfacing I connected male to male type jumper wires."
arduino logs1,"Connect the + pin of the TDS meter with 3.3V. Connect the Minus pin with the GND of the Arduino, and finally, connect the A pin of the TDS or EC sensor with the A1 pin of the Arduino."
arduino logs1,"This is the DS18b20 One-Wire digital temperature sensor, I have already soldered a 10k resistor and some jumper wires as per the circuit diagram which I will explain later in this article."
arduino logs1,"Connect the VCC wire with the 3.3V of the Arduino. Connect the ground of the DS18b20 with the ground of the Arduino, and finally, connect the Data wire with the digital pin D7 of the Arduino."
arduino logs1,"After connecting all the sensors, finally I connected the Oled display module for displaying the pH, Temperature, and EC values. My interfacing is completed and now I can start with my initial tests. I started off by powering up my Arduino board using a 12V adaptor."
arduino logs1,"Initially, when I turned the Arduino Nano, I was able to see the pH, Temperature, and EC values on the Oled display. At this time only the temperature sensor value was correct, while the values of the EC sensor and the pH sensor were wrong, as they were not yet dipped in the water."
arduino logs1,"For performing my initial tests I started with the Well water. First I started with the DS18b20 temperature sensor which is completely waterproofed and can be dipped in liquids without any problem. I have been using this sensor with Arduino,ESP32,ESP8266, andRaspberry Pi. This is seriously an amazing temperature sensor and as it’s a waterproofed temperature sensor for this project it’s just perfect. Anyhow after I immersed the Temperature sensor, the value on the Oled display module started to increase. For the practical demonstration watch video tutorial given at the end of this article. So the temperature sensor was working just fine."
arduino logs1,"Next, I added the pH sensor for measuring the water pH value, while keeping the TDS meter or EC sensor outside. You can see the value is around 6.81. As per theEPA,the public water pH levels should be between 6.5 and 8.5. The water under test is very close to ph 7 which is really good. The aim is not to measure the water quality, but I just want to say the pH sensor is working great, I am getting the correct value. So far, the pH sensor and temperature sensor are working perfectly and now I am ready for the next step to add the TDS meter along with the other sensors."
arduino logs1,"After adding the TDS meter although I was able to read the EC value but it really affected the pH value, as you can see on the display the pH value is changed, this is the kind of problem that most of the guys are complaining about that when we add the pH sensor and TDS meter in the same liquid container the pH value is greatly disturbed. This is a very serious kind of problem as we are not getting the actual pH value, this problem needs to be solved before we can make an efficient Hydroponics system. Anyways, I continued with my test, to further ensure, that the TDS meter is creating this problem, I removed the TDS probe, and then in just 3 to 4 seconds, the pH value got normal. Now I know exactly the pH sensor behaves in an abnormal way when the TDS Meter or the EC sensor is added in the same container. So, I decided to check this one more time, I dipped the TDS meter probe in the water, waited for around 3 to 4 seconds and the pH value jumped. So, from this initial test, we know that when the EC sensor is not dipped in the same container we get pretty stable pH values, and when we add the EC sensor then the pH value is greatly disturbed."
arduino logs1,"Now, to solve this problem we will need to isolate the power wires of the EC sensor. I will use two transistors to control the EC Sensor, so the EC sensor will remain OFF during the times when Arduino will be reading the pH Sensor. After Arduino reads the pH Sensor, then again the EC sensor will be turned ON. This is the next test that I am going to perform and let’s see if the problem will be solved."
arduino logs1,To isolate the voltage and GND wires of the TDS Sensor I am using these two general purpose PNP and NPN Transistors. The one on the right side is the 2N3906 PNP type transistor. The emitter is connected with 3.3 volts which goes to the TDS meter through the collector of the transistor. So 3.3V to the TDS sensor are supplied by turning on this transistor. The other transistor is the 2n2222 NPN transistor and I am using this transistor to control the GND. The emitter is connected with the Arduino’s GND while the collector of the 2n2222 NPN transistor is connected with the GND of the TDS meter. While the base of the transistor is connected with the digital pin 3 of the Arduino. I will explain the final connections in the circuit diagram after I am done with all the testing.
arduino logs1,"Again I powered up the Arduino board, initially everything was working just great, I was getting the correct pH values, and the correct temperature value. At this point, I was ready to add the EC sensor. So, I added the EC sensor in the same container, the pH sensor value didn’t change, and now it was working great. The EC Sensor isolation thing just worked. There are no abnormal fluctuations in the pH Sensor values. The TDS meter was turning ON and Turning OFF at regular intervals as defined in the code. The EC sensor remains off when the Arduino is reading the pH Sensor."
arduino logs1,"Now to further ensure that the whole system is working, I am going to use these few drops of Pepsi, the pH value should reduce."
arduino logs1,"great, you can see the value is decreasing which means now the water is a little acidic. So, after successfully performing my initial tests, I designed a PCB, so that all the components can be easily interfaced."
arduino logs1,"This time I also added the TOF10120 Laser distance Rangefinder sensor for measuring the water level. I am not displaying its value on the Oled display module but on the Serial monitor. You can use some if conditions in the programming to control a water pump. In the final Hydroponics system PCB, I also added headers for the Relay module. The relays can be used to control different pumps to add the required nutrients. Anyway, I did perform the same tests and the results were just amazing. Now, I will explain the final circuit diagram, PCB Designing, and Making. So, now you have an idea of what you are going to learn after reading this article. Without any further delay let’s get started!!!"
arduino logs1,Amazon Purchase Links:
arduino logs1,Arduino Nano USB-C Type (Recommended)
arduino logs1,pH Sensors
arduino logs1,TDS Meter V1.0 Dfrobot:
arduino logs1,DS18B20 one-wire digital temperature sensor:
arduino logs1,TDS Pen:
arduino logs1,tof10120 laser range sensor
arduino logs1,SSD1306 128×64 Oled i2c display Module
arduino logs1,12v Adaptor:
arduino logs1,*Disclosure: These are affiliate links. As an Amazon Associate I earn from qualifying purchases.
arduino logs1,Hydroponics System Circuit Diagram:
arduino logs1,Let’s start with the 5V regulated power supply based on theLM7805 voltage regulator. J1 is the DC female power jack and this is where we connect our 12V adaptor. Two 470uFdecoupling capacitorsare connected on the input and output sides of the voltage regulator. The output of the regulator is connected with the Vin pin of the Arduino.
arduino logs1,"The GND pin of the TDS Meter or EC Sensor is connected with the collector of the 2n2222NPN transistorand the emitter of the transistor is connected with the GND. The base of the transistor is connected with the Arduino’s pin 3. Similarly, the + pin of the EC Sensor is connected with the Collector of 2N3906 PNP type transistor and the emitter is connected with 3.3V. The base of the transistor is connected with the Arduino’s pin2. The A pin of the TDS Meter is connected with the A1 pin of the Arduino."
arduino logs1,The DS18b20 waterproofed one-wire digital temperature sensor GND is connected with the Arduino’s GND. A 330-ohm resistor is connected between the Data wire and VCC wire. The data wire is connected with the Arduino’s pin7.
arduino logs1,"The i2c supported Oled display module SDA and SCL pins are connected with the Arduino’s A4 and A5 pins, while the VCC and GND pins are connected with the Arduino’s 5v and GND."
arduino logs1,The TOF10120 Laser distance Rangefinder Sensor is also an i2c supported sensor. The Green and Blue wires are the SCL and SDA wires which are connected with the A5 and A4 pins of the Arduino. The Red wire is connected with 5V and the Black wire is connected with the GND of the Arduino.
arduino logs1,"The pH sensor or pH meter V+ and GND pins are connected with 3.3v and GND pins of the Arduino. Po pin is connected with the A0 pin of the Arduino. In the circuit diagram you can also see, I have added one relay module, but in the PCB design, I added more relays. So, that’s all about the circuit diagram."
arduino logs1,Hydroponics System PCB Design:
arduino logs1,The PCB designing is done in the Cadsoft Eagle 9.1.0 version. All the connections are as per the circuit diagram already explained. In the PCB I added more relays and I am using D9 to D11 pins of the Arduino to control all 4 relays.
arduino logs1,Download Gerber files:
arduino logs1,Arduino Hydroponics System PCB making:
arduino logs1,"This is the Final PCB board. Next, I started off by placing the components and completed the Soldering Job."
arduino logs1,"Our hydroponics system PCB is ready. I also added Vias for soldering male or female headers which can be used to power up other electronic components using 12V, 5v, and GND."
arduino logs1,"These female headers on the top side are used to connect relays. The female headers on the top right side are for the pH sensor. On the bottom side, you can see male and female headers for the EC Sensor, TOF10120 Laser distance Rangefinder, and DS18b20 one-wire digital Temperature sensor."
arduino logs1,Arduino Hydroponics System:
arduino logs1,"My Arduino based Hydroponics System is ready. All the electronics are connected as per the circuit diagram. Now, let’s take a look at the Hydroponics system programming. Download all the requiredlibraries."
arduino logs1,Hydroponics System Arduino Programming:
arduino logs1,About the Hydroponics Arduino Code:
arduino logs1,"Before you start the programming, first of all, make sure you download all the necessarylibraries. You will also need to install theBlynk library, if you don’t use the blynk library then you will get the simpleTimer error. As you know I have been using the pH sensor, TDS meter or EC Sensor, TOF10120 Laser Rangefinder or Distance Sensor, DS18b20 one-wire waterproofed digital temperature sensor, and Oled display modules for quite a long time in different Arduino, ESP8266, and ESP32 based projects. So, this Hydroponics system code is developed by simply copying and pasting the code from my previous projects. The only thing that I didn’t do in my previous projects is the isolation thing. In this code, I defined pins for the + and GND pins of the TDS meter or EC Sensor. The rest of the code is exactly the same as explained in my previous tutorials. I have also shared links to all the related tutorials."
arduino logs1,"For the full step-by-step explanation, making, and demonstration watch the video tutorial given below. Don’t forget to subscribe to my website and YouTube channelElectronic Clinic."
arduino logs1,Watch Video Tutorial:
arduino logs1,Related Articles
arduino logs1,Digital 360° Tilt Sensor with Arduino and ESP32
arduino logs1,Underwater Ultrasonic Sensor with Arduino
arduino logs1,"Weighing Scale using Arduino, HX711, and a Load Cell"
arduino logs1,Force Sensitive Resistor FSR with Arduino
arduino logs1,19 Comments
arduino logs1,Great tutorial. I like to give it a go and try to make it for my hydroponic system even though I am a total newbie in both hydroponics and arduino.
arduino logs1,I wonder if I could have two additional outputs to turn on led light and water pump which both could be 220v devices with a timer or sensor ?
arduino logs1,Would it possible to extended it further and have all the data displayed on the web so I can monitor everything remotely?
arduino logs1,I keep getting a temperature return of -127 and a negative EC that doesn’t react to changing TDS in the solution with this code. Any idea why?
arduino logs1,"I THE CODE FOR THIS WILL NOT LOAD IT GIVES ERRORS @ LINE 84 I HAVE ALL THE LIBERYS AND THAY ALL SHOW BUT THIS SIMPLE TIMER IS SHOWING ERRORS timer.setInterval(500L, display_pHValue);}void loop() {timer.run(); // Initiates SimpleTimer"
arduino logs1,Hi thank you for a brilliant project. Have you thought of making it the perfect setup by adding a humidity sensor and and output to control a fan . The reason being Temperature and humidity are critical in hydroponics
arduino logs1,The temperature and humidity sensor DHT11 or DHT22 is very easy to add. You can read my articles and watch my videos on the DHT11 sensor.
arduino logs1,"It is a great job, but perhaps (only perhaps) has a very little flaw, if I am not wrong: I didn’t find the SimpleTimer library with such arguments on.http://www.arduino.ccand then, after compiling received the message “no matching function for call to ‘SimpleTimer::setInterval(long int, void (&)())”. Please, where can I find the SimpleTimer library asked by the firmware?  Best regards"
arduino logs1,https://www.electroniclinic.com/wp-content/uploads/2019/08/SimpleTimer.zip
arduino logs1,I have added maximum of the libraries I have been using.https://www.electroniclinic.com/arduino-libraries-download-and-projects-they-are-used-in-project-codes/
arduino logs1,"Engr Fahad, thank you very much by your kind attention."
arduino logs1,Very interested in this. Been a hydro grower for a while and these controllers are very expensive. My only question would be can the 2 Channel DC 5V relay be added to power couple peristaltic pumps for automatic pH? Im just starting my Arduino adventures so not sure if this is possible
arduino logs1,… been a whirlwind few years. Now I’m back here still wondering the same question haha
arduino logs1,"Hello Justin,You can do anything you want with an Arduino, you just have to declare a port (free)example line 40 of the code and to put this port to “High” to activate it line 246 of the code."
arduino logs1,Engr Fahad can i pm you thru facebook for any question?
arduino logs1,"ya, of course you can."
arduino logs1,if i use esp32 i just use aref?and “device::aref / 4095.0; ” Right?
arduino logs1,"Simple Time above is Empty , the content is missing. Can you help me ?"
arduino logs1,Hi. How did you get  device :: aref = 4.3  for the tds sensor used here?
arduino logs1,"-ciao, sto riscontrando questo errore durante la compilazione dello sketcCompilation error: ‘fdevopen’ was not declared in this scope"
arduino logs1,Mi puoi aiutare?
arduino logs1,Thank you for publishing this work. I will be using it to continue my projects development. I noticed in the video that the EC value changed from its original value when it was affecting the ph meter. Is the EC meter value augmented at all by the isolation circuitry or sampling?
arduino logs1,Leave a ReplyCancel reply
arduino logs1,Your email address will not be published.Required fields are marked*
arduino logs1,Comment*
arduino logs1,Name*
arduino logs1,Email*
arduino logs1,Website
arduino logs1,"Save my name, email, and website in this browser for the next time I comment."
arduino logs1,Δ
arduino logs1,"pH meter Arduino, pH Meter Calibration, DIYMORE pH Sensor Arduino Code"
arduino logs1,Arduino Libraries Download and Projects they are used in “Project codes”
arduino logs1,"Decoder, 3 to 8 Decoder Block Diagram, Truth Table, and Logic Diagram"
arduino logs1,We are using cookies to give you the best experience on our website.
arduino logs1,You can find out more about which cookies we are using or switch them off insettings.
arduino logs1,This website uses cookies so that we can provide you with the best user experience possible. Cookie information is stored in your browser and performs functions such as recognising you when you return to our website and helping our team to understand which sections of the website you find most interesting and useful.
arduino logs1,Strictly Necessary Cookie should be enabled at all times so that we can save your preferences for cookie settings.
arduino logs1,"If you disable this cookie, we will not be able to save your preferences. This means that every time you visit this website you will need to enable or disable cookies again."
arduino logs2,"SD Card Module with Arduino & ESP32, Arduino Data Logger, ESP32 Data Logger"
arduino logs2,Table of Contents
arduino logs2,SD Card Module with Arduino & ESP32:
arduino logs2,"SD Card Module with Arduino and ESP32-There are times when you need to store the sensor’s values in a text file for later processing. In order to save the values in a text file, you will need an SD card module like the one you can see in the image given below."
arduino logs2,"In this tutorial, you will learn how to interface this low-cost and commonly used SD card Module with Arduino to make an efficient Arduino Data Logger. We will also use the Micro SD card Module with the ESP32 for logging or storing the Sensor Data in a text file."
arduino logs2,"In this tutorial, I will also explain how to use this Micro SD card Adaptor with the ESP32 Wifi + Bluetooth module if in case you don’t have this SD card Module."
arduino logs2,"As this is a very basic getting started tutorial on how to use the Card module and SD card adaptor with the Arduino and ESP32 so, I have tried my best to keep things simpler so that you guys can easily follow each and every step. I will use the potentiometer as the sensor for the data logging which of course you can replace with any other sensor as per your requirement."
arduino logs2,Without any further delay let’s get started!!!
arduino logs2,Amazon Purchase Links:
arduino logs2,Arduino SD Card Module
arduino logs2,8GB Micro SD Card
arduino logs2,Micro SD Card Adaptor
arduino logs2,ESP32 WiFi + Bluetooth Module(Recommended)
arduino logs2,12v Adaptor:
arduino logs2,Arduino Uno
arduino logs2,RTC DS3231 Real Time Clock:
arduino logs2,DHT11 Temperature and Humidity Module:
arduino logs2,*Disclosure: These are affiliate links. As an Amazon Associate I earn from qualifying purchases.
arduino logs2,SD Card Module Pinout and technical Specification:
arduino logs2,"This is the SD Card Reading and Writing Module which can be easily interfaced with Arduino and other embedded boards and microcontrollers. With a very basic program, you can read and write to the SD card over the SPI interface. This card module is provided with the onboard 3.3V voltage regulator due to which it can be interfaced with 3.3V compatible controller boards like ESP32 and ESP8266, etc. In order to use the micro SD card with this module, you will need a micro SD card adaptor."
arduino logs2,This SD card module is provided with male headers which are clearly labeled as
arduino logs2,GND
arduino logs2,3.3V
arduino logs2,5V
arduino logs2,CS
arduino logs2,MOSI
arduino logs2,SCK
arduino logs2,MISO and
arduino logs2,GND
arduino logs2,"If you are planning to use this Card Module with the Arduino then connect the 5v pin with the Arduino’s 5V, and if you are planning to use this Card module with the ESP32 then connect the 3.3v pin with the ESP32 3.3V pin. Never use 5 volts when using this SD card module with 3.3V compatible controller boards."
arduino logs2,"While performing the initial tests, I powered up the SD card module using 3.3V and it didn’t work. Then I powered up this module using the Arduino’s 5V and it worked. So, in a nutshell, if you are using the Card Module with the Arduino then use 5volts, and if you are using the Card Module with the ESP32 or ESP8266 then use 3.3V. For more details read my article available on www.electroniclinic.com. I will provide a link in the description. So, first, let’s start with the Arduino and Card Module."
arduino logs2,"SD Card Module, Description:"
arduino logs2,"This SD Card Reader/Writer is ideal for many Micro-controller projects (Arduino, Pic, Versalino, etc…) Including (but not limited to) projects involving sensor and other data logging activities. Audio playing and/or recording. Video, Image, and other multimedia storage and retrieval for advanced embedded applications. Processing large quantities of data with a robot, or storing/retrieving items larger than the limited memory available on your microprocessor. This can be used for a broad range of applications from scientific data collection for biological/geological and other statistical studies in the field, to storing map data for your robots surroundings in and outside the home."
arduino logs2,Technical Specifications:
arduino logs2,"Working Voltage: 3.3 & 5V(DC Both required) Requires SPI Capable Microprocessor Size limitations are library dependent, but most microprocessors have libraries pre-coded that will support sizes upward of 1GB 7 wires required (including power and ground) Fits standard size SD Cards Package Contents: 1*SD Card Reader/Writer"
arduino logs2,Arduino Uno and Arduino Mega SPI pins:
arduino logs2,ESP32 SPI Pins:
arduino logs2,For the complete ESP32 Pinout read myarticle.
arduino logs2,SD Card Module Interfacing with Arduino:
arduino logs2,"The rightmost and leftmost legs of the Potentiometer are connected with the Arduino’s 3.3V and GND. The 5V and GND pins of the SD Card Module are connected with the Arduino’s 5v and ground. CS is connected with pin 10, MOSI is connected with pin 11, SCK is connected with pin 13, and MISO is connected with pin 12 of the Arduino."
arduino logs2,"Next, I connected the Card Module and the Potentiometer with the Arduino as per the circuit diagram already explained. Now, let’s take a look at Arduino programming."
arduino logs2,Arduino SD Card Module Programming:
arduino logs2,SD Card Module Arduino Code Explanation:
arduino logs2,"For this program, there is no need to download any libraries. The SPI.h and SD.h libraries are already included in the Arduino IDE. The purpose of this program is to read the potentiometer and then store the value in the DATA.txt file. One more thing that I would like to mention over here is that, format your micro SD card using the FAT32 file system and then make a txt file with the name DATA and the rest Arduino will take care of. So, anyhow, LoggingVresistor() function is a user-defined function and this is the only function I am using inside the void loop() function. This function is called after every 5 seconds, reads the potentiometer, store the data in variable Vrdata then the Arduino opens the DATA.txt file to write the Potentiometer value and then close the file. I have already uploaded this program; let’s watch this Arduino Data Logger in action."
arduino logs2,"As you can see we successfully stored the Potentiometer values in the DATA.txt file. Now, I am going to explain how to interface the SD Card module with the ESP32."
arduino logs2,"As explained earlier, the card Module also supports 3.3V. So, it can also be easily interfaced with the ESP32 module."
arduino logs2,SD Card Module interfacing with ESP32:
arduino logs2,"The potentiometer’s rightmost and leftmost legs are connected with the 3.3v and GND pins, while the middle leg is connected with the VP pin of the ESP32 which is the GPIO36 and this is the ADC0."
arduino logs2,"The SD Card Module 3.3V and GND pins are connected with the ESP32 3.3V and GND pins. CS is connected with D5, MOSI is connected with D23, SCK is connected with D18, and MISO is connected with D19."
arduino logs2,"Next, I connected the Card Module with the ESP32 as per the circuit diagram already explained. Now, let’s take a look at the programming."
arduino logs2,ESP32 SD Card Module Programming:
arduino logs2,SD Card Module ESP32 Code Explanation:
arduino logs2,"In order to use the SD Card Module with the ESP32 first, you will need to install the ESP32 board. I have a very detailed tutorial on this which explainshow to add the board manager url link for the ESP32. This time you can see I added another library FS.h, you will get this library when you install the ESP32 board. So there is no need to download this library."
arduino logs2,The purpose of this program is to read the potentiometer and then store the value in the txt file. This code automatically creates the txt file. I have already uploaded this program let’s watch this ESP32 Data Logger in action.
arduino logs2,As you can see we successfully stored the Potentiometer values in the text file. You can connect and store values of multiple sensors.
arduino logs2,Micro SD card Adaptor Interfacing with ESP32:
arduino logs2,If in case you do not have this Card Module then you can also interface this Micro SD Card Adaptor with the ESP32.
arduino logs2,"Follow these connections. These are the same exact connections that we used for the SD Card Module.  For easy interfacing, I started by soldering the male headers. Now using these male headers I can easily interface this Micro SD Card Adaptor with the ESP32 and other 3.3V compatible controller boards."
arduino logs2,"I connected the Micro SD Card Adaptor with the ESP32 as per the interface connections, the Potentiometer connection with the ESP32 remains exactly the same."
arduino logs2,We will be using the same program. Now let’s watch this Micro SD Card Adaptor and ESP32 based Data Logger in action.
arduino logs2,Arduino Temperature Data Logger using SD Card Module:
arduino logs2,"I covered the basics now let’s make a temperature data logging system using the Card Module and Arduino which saves the temperature in a text file with the date and time information. For this project, you should have a basic understanding ofhow to use the DHT11 Temperature and Humidity Sensorand you should also know how to use theReal Time Clock DS3231. So, I highly recommend reading these two articles, if you really want to learn how to use the DHT11 and DS3231 modules."
arduino logs2,Arduino Temperature Data Logger Circuit Diagram:
arduino logs2,Arduino Temperature Data Logger Programming:
arduino logs2,Watch Video Tutorial:
arduino logs2,Engr. Shahzada Fahad
arduino logs2,Related Articles
arduino logs2,C4001 mmWave Human Detection Sensor with Arduino and ESP32
arduino logs2,ESP32-S3 Geek and Arduino IDE- Getting Started Tutorial
arduino logs2,Digital 360° Tilt Sensor with Arduino and ESP32
arduino logs2,SmartWatch Home Automation and Sensor Monitoring
arduino logs2,2 Comments
arduino logs2,"Hello, I’m using esp32, and i use code like you. i can logged data to sd card, but when the file’s size is ~ 450Kb, the format of SD card become error. so, can you help me to fix it. I try to use another library like SD.h, mySD.h but, the SD’ format became error when the file’s size 450Kb. Please, give me some advices! Thank you"
arduino logs2,"Hi, I just use code like you, but after 1 hour, the file’s size is 40 Kb, the file is overwrite and the file’s size start at 0 kb. So, can you give some advices. I use ESP32 and sdhc card."
arduino logs2,Leave a ReplyCancel reply
arduino logs2,Your email address will not be published.Required fields are marked*
arduino logs2,Comment*
arduino logs2,Name*
arduino logs2,Email*
arduino logs2,Website
arduino logs2,"Save my name, email, and website in this browser for the next time I comment."
arduino logs2,Δ
arduino logs2,"pH meter Arduino, pH Meter Calibration, DIYMORE pH Sensor Arduino Code"
arduino logs2,Arduino Libraries Download and Projects they are used in “Project codes”
arduino logs2,"Decoder, 3 to 8 Decoder Block Diagram, Truth Table, and Logic Diagram"
arduino logs2,We are using cookies to give you the best experience on our website.
arduino logs2,You can find out more about which cookies we are using or switch them off insettings.
arduino logs2,This website uses cookies so that we can provide you with the best user experience possible. Cookie information is stored in your browser and performs functions such as recognising you when you return to our website and helping our team to understand which sections of the website you find most interesting and useful.
arduino logs2,Strictly Necessary Cookie should be enabled at all times so that we can save your preferences for cookie settings.
arduino logs2,"If you disable this cookie, we will not be able to save your preferences. This means that every time you visit this website you will need to enable or disable cookies again."
arduino logs3,"What is Lidar? Lidar Working, TF Mini Lidar with Arduino Connection & Code"
arduino logs3,Table of Contents
arduino logs3,Lidar (Light detection and ranging)
arduino logs3,"LIDAR is the abbreviation of the term Light Detection and Ranging. Lidar is a remote sensing method that uses laser to measure elevation like ground forest and buildings. The light energy emitted by Lidar is known as pulse. Light reflected from ground or object is known as return. This means the Lidar system sends a pulse of light and it wait for the pulse to return and measures how long it take the emitted pulse to return back  to the sensor, in the end it gets variable distance of the objects actually this is how Lidar got its name Light detection and ranging . Lidar uses ultraviolet visible or near infrared source objects to sense objects. As the laser light is reflected from the object it is detected by the sensor."
arduino logs3,"Like a sonar used sound wave, radar uses radio waves similarly Lidar on the other hand uses light sent out from a laser a Lidar unit scan the ground from side to side as the plane flies because of this it covers the larger whole some pulses will be directly at nadir or a straight line most pulses travel at an angle."
arduino logs3,Airplanes unmanned aerial vehicles and helicopters most commonly used platform for acquiring Lidar data over broad areas. There are different ways to collect data using lidar from ground from plane or from satellite
arduino logs3,three types of Lidar
arduino logs3,Topographic Lidar
arduino logs3,It maps the land using near infrared light.
arduino logs3,Metric Lidar:-
arduino logs3,It uses water penetrating green light to measure seafloor and river bed elevation.
arduino logs3,Terrestrial Lidar:-
arduino logs3,It is used for mapping buildings natural features and tree at ground it is also very useful for 3d model of heritage sites.
arduino logs3,LIDAR Working:-
arduino logs3,The working of lidar operation is simple. The dedicated light beam is pointed at an object and the sensor looks for its reflection. If the beam is detected its intensity and phase is measured. The values are then plugged into an equation run by a fast onboard computer to control the reflecting objects position and features by sweeping the beam and the receiver array mechanically we can quickly build up a 3d image of the surrounding area Which is often showed in a point cloud to help us individuals visualize what the lidar is seeing.
arduino logs3,Obviously lidar is not the only method that can be used to sense external surroundings.
arduino logs3,The LIDAR system works on the time of flight principle where laser in pulsed form is targeted onto the object and the reflected or scattered pulse is measured using the detector. From measuring the time difference b/w the transmitted and reflected pulse. The distance between the objects can be calculated.  As laser beam has less expansion with travel distance and it has very short wavelength it can also be used for scanning of the object mapping and surface scanning applications.
arduino logs3,Difference between LIDAR and Ultrasonic Sensors
arduino logs3,The HCSR04 devices are low cost and easy to use components that take up about the same amount of space as the motionless lidar sensor. They also use about the same amount of current.
arduino logs3,The HCSR04 sensors work on basically the same principle as our lidar sensors except. They use ultrasonic sound in place of infrared light. It have a range from about 2 cm to 4m so they can cover items at closer range than lidar but not as far.
arduino logs3,The HCSR04 sound is not as directional as light so an ultrasonic sensor cannot be used to create a point cloud. The sound travels much slower than the light you are limited to how much data you can gather in a short period of time and not all objects reflect ultrasonic sound. Some items absorb sound and does not reflect enough of it back to get a good reading and HCSR04 sensors have a lot of good points in their favor. They are much cheaper than lidar can detect objects reasonably close and easy to use.
arduino logs3,Difference between LIDAR and IR Light Sensor
arduino logs3,The IR LED and the receiver diode used for collision detection applications assemblies output a pulse when they detect an object at or closer than a preset distance. We can adjust the distance they trigger at using an onboard potentiometer. The devices are inexpensive and as they also work using IR light beams they are very fast. They have a range that extends from just a few millimeters to about 10 cm so they work at a much closer range than lidar does.
arduino logs3,These modest IR light sensors do not provide any data on the quality of the returned light or an actual distance measurement. They are best used as alarm type sensors that trigger when an outside object is detected at a preset range. Countless to send an interrupt to tell your robot that it is about to hit an object.
arduino logs3,Difference between LIDAR and RADAR
arduino logs3,The lidar is based upon the same standard as radar except it makes use of light beams instead of high frequency radio waves.
arduino logs3,A developed radar array is not that practical for a small robot project however small microwave and the radar sensors are available. It can be used in similar applications as lidar and have similar or greater ranges and capabilities. Few items absorb or pass radio waves and are not detected well using radar.
arduino logs3,A radar is based upon microwaves it is as speedy as lidar. The lidar does have a benefit in resolution but radar is still pretty skilled.  The low power levels required for a small sensor radar would not pose a threat to human or animal health but will consume a bit more current than lidar sensors.The Radar uses radio waves (Longer Wavelength) but LIDAR uses Light waves (Shorter Wavelength).
arduino logs3,The Lidar is more accurate than the radar as it uses shorter wavelength. The radar can work in harsh environments like fog rain and snow while Lidar has limited usability in such environments. It is used in applications where detection distance is important but it is not the exact size and shape of an object like in military applications. The lidar is used in applications where the detection of exact shape and size of the object is necessary The Self driving vehicles use a combination of lidar and radar sensors. We can see there are benefits and hindrances of all types of sensors including lidar. In a difficult robot project you would probable use most if not all of the above technologies.
arduino logs3,Amazon Purchase Links:
arduino logs3,Arduino Nano USB-C Type (Recommended)
arduino logs3,Lidar
arduino logs3,Arduino Uno
arduino logs3,*Disclosure: These are affiliate links. As an Amazon Associate I earn from qualifying purchases.
arduino logs3,Components of LIDAR
arduino logs3,LASER
arduino logs3,The most of the laser that are used in the lidar are in the range near infrared but in some applications like in underwater applications even green lasers are also used.
arduino logs3,DETECTOR
arduino logs3,The second component of Lidar is called detector which is used in circuit to measure the reflected or the scattered light which is coming from the object.
arduino logs3,OPTICS and Rotating mechanism
arduino logs3,The 3rd component of this Lidar system is the optics and the rotating mechanism to scan the object.
arduino logs3,Timing Electronics
arduino logs3,It is used to measure the difference between the transmitted pulse and received pulse
arduino logs3,Computer
arduino logs3,This lidar system used to generate the enormous amount of data points in real time so to compute that data we also require the computer
arduino logs3,GPS and IMU
arduino logs3,GPS and IMU which stands for the inertial moment unit are also part of this lidar system.
arduino logs3,GPS receiver track the altitude and orientation of the lidar these variable are important in attaining terrain elevation values. IMU track the speed and orientation of the lidar to accurately determine the actual position 0n the ground.
arduino logs3,TF mini Lidar (Laser Range Sensor):-
arduino logs3,The TF mini lidar is a single laser range finder based upon time of flight technology which consists of exceptional optical and electronic devices which integrates adaptive algorithm forindoorand outdoor application atmosphere. It contain small body and high performance in distance measurement.
arduino logs3,the laser sensor can be used as a distance measuring tool to detect the distance from it to hindrances. It can also be used as an eye of a robot. It delivers distance info for robotic safe escaping and route selection. It supports for system automation in a variety of machine control scenarios. Due to its small size light weight and low power consumption it is also suitable for altitude hold quad copters and terrain following
arduino logs3,TF mini Lidar features
arduino logs3,TF mini Lidar applications
arduino logs3,TF mini Lidar specification
arduino logs3,Connection of TF Mini LIDAR with Arduino
arduino logs3,The Connection of the TF Mini LIDAR unit to the Arduino:
arduino logs3,Here the logic level converter uses both a 5 volt and 3.3 volt power supply both are taken from the Arduino Uno.
arduino logs3,The pin 10 connection of the Arduino is used as a receive pin for the data from the TX output of the TF Mini lidar. That the data runs through channel A of the convertor. The Pin 11 of the Arduino is used as a transmit pin for data sent to the RX input on the TF Mini. It runs through channel B of the convertor protecting the RX input from the 5 volt logic used in the Arduino.
arduino logs3,The chart on the Connection diagram should assist you in making the correct connections.
arduino logs3,TF Mini LIDAR Arduino Sketch
arduino logs3,After Connection let us run a sketch to determine the abilities of the TF Mini lidar unit.
arduino logs3,We are going to take install a library for the TF Mini lidar into our Arduino ide and then run a sample sketch included with the library.
arduino logs3,Another library will be used with our demo sketch as well this one is already installed by default into your Arduino IDE.  It is the Software Serial Library and it resolves a problem you will encounter using more than one serial device with your Arduino.
arduino logs3,Your Arduino Uno has a single Hardware Serial port an input (RX) on pin 0 and an output (TX) on pin 1. Inside these two pins are used in the USB interface that connects your Arduino to your computer.
arduino logs3,As Uno only has one serial port you will run into problems using a device like the TF Mini lidar which itself requires a serial port. If you use pins 0 and 1 you would not be able to use the Serial Monitor on the USB port which creates a problem as that is exactly what we want to do here.
arduino logs3,The Software Serial Library provides the solution. It allows you to use any two pins on an Arduino Uno as serial I/O pins and it handles the serial encoding and decoding of the data.
arduino logs3,It is not perfect and it will not perform as well as a hardware serial port but it will certainly work with our sketch.
arduino logs3,The sketch itself is included with the TF Mini Library.
arduino logs3,"One example is called Single Reading. This is actually a “skeleton sketch”, by itself it does not accomplish much but it is full of comments to where you would add your own code. You can use this as the basis for a design based upon the TF Mini."
arduino logs3,The example we will be using is the other one Basic Reading. Name suggesting it takes basic readings from the TF Mini LIDAR sensor and displays the results on the serial monitor.
arduino logs3,The sketch starts by loading theTF Miniand Software Serial libraries.  After that the Software Serial port is setup as an object called “my Serial” using pins 10 and 11 as receive and transmit respectively.
arduino logs3,An object called “tfmini” is also created using the TF Mini library.
arduino logs3,"In arrangement the hardware (USB) serial port is setup.  Remember this is set to a speed of 115,200 bps which is possibly faster than your Arduino ide serial monitor is currently setup. When you first run the sketch you will need to alternate the speed on the serial monitor to match."
arduino logs3,This Software Serial setup is next. The constant it uses for baud rate is derived from the TF Mini library. The final step in the setup is to initialize the TF Mini sensor itself.
arduino logs3,The loop things are actually simple. The couple of 16 bit integers are defined and the assigned to the value of the Tf Mini distance and signal strength readings.  Then these values are displayed on the serial monitor. When that is done a brief delay is set and the loop begins again.
arduino logs3,TF Mini lidar with Arduino Testing
arduino logs3,"After loaded everything and connecting up open your Serial Monitor in the arduino ide. If you are meet with a bunch of error make sure that the baud rate is set to 115,200 bps this can be adjusted using the dropdown box on the bottom of the serial monitor. You may need to reset the Arduino after changing baud rate."
arduino logs3,As you get the serial monitor working you should be greeted by a display of distance and signal strength. Now Pick up the TF Mini LIDAR sensor and point it at a distant object while observing these readings.
arduino logs3,Recall that the TF Mini LIDAR sensor has a minimum range of 30 cm  which is about a foot. Any objects closer than that will register as being at 30 cm.
arduino logs3,Though this is a simple sketch it does illustrate how informal it is to work with the TF Mini lidar sensor. One thing you will note is how quickly you get data back specifically if you associate it to the experiments we did using the HCSR04 Ultrasonic Sensor. It shows how quickly a light based position sensing system is compared to one based upon sound.
arduino logs3,TF Mini Lidar Arduino Programming
arduino logs3,/*
arduino logs3,"This example communicates to the TF Mini using a Software Serial port at 115200,"
arduino logs3,While communicating the distance results through the default Arduino hardware
arduino logs3,Serial debug port
arduino logs3,Software Serial for some boards can be unreliable at high speeds (such as 115200).
arduino logs3,"The driver includes some limited error detection and automatic retries, that"
arduino logs3,Means it can generally work with Software Serial on (for example) an UNO without
arduino logs3,"The end-user noticing many communications glitches, as long as a constant refresh"
arduino logs3,Rate is not required.
arduino logs3,The (Uno) circuit:
arduino logs3,* Uno Rx is digital pin 10 (connect to TX of Tf mini)
arduino logs3,* Uno TX is digital pin 11 (connect to Rx of Tf mini)
arduino logs3,This software is provided ”as is” and any
arduino logs3,"Express or implied warranties, including, but not limited to, the implied"
arduino logs3,Warranties of merchantability and fitness for a particular purpose are
arduino logs3,Disclaimed. In no event shall the author(s) be liable for any
arduino logs3,"Direct, indirect, incidental, special, exemplary, or consequential damages"
arduino logs3,"(Including, but not limited to, procurement of substitute goods or services;"
arduino logs3,"Loss of use, data, or profits; or business interruption) however caused and"
arduino logs3,"On any theory of liability, whether in contract, strict liability, or tort"
arduino logs3,(Including negligence or otherwise) arising in any way out of the use of this
arduino logs3,"Software, even if advised of the possibility of such damage."
arduino logs3,Applications of LIDAR
arduino logs3,Agriculture:-
arduino logs3,The lidar can be used to create 3d elevation map of a particular land.  It can be converted to create slope and sunlight exposure area map. The information can be used to identify the areas which require more water or fertilizer and this help farmers to save on their cost of labor time and money.
arduino logs3,Survey:-
arduino logs3,The water penetrating green light of the lidar can be used to see things underwater and it helps create a 3d model of the terrain. The underwater information of a river can help understand the depth width and flow of the water. Which helps in monitoring the floodplains.
arduino logs3,Pollution Modelling:-
arduino logs3,The lidar wavelength is shorter. Lidar operates in ultraviolet visible region or near infrared. This helps to image the matter which is of the same size or larger than the wavelength. So the lidar can detect pollutant particles of carbon dioxide and methane. The info helps academics to create impurity density map of the area which can be used for better planning of the city.
arduino logs3,Building Construction
arduino logs3,The lidar plays an important role for the archeologist to understand the surface. The lidar can detect micro topography that is hidden by vegetation which helps archeologist to understand the surface.
arduino logs3,Self-directed vehicles
arduino logs3,The lidar works as an eye of the autonomous vehicle.  If your eyes allowed you to see in all directions all the time instead of predicting you could always know the exact distance of objects in relation to you. The lidar enable an Autonomous car to view the surroundings with special powers. The ground based lidar technology can be used to capture the structure of the building. This digital information can be used for 3d mapping on the ground which can be used to create models of the structure.  And it is very useful for maintaining a record of the structure.
arduino logs3,Engr. Shahzada Fahad
arduino logs3,Related Articles
arduino logs3,Digital 360° Tilt Sensor with Arduino and ESP32
arduino logs3,Underwater Ultrasonic Sensor with Arduino
arduino logs3,"Weighing Scale using Arduino, HX711, and a Load Cell"
arduino logs3,Force Sensitive Resistor FSR with Arduino
arduino logs3,One Comment
arduino logs3,Sir my lidar shows same value every time…How can I solve this
arduino logs3,Leave a ReplyCancel reply
arduino logs3,Your email address will not be published.Required fields are marked*
arduino logs3,Comment*
arduino logs3,Name*
arduino logs3,Email*
arduino logs3,Website
arduino logs3,"Save my name, email, and website in this browser for the next time I comment."
arduino logs3,Δ
arduino logs3,"pH meter Arduino, pH Meter Calibration, DIYMORE pH Sensor Arduino Code"
arduino logs3,Arduino Libraries Download and Projects they are used in “Project codes”
arduino logs3,"Decoder, 3 to 8 Decoder Block Diagram, Truth Table, and Logic Diagram"
arduino logs3,We are using cookies to give you the best experience on our website.
arduino logs3,You can find out more about which cookies we are using or switch them off insettings.
arduino logs3,This website uses cookies so that we can provide you with the best user experience possible. Cookie information is stored in your browser and performs functions such as recognising you when you return to our website and helping our team to understand which sections of the website you find most interesting and useful.
arduino logs3,Strictly Necessary Cookie should be enabled at all times so that we can save your preferences for cookie settings.
arduino logs3,"If you disable this cookie, we will not be able to save your preferences. This means that every time you visit this website you will need to enable or disable cookies again."
arduino logs4,Logging ACC-Data with AvrAdcLogger with Arduino Nano V3.0
arduino logs4,"Hi, I am recording acceleration data from three accelerometers using my Arduino Nano V3.0. The accelerometers are connected to analog inputs 0 to 7 (so 8 analog inputs are used). The software used is the AvrAdcLogger. The acceleration data is stored on a micro SD card as a CSV file. This works so far for the analog inputs 0 to 4 (first five columns in the CSV file). Unfortunately for the analog inputs 5 to 7 (last three columns in the CSV file) the values are zero. However, if I query analog inputs 5 to 7 separately, I also get values. I would have suspected that the problem is due to the buffersize, but my program does not give me a buffer overrun error. Unfortunately my Arduino knowledge is not so great that I completely understand the program used.Used Hardware:Arduin Nano V3.0 (Gravitech)3x EVAL-ADXL356 CZ (accelerometers)MicroSD Card Breakout Board (Ardafruit)"
arduino logs4,"/**
 * This program logs data from the Arduino ADC to a binary file.
 *
 * Samples are logged at regular intervals. Each Sample consists of the ADC
 * values for the analog pins defined in the PIN_LIST array.  The pins numbers
 * may be in any order.
 *
 * Edit the configuration constants below to set the sample pins, sample rate,
 * and other configuration values.
 *
 * If your SD card has a long write latency, it may be necessary to use
 * slower sample rates.  Using a Mega Arduino helps overcome latency
 * problems since more 64 byte buffer blocks will be used.
 *
 * Each 64 byte data block in the file has a four byte header followed by up
 * to 60 bytes of data. (60 values in 8-bit mode or 30 values in 10-bit mode)
 * Each block contains an integral number of samples with unused space at the
 * end of the block.
 *
 */
#ifdef __AVR__
#include <SPI.h>
#include ""SdFat.h""
#include ""BufferedPrint.h""
#include ""FreeStack.h""
#include ""AvrAdcLogger.h""

// Save SRAM if 328.
#ifdef __AVR_ATmega328P__
#include ""MinimumSerial.h""
MinimumSerial MinSerial;
#define Serial MinSerial
#endif  // __AVR_ATmega328P__
//------------------------------------------------------------------------------
// This example was designed for exFAT but will support FAT16/FAT32.
//
// Note: Uno will not support SD_FAT_TYPE = 3.
// SD_FAT_TYPE = 0 for SdFat/File as defined in SdFatConfig.h,
// 1 for FAT16/FAT32, 2 for exFAT, 3 for FAT16/FAT32 and exFAT.
#define SD_FAT_TYPE 2
//------------------------------------------------------------------------------
// Set USE_RTC nonzero for file timestamps.
// RAM use will be marginal on Uno with RTClib.
// Set USE_RTC nonzero for file timestamps.
// RAM use will be marginal on Uno with RTClib.
// 0 - RTC not used
// 1 - DS1307
// 2 - DS3231
// 3 - PCF8523
#define USE_RTC 0
#if USE_RTC
#include ""RTClib.h""
#endif  // USE_RTC
//------------------------------------------------------------------------------
// Pin definitions.
//
// Digital pin to indicate an error, set to -1 if not used.
// The led blinks for fatal errors. The led goes on solid for SD write
// overrun errors and logging continues.
const int8_t ERROR_LED_PIN = -1;


// System-Mode Switch-Pin and Status-LED Pin #####################################################################
const uint8_t STATUS_LED = 5;
const uint8_t MODE_SWITCH = 7;
int buttonState = 0;
// ###############################################################################################################

// SD chip select pin.
const uint8_t SD_CS_PIN = 10;
//------------------------------------------------------------------------------
// Analog pin number list for a sample.  Pins may be in any order and pin
// numbers may be repeated.
const uint8_t PIN_LIST[] = {0, 1, 2, 3, 4, 5, 6, 7};
//------------------------------------------------------------------------------
// Sample rate in samples per second.
const float SAMPLE_RATE =2000;  // Must be 0.25 or greater.

// The interval between samples in seconds, SAMPLE_INTERVAL, may be set to a
// constant instead of being calculated from SAMPLE_RATE.  SAMPLE_RATE is not
// used in the code below.  For example, setting SAMPLE_INTERVAL = 2.0e-4
// will result in a 200 microsecond sample interval.
const float SAMPLE_INTERVAL = 1.0/SAMPLE_RATE;

// Setting ROUND_SAMPLE_INTERVAL non-zero will cause the sample interval to
// be rounded to a a multiple of the ADC clock period and will reduce sample
// time jitter.
#define ROUND_SAMPLE_INTERVAL 1
//------------------------------------------------------------------------------
// Reference voltage.  See the processor data-sheet for reference details.
 uint8_t const ADC_REF = 0; // External Reference AREF pin.
// uint8_t const ADC_REF = (1 << REFS0);  // Vcc Reference.
// uint8_t const ADC_REF = (1 << REFS1);  // Internal 1.1 (only 644 1284P Mega)
// uint8_t const ADC_REF = (1 << REFS1) | (1 << REFS0);  // Internal 1.1 or 2.56
//------------------------------------------------------------------------------
// File definitions.
//
// Maximum file size in bytes.
// The program creates a contiguous file with MAX_FILE_SIZE_MiB bytes.
// The file will be truncated if logging is stopped early.
const uint32_t MAX_FILE_SIZE_MiB = 10;  // 10 MiB file. [Changed from 100 to 10 on 2022-05-26]

// log file name.  Integer field before dot will be incremented.
#define LOG_FILE_NAME ""AvrAdc00.bin""

// Maximum length name including zero byte.
const size_t NAME_DIM = 40;

// Set RECORD_EIGHT_BITS non-zero to record only the high 8-bits of the ADC.
#define RECORD_EIGHT_BITS 0
//------------------------------------------------------------------------------
// FIFO size definition. Use a multiple of 512 bytes for best performance.
//
#if RAMEND < 0X8FF
#error SRAM too small
#elif RAMEND < 0X10FF
const size_t FIFO_SIZE_BYTES = 512;
#elif RAMEND < 0X20FF
const size_t FIFO_SIZE_BYTES = 4*512;
#elif RAMEND < 0X40FF
const size_t FIFO_SIZE_BYTES = 12*512;
#else  // RAMEND
const size_t FIFO_SIZE_BYTES = 16*512;
#endif  // RAMEND
//------------------------------------------------------------------------------
// ADC clock rate.
// The ADC clock rate is normally calculated from the pin count and sample
// interval.  The calculation attempts to use the lowest possible ADC clock
// rate.
//
// You can select an ADC clock rate by defining the symbol ADC_PRESCALER to
// one of these values.  You must choose an appropriate ADC clock rate for
// your sample interval.
// #define ADC_PRESCALER 7 // F_CPU/128 125 kHz on an Uno
// #define ADC_PRESCALER 6 // F_CPU/64  250 kHz on an Uno
// #define ADC_PRESCALER 5 // F_CPU/32  500 kHz on an Uno
// #define ADC_PRESCALER 4 // F_CPU/16 1000 kHz on an Uno
// #define ADC_PRESCALER 3 // F_CPU/8  2000 kHz on an Uno (8-bit mode only)
//==============================================================================
// End of configuration constants.
//==============================================================================
// Temporary log file.  Will be deleted if a reset or power failure occurs.
#define TMP_FILE_NAME ""tmp_adc.bin""

// Number of analog pins to log.
const uint8_t PIN_COUNT = sizeof(PIN_LIST)/sizeof(PIN_LIST[0]);

// Minimum ADC clock cycles per sample interval
const uint16_t MIN_ADC_CYCLES = 15;

// Extra cpu cycles to setup ADC with more than one pin per sample.
const uint16_t ISR_SETUP_ADC = PIN_COUNT > 1 ? 100 : 0;

// Maximum cycles for timer0 system interrupt.
const uint16_t ISR_TIMER0 = 160;
//==============================================================================
const uint32_t MAX_FILE_SIZE = MAX_FILE_SIZE_MiB << 20;

// Max SPI rate for AVR is 10 MHz for F_CPU 20 MHz, 8 MHz for F_CPU 16 MHz.
#define SPI_CLOCK SD_SCK_MHZ(10)
// Select fastest interface.
#if ENABLE_DEDICATED_SPI
#define SD_CONFIG SdSpiConfig(SD_CS_PIN, DEDICATED_SPI, SPI_CLOCK)
#else  // ENABLE_DEDICATED_SPI
#define SD_CONFIG SdSpiConfig(SD_CS_PIN, SHARED_SPI, SPI_CLOCK)
#endif  // ENABLE_DEDICATED_SPI

#if SD_FAT_TYPE == 0
SdFat sd;
typedef File file_t;
#elif SD_FAT_TYPE == 1
SdFat32 sd;
typedef File32 file_t;
#elif SD_FAT_TYPE == 2
SdExFat sd;
typedef ExFile file_t;
#elif SD_FAT_TYPE == 3
SdFs sd;
typedef FsFile file_t;
#else  // SD_FAT_TYPE
#error Invalid SD_FAT_TYPE
#endif  // SD_FAT_TYPE

file_t binFile;
file_t csvFile;

char binName[] = LOG_FILE_NAME;

#if RECORD_EIGHT_BITS
const size_t BLOCK_MAX_COUNT = PIN_COUNT*(DATA_DIM8/PIN_COUNT);
typedef block8_t block_t;
#else  // RECORD_EIGHT_BITS
const size_t BLOCK_MAX_COUNT = PIN_COUNT*(DATA_DIM16/PIN_COUNT);
typedef block16_t block_t;
#endif // RECORD_EIGHT_BITS

// Size of FIFO in blocks.
size_t const FIFO_DIM = FIFO_SIZE_BYTES/sizeof(block_t);
block_t* fifoData;
volatile size_t fifoCount = 0; // volatile - shared, ISR and background.
size_t fifoHead = 0;  // Only accessed by ISR during logging.
size_t fifoTail = 0;  // Only accessed by writer during logging.
//==============================================================================
// Interrupt Service Routines

// Disable ADC interrupt if true.
volatile bool isrStop = false;

// Pointer to current buffer.
block_t* isrBuf = nullptr;
// overrun count
uint16_t isrOver = 0;

// ADC configuration for each pin.
uint8_t adcmux[PIN_COUNT];
uint8_t adcsra[PIN_COUNT];
uint8_t adcsrb[PIN_COUNT];
uint8_t adcindex = 1;

// Insure no timer events are missed.
volatile bool timerError = false;
volatile bool timerFlag = false;
//------------------------------------------------------------------------------
// ADC done interrupt.
ISR(ADC_vect) {
  // Read ADC data.
#if RECORD_EIGHT_BITS
  uint8_t d = ADCH;
#else  // RECORD_EIGHT_BITS
  // This will access ADCL first.
  uint16_t d = ADC;
#endif  // RECORD_EIGHT_BITS

  if (!isrBuf) {
    if (fifoCount < FIFO_DIM) {
      isrBuf = fifoData + fifoHead;
    } else {
      // no buffers - count overrun
      if (isrOver < 0XFFFF) {
        isrOver++;
      }
      // Avoid missed timer error.
      timerFlag = false;
      return;
    }
  }
  // Start ADC for next pin
  if (PIN_COUNT > 1) {
    ADMUX = adcmux[adcindex];
    ADCSRB = adcsrb[adcindex];
    ADCSRA = adcsra[adcindex];
    if (adcindex == 0) {
      timerFlag = false;
    }
    adcindex =  adcindex < (PIN_COUNT - 1) ? adcindex + 1 : 0;
  } else {
    timerFlag = false;
  }
  // Store ADC data.
  isrBuf->data[isrBuf->count++] = d;

  // Check for buffer full.
  if (isrBuf->count >= BLOCK_MAX_COUNT) {
    fifoHead = fifoHead < (FIFO_DIM - 1) ? fifoHead + 1 : 0;
    fifoCount++;
    // Check for end logging.
    if (isrStop) {
      adcStop();
      return;
    }
    // Set buffer needed and clear overruns.
    isrBuf = nullptr;
    isrOver = 0;
  }
}
//------------------------------------------------------------------------------
// timer1 interrupt to clear OCF1B
ISR(TIMER1_COMPB_vect) {
  // Make sure ADC ISR responded to timer event.
  if (timerFlag) {
    timerError = true;
  }
  timerFlag = true;
}
//==============================================================================
// Error messages stored in flash.
#define error(msg) (Serial.println(F(msg)),errorHalt())
#define assert(e) ((e) ? (void)0 : error(""assert: "" #e))
//------------------------------------------------------------------------------
//
void fatalBlink() {
  while (true) {
    if (ERROR_LED_PIN >= 0) {
      digitalWrite(ERROR_LED_PIN, HIGH);
      delay(200);
      digitalWrite(ERROR_LED_PIN, LOW);
      delay(200);
    }
  }
}
//------------------------------------------------------------------------------
void errorHalt() {
  // Print minimal error data.
  // sd.errorPrint(&Serial);
  // Print extended error info - uses extra bytes of flash.
  sd.printSdError(&Serial);
  // Try to save data.
  binFile.close();
  fatalBlink();
}
//------------------------------------------------------------------------------
void printUnusedStack() {
  Serial.print(F(""\nUnused stack: ""));
  Serial.println(UnusedStack());
}
//------------------------------------------------------------------------------
#if USE_RTC
#if USE_RTC == 1
RTC_DS1307 rtc;
#elif USE_RTC == 2
RTC_DS3231 rtc;
#elif USE_RTC == 3
RTC_PCF8523 rtc;
#else  // USE_RTC == type
#error USE_RTC type not implemented.
#endif  // USE_RTC == type
// Call back for file timestamps.  Only called for file create and sync().
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) {
  DateTime now = rtc.now();

  // Return date using FS_DATE macro to format fields.
  *date = FS_DATE(now.year(), now.month(), now.day());

  // Return time using FS_TIME macro to format fields.
  *time = FS_TIME(now.hour(), now.minute(), now.second());

  // Return low time bits in units of 10 ms.
  *ms10 = now.second() & 1 ? 100 : 0;
}
#endif  // USE_RTC
//==============================================================================
#if ADPS0 != 0 || ADPS1 != 1 || ADPS2 != 2
#error unexpected ADC prescaler bits
#endif
//------------------------------------------------------------------------------
inline bool adcActive() {return (1 << ADIE) & ADCSRA;}
//------------------------------------------------------------------------------
// initialize ADC and timer1
void adcInit(metadata_t* meta) {
  uint8_t adps;  // prescaler bits for ADCSRA
  uint32_t ticks = F_CPU*SAMPLE_INTERVAL + 0.5;  // Sample interval cpu cycles.

  if (ADC_REF & ~((1 << REFS0) | (1 << REFS1))) {
    error(""Invalid ADC reference"");
  }
#ifdef ADC_PRESCALER
  if (ADC_PRESCALER > 7 || ADC_PRESCALER < 2) {
    error(""Invalid ADC prescaler"");
  }
  adps = ADC_PRESCALER;
#else  // ADC_PRESCALER
  // Allow extra cpu cycles to change ADC settings if more than one pin.
  int32_t adcCycles = (ticks - ISR_TIMER0)/PIN_COUNT - ISR_SETUP_ADC;

  for (adps = 7; adps > 0; adps--) {
    if (adcCycles >= (MIN_ADC_CYCLES << adps)) {
      break;
    }
  }
#endif  // ADC_PRESCALER
  meta->adcFrequency = F_CPU >> adps;
  if (meta->adcFrequency > (RECORD_EIGHT_BITS ? 2000000 : 1000000)) {
    error(""Sample Rate Too High"");
  }
#if ROUND_SAMPLE_INTERVAL
  // Round so interval is multiple of ADC clock.
  ticks += 1 << (adps - 1);
  ticks >>= adps;
  ticks <<= adps;
#endif  // ROUND_SAMPLE_INTERVAL

  if (PIN_COUNT > BLOCK_MAX_COUNT || PIN_COUNT > PIN_NUM_DIM) {
    error(""Too many pins"");
  }
  meta->pinCount = PIN_COUNT;
  meta->recordEightBits = RECORD_EIGHT_BITS;

  for (int i = 0; i < PIN_COUNT; i++) {
    uint8_t pin = PIN_LIST[i];
    if (pin >= NUM_ANALOG_INPUTS) {
      error(""Invalid Analog pin number"");
    }
    meta->pinNumber[i] = pin;

    // Set ADC reference and low three bits of analog pin number.
    adcmux[i] = (pin & 7) | ADC_REF;
    if (RECORD_EIGHT_BITS) {
      adcmux[i] |= 1 << ADLAR;
    }

    // If this is the first pin, trigger on timer/counter 1 compare match B.
    adcsrb[i] = i == 0 ? (1 << ADTS2) | (1 << ADTS0) : 0;
#ifdef MUX5
    if (pin > 7) {
      adcsrb[i] |= (1 << MUX5);
    }
#endif  // MUX5
    adcsra[i] = (1 << ADEN) | (1 << ADIE) | adps;
    // First pin triggers on timer 1 compare match B rest are free running.
    adcsra[i] |= i == 0 ? 1 << ADATE : 1 << ADSC;
  }

  // Setup timer1
  TCCR1A = 0;
  uint8_t tshift;
  if (ticks < 0X10000) {
    // no prescale, CTC mode
    TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS10);
    tshift = 0;
  } else if (ticks < 0X10000*8) {
    // prescale 8, CTC mode
    TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11);
    tshift = 3;
  } else if (ticks < 0X10000*64) {
    // prescale 64, CTC mode
    TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11) | (1 << CS10);
    tshift = 6;
  } else if (ticks < 0X10000*256) {
    // prescale 256, CTC mode
    TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS12);
    tshift = 8;
  } else if (ticks < 0X10000*1024) {
    // prescale 1024, CTC mode
    TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS12) | (1 << CS10);
    tshift = 10;
  } else {
    error(""Sample Rate Too Slow"");
  }
  // divide by prescaler
  ticks >>= tshift;
  // set TOP for timer reset
  ICR1 = ticks - 1;
  // compare for ADC start
  OCR1B = 0;

  // multiply by prescaler
  ticks <<= tshift;

  // Sample interval in CPU clock ticks.
  meta->sampleInterval = ticks;
  meta->cpuFrequency = F_CPU;
  float sampleRate = (float)meta->cpuFrequency/meta->sampleInterval;
  Serial.print(F(""Sample pins:""));
  for (uint8_t i = 0; i < meta->pinCount; i++) {
    Serial.print(' ');
    Serial.print(meta->pinNumber[i], DEC);
  }
  Serial.println();
  Serial.print(F(""ADC bits: ""));
  Serial.println(meta->recordEightBits ? 8 : 10);
  Serial.print(F(""ADC clock kHz: ""));
  Serial.println(meta->adcFrequency/1000);
  Serial.print(F(""Sample Rate: ""));
  Serial.println(sampleRate);
  Serial.print(F(""Sample interval usec: ""));
  Serial.println(1000000.0/sampleRate);
}
//------------------------------------------------------------------------------
// enable ADC and timer1 interrupts
void adcStart() {
  // initialize ISR
  adcindex = 1;
  isrBuf = nullptr;
  isrOver = 0;
  isrStop = false;

  // Clear any pending interrupt.
  ADCSRA |= 1 << ADIF;

  // Setup for first pin.
  ADMUX = adcmux[0];
  ADCSRB = adcsrb[0];
  ADCSRA = adcsra[0];

  // Enable timer1 interrupts.
  timerError = false;
  timerFlag = false;
  TCNT1 = 0;
  TIFR1 = 1 << OCF1B;
  TIMSK1 = 1 << OCIE1B;
}
//------------------------------------------------------------------------------
inline void adcStop() {
  TIMSK1 = 0;
  ADCSRA = 0;
}
//------------------------------------------------------------------------------
// Convert binary file to csv file.
void binaryToCsv() {
  uint8_t lastPct = 0;
  block_t* pd;
  metadata_t* pm;
  uint32_t t0 = millis();
  // Use fast buffered print class.
  BufferedPrint<file_t, 64> bp(&csvFile);
  block_t binBuffer[FIFO_DIM];

  assert(sizeof(block_t) == sizeof(metadata_t));
  binFile.rewind();
  uint32_t tPct = millis();
  bool doMeta = true;
  while (!Serial.available()) {
    pd = binBuffer;
    int nb = binFile.read(binBuffer, sizeof(binBuffer));
    if (nb < 0) {
      error(""read binFile failed"");
    }
    size_t nd = nb/sizeof(block_t);
    if (nd < 1) {
      break;
    }
    if (doMeta) {
      doMeta = false;
      pm = (metadata_t*)pd++;
      if (PIN_COUNT != pm->pinCount) {
        error(""Invalid pinCount"");
      }
      bp.print(F(""Interval,""));
      float intervalMicros = 1.0e6*pm->sampleInterval/(float)pm->cpuFrequency;
      bp.print(intervalMicros, 4);
      bp.println(F("",usec""));
      for (uint8_t i = 0; i < PIN_COUNT; i++) {
        if (i) {
          bp.print(',');
        }
        bp.print(F(""pin""));
        bp.print(pm->pinNumber[i]);
      }
      bp.println();
      if (nd-- == 1) {
        break;
      }
    }
    for (size_t i = 0; i < nd; i++, pd++) {
      if (pd->overrun) {
        bp.print(F(""OVERRUN,""));
        bp.println(pd->overrun);
      }
      for (size_t j = 0; j < pd->count; j += PIN_COUNT) {
        for (size_t i = 0; i < PIN_COUNT; i++) {
          if (!bp.printField(pd->data[i + j], i == (PIN_COUNT-1) ? '\n' : ',')) {
            error(""printField failed"");
          }
        }
      }
    }
    if ((millis() - tPct) > 1000) {
      uint8_t pct = binFile.curPosition()/(binFile.fileSize()/100);
      if (pct != lastPct) {
        tPct = millis();
        lastPct = pct;
        Serial.print(pct, DEC);
        Serial.println('%');
      }
    }
  }
  if (!bp.sync() || !csvFile.close()) {
    error(""close csvFile failed"");
  }
  Serial.print(F(""Done: ""));
  Serial.print(0.001*(millis() - t0));
  Serial.println(F("" Seconds""));
}
//------------------------------------------------------------------------------
void clearSerialInput() {
  uint32_t m = micros();
  do {
    if (Serial.read() >= 0) {
      m = micros();
    }
  } while (micros() - m < 10000);
}
//------------------------------------------------------------------------------
void createBinFile() {
  binFile.close();
  while (sd.exists(binName)) {
    char* p = strchr(binName, '.');
    if (!p) {
      error(""no dot in filename"");
    }
    while (true) {
      p--;
      if (p < binName || *p < '0' || *p > '9') {
        error(""Can't create file name"");
      }
      if (p[0] != '9') {
        p[0]++;
        break;
      }
      p[0] = '0';
    }
  }
  Serial.print(F(""Opening: ""));
  Serial.println(binName);
  if (!binFile.open(binName, O_RDWR | O_CREAT)) {
    error(""open binName failed"");
  }
  Serial.print(F(""Allocating: ""));
  Serial.print(MAX_FILE_SIZE_MiB);
  Serial.println(F("" MiB""));
  if (!binFile.preAllocate(MAX_FILE_SIZE)) {
    error(""preAllocate failed"");
  }
}
//------------------------------------------------------------------------------
bool createCsvFile() {
  char csvName[NAME_DIM];

  if (!binFile.isOpen()) {
    Serial.println(F(""No current binary file""));
    return false;
  }
  binFile.getName(csvName, sizeof(csvName));
  char* dot = strchr(csvName, '.');
  if (!dot) {
    error(""no dot in binName"");
  }
  strcpy(dot + 1, ""csv"");
  if (!csvFile.open(csvName, O_WRONLY|O_CREAT|O_TRUNC)) {
    error(""open csvFile failed"");
  }
  Serial.print(F(""Writing: ""));
  Serial.print(csvName);
  Serial.println(F("" - type any character to stop""));
  return true;
}
//------------------------------------------------------------------------------
// log data
void logData() {
  uint32_t t0;
  uint32_t t1;
  uint32_t overruns =0;
  uint32_t count = 0;
  uint32_t maxLatencyUsec = 0;
  size_t maxFifoUse = 0;
  block_t fifoBuffer[FIFO_DIM];

  adcInit((metadata_t*)fifoBuffer);
  // Write metadata.
  if (sizeof(metadata_t) != binFile.write(fifoBuffer, sizeof(metadata_t))) {
    error(""Write metadata failed"");
  }
  fifoCount = 0;
  fifoHead = 0;
  fifoTail = 0;
  fifoData = fifoBuffer;
  // Initialize all blocks to save ISR overhead.
  memset(fifoBuffer, 0, sizeof(fifoBuffer));

  Serial.println(F(""Logging - type any character to stop""));
  // Wait for Serial Idle.
  Serial.flush();
  delay(10);

  t0 = millis();
  t1 = t0;
  // Start logging interrupts.
  adcStart();
  while (1) {
    uint32_t m;
    noInterrupts();
    size_t tmpFifoCount = fifoCount;
    interrupts();
    if (tmpFifoCount) {
      block_t* pBlock = fifoData + fifoTail;
      // Write block to SD.
      m = micros();
      if (sizeof(block_t) != binFile.write(pBlock, sizeof(block_t))) {
        error(""write data failed"");
      }
      m = micros() - m;
      t1 = millis();
      if (m > maxLatencyUsec) {
        maxLatencyUsec = m;
      }
      if (tmpFifoCount >maxFifoUse) {
        maxFifoUse = tmpFifoCount;
      }
      count += pBlock->count;

      // Add overruns and possibly light LED.
      if (pBlock->overrun) {
        overruns += pBlock->overrun;
        if (ERROR_LED_PIN >= 0) {
          digitalWrite(ERROR_LED_PIN, HIGH);
        }
      }
      // Initialize empty block to save ISR overhead.
      pBlock->count = 0;
      pBlock->overrun = 0;
      fifoTail = fifoTail < (FIFO_DIM - 1) ? fifoTail + 1 : 0;

      noInterrupts();
      fifoCount--;
      interrupts();

      if (binFile.curPosition() >= MAX_FILE_SIZE) {
        // File full so stop ISR calls.
        adcStop();
        break;
      }
    }
    if (timerError) {
      error(""Missed timer event - rate too high"");
    }
    if (Serial.available()) {
      // Stop ISR interrupts.
      isrStop = true;
    }
    if (fifoCount == 0 && !adcActive()) {
       break;
    }

    // #############################################################################################
    buttonState = digitalRead(MODE_SWITCH);
    if (buttonState == LOW) {
        break;
    }
    // #############################################################################################
  }
  Serial.println();
  // Truncate file if recording stopped early.
  if (binFile.curPosition() < MAX_FILE_SIZE) {
    Serial.println(F(""Truncating file""));
    Serial.flush();
    if (!binFile.truncate()) {
      error(""Can't truncate file"");
    }
  }
  Serial.print(F(""Max write latency usec: ""));
  Serial.println(maxLatencyUsec);
  Serial.print(F(""Record time sec: ""));
  Serial.println(0.001*(t1 - t0), 3);
  Serial.print(F(""Sample count: ""));
  Serial.println(count/PIN_COUNT);
  Serial.print(F(""Overruns: ""));
  Serial.println(overruns);
  Serial.print(F(""FIFO_DIM: ""));
  Serial.println(FIFO_DIM);
  Serial.print(F(""maxFifoUse: ""));
  Serial.println(maxFifoUse + 1);  // include ISR use.
  Serial.println(F(""Done""));
}
//------------------------------------------------------------------------------
void openBinFile() {
  char name[NAME_DIM];
  clearSerialInput();
  Serial.println(F(""Enter file name""));
  if (!serialReadLine(name, sizeof(name))) {
    return;
  }
  if (!sd.exists(name)) {
    Serial.println(name);
    Serial.println(F(""File does not exist""));
    return;
  }
  binFile.close();
  if (!binFile.open(name, O_RDWR)) {
    Serial.println(name);
    Serial.println(F(""open failed""));
    return;
  }
  Serial.println(F(""File opened""));
}
//------------------------------------------------------------------------------
// Print data file to Serial
void printData() {
  block_t buf;
  if (!binFile.isOpen()) {
    Serial.println(F(""No current binary file""));
    return;
  }
  binFile.rewind();
  if (binFile.read(&buf , sizeof(buf)) != sizeof(buf)) {
    error(""Read metadata failed"");
  }
  Serial.println(F(""Type any character to stop""));
  delay(1000);
  while (!Serial.available() &&
         binFile.read(&buf , sizeof(buf)) == sizeof(buf)) {
    if (buf.count == 0) {
      break;
    }
    if (buf.overrun) {
      Serial.print(F(""OVERRUN,""));
      Serial.println(buf.overrun);
    }
    for (size_t i = 0; i < buf.count; i++) {
      Serial.print(buf.data[i], DEC);
      if ((i+1)%PIN_COUNT) {
        Serial.print(',');
      } else {
        Serial.println();
      }
    }
  }
  Serial.println(F(""Done""));
}
//------------------------------------------------------------------------------
bool serialReadLine(char* str, size_t size) {
  size_t n = 0;
  while(!Serial.available()) {
  }
  while (true) {
    int c = Serial.read();
    if (c < ' ') break;
    str[n++] = c;
    if (n >= size) {
      Serial.println(F(""input too long""));
      return false;
    }
    uint32_t m = millis();
    while (!Serial.available() && (millis() - m) < 100){}
    if (!Serial.available()) break;
  }
  str[n] = 0;
  return true;
}
//------------------------------------------------------------------------------
void setup(void) {
  pinMode(MODE_SWITCH, INPUT_PULLUP);
  pinMode(STATUS_LED, OUTPUT);
  analogReference(EXTERNAL); // switch to external reference voltage
  
 
  
  
  if (ERROR_LED_PIN >= 0) {
    pinMode(ERROR_LED_PIN, OUTPUT);
  }
  Serial.begin(9600);
  char c=0;
  //while(!Serial) {}
  //Serial.println(F(""Type any character to begin.""));
  //while(!Serial.available()) {}

  FillStack();

  
  // Read the first sample pin to init the ADC.
  analogRead(PIN_LIST[0]);

#if !ENABLE_DEDICATED_SPI
  Serial.println(F(
    ""\nFor best performance edit SdFatConfig.h\n""
    ""and set ENABLE_DEDICATED_SPI nonzero""));
#endif  // !ENABLE_DEDICATED_SPI
  // Initialize SD.
  if (!sd.begin(SD_CONFIG)) {
    error(""sd.begin failed"");
  }
#if USE_RTC
  if (!rtc.begin()) {
    error(""rtc.begin failed"");
  }
  if (!rtc.isrunning()) {
    // Set RTC to sketch compile date & time.
    // rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    error(""RTC is NOT running!"");
  } else {
    Serial.println(F(""RTC is running""));
  }
  // Set callback
  FsDateTime::setCallback(dateTime);
#endif  // USE_RTC
}
//------------------------------------------------------------------------------
void loop(void) {
  
  printUnusedStack();
  clearSerialInput();

  if (ERROR_LED_PIN >= 0) {
    digitalWrite(ERROR_LED_PIN, LOW);
  }

  buttonState = digitalRead(MODE_SWITCH);

  if (buttonState == HIGH) {
    digitalWrite(STATUS_LED, HIGH);
    createBinFile();
    logData();
    if (createCsvFile()) {
      binaryToCsv();
    }
    digitalWrite(STATUS_LED, LOW);
  }
  else if (buttonState == LOW) {
    digitalWrite(STATUS_LED, HIGH);
    delay(125);
    digitalWrite(STATUS_LED, LOW);
    delay(125);
  }
}
#else  // __AVR__
#error This program is only for AVR.
#endif  // __AVR__"
arduino logs4,I hope somebody can help me with this problem. Thank you really much!
arduino logs4,Kind regards
arduino logs4,This topic was automatically closed 180 days after the last reply. New replies are no longer allowed.
arduino logs4,Related topics
arduino logs4,"Powered byDiscourse, best viewed with JavaScript enabled"
arduino logs14,HMI Arduino Monitoring and Control Automation Project
arduino logs14,Table of Contents
arduino logs14,Description:
arduino logs14,"HMI Arduino Monitoring and Control Automation Project-Arduino HMI TFT LCD Module Electrical Load controller- The 10.1” HMI Intelligent TFT LCD Module used in this video is sponsored by the Stone Technologies. Stone Technologies is a professional Manufacturer of HMI Intelligent TFT LCD modules.  Depending on the application the Stone Technologies offers Industrial Type, Advanced type, and Civil Type Intelligent TFT LCD modules available in different sizes. The one I am using in this series of videos is the Civil Type 10.1 inch HMI display Module. For more information visitstoneitech.com."
arduino logs14,"In this article, you will learn how to make an industrial monitoring and control system using the HMI TFT LCD Touchscreen Module and Arduino Uno. In this project, a sensor connected with the Arduino Uno can be monitored in real-time using the HMI Display. Two 220Vac light bulbs are connected with the Arduino which can be controlled directly from the HMI touchscreen display. This project is based on two-way Serial communication. The control commands from the HMI display are sent serially to the Arduino and also the Sensor data from the Arduino is sent serially to the HMI display, where the sensor data is stored in the specified memory location and displayed on the specific user interface."
arduino logs14,"To keep things simpler and understandable, I connected a variable resistor or Potentiometer as the sensor with the Arduino. You can replace this sensor with any other type of sensor you want."
arduino logs14,"This is my 5thTutorial on the Arduino and HMI TFT LCD Module. This project is entirely based on myprevious 4 tutorials. I highly recommend first, read my previous articles and then you can resume from here."
arduino logs14,"In tutorial number1 I explained how to design a graphical user interface using the images designed in Adobe Photoshop. How to use the button function, data variable function, Hardware parameter function, and how to use Drag adjustment, and Slider Scale function for controlling the screen brightness."
arduino logs14,"In tutorialnumber 2I explained the commands used for reading and writing, how to control the user interface without pressing the on-screen buttons… how to access the brightness control register, and so on."
arduino logs14,"In tutorialnumber 3, I explained how to monitor a sensor in real-time using Arduino and the HMI Touchscreen TFT LCD display module. The sensor values are displayed in the boxes."
arduino logs14,"In TutorialNumber 4, you will learn how to control electrical loads using 10.1” HMI TFT LCD Display Module and Arduino Uno. The control commands are sent serially from the HMI Touchscreen display Module through the max232 board to the Arduino. The Arduino then Turns ON and Turns OFF the desired load depending on the command. Using the same button you can Turn ON and Turn OFF the load, the buttons used on the HMI GUI works as the Toggle switches. For the demonstration purposes, I have connected 220Vac light bulbs which you can replace with other AC or DC loads."
arduino logs14,"Note: Be very careful while working on the 220Vac as it can be really dangerous, wear protective gloves. Make this project at your own risk."
arduino logs14,"This is the Final, main screen image. If you have read my previous articles, at this point you should know that this project is the combination of my previous two projects. If you click on the Sensors button, it will take you to the Sensors monitoring user interface and if you click on the control button it will take you to the control panel user interface as you can see in the image below."
arduino logs14,"This image is the main image of the control panel, while the image given below is the image which will be used as the button click effect."
arduino logs14,Below is the image of the Sensor Monitoring user interface.
arduino logs14,"In this tutorial, we will cover"
arduino logs14,Without any further delay let’s get started!!!
arduino logs14,Amazon Links:
arduino logs14,Arduino Nano USB-C Type (Recommended)
arduino logs14,HMI TFT LCD MODULES
arduino logs14,12v Adaptor:
arduino logs14,MAX232 board:
arduino logs14,RS232 Cable:
arduino logs14,2-channel relay module:
arduino logs14,Arduino Uno
arduino logs14,*Disclosure: These are affiliate links. As an Amazon Associate I earn from qualifying purchases.
arduino logs14,Arduino and HMI based Industrial Automation:
arduino logs14,"A perfect Industrial Automation project is the one that can Monitor different processes and control different loads automatically. The main advantage of the HMI “Human Machine Interface” system is that we can control hundreds of electrical loads/machines and monitor hundreds of sensors all at the same time using only one HMI display. Imagine if you need to control 20 machines, this way you will need 20 buttons with a lot of wiring. The same thing can be done using the HMI Touchscreen display; we can design different control panels in the HMI which can be used to control different processes."
arduino logs14,"So the project under discussion can be used at the industrial level, this can be used for the home automation, this can be used in colleges, Hospitals, Universities, Railways, Airports, etc."
arduino logs14,HMI Arduino Monitoring and ControlProject Circuit Diagram:
arduino logs14,"As you can see the circuit diagram is really simple. The 10.1 inch TFT LCD Module and Arduino is powered up using a 12v adaptor or battery. All the grounds are connected together. The DIN pin of the TFT LCD module which is data-in is connected with the TX pin of the db9, the DOUT pin which is the data-out pin is connected with the RX pin of the DB9. The VCC pin of the MAX232 board is connected with the Arduino’s 5 volts, the ground of the MAX232 is connected with the Arduino’s ground, while the TX and RX pins of the MAX232 Board are connected with the Arduino’s pin number 2 and Pin number 3. Later in the programming, I will explain, why am I using pin number 2 and pin number 3 as the Serial Port."
arduino logs14,"A two-channel relay module is connected with the Arduino’s pin number 12 and pin number 13. You can use a readymade relay module or follow the same connections and build the one by yourself. It’s very simple. The relays used in this project are of the type SPDT “Single Pole and Double Throw”. This type of relay has a total of 5 pins, two relay coil pins, common, normally open, and normally closed. The one side of the relay coil is connected with the 12 volts while the other side of the relay coil is connected with the collector of the 2n2222 NPN transistor. The emitter is connected with the ground, while the base is connected with the 10k ohm resistor. The 10k ohm resistor and the transistor together are used to control the relay which is also called the relay driver. If you want to learn in detail about the electro-mechanical relays, and relay driver design calculations then read my article available on www.electroniclinic.com you can find a link in the description."
arduino logs14,The middle leg of the Potentiometer or variable resistor is connected with the Analog pin A0. While the other two legs are connected with the Arduino’s 3.3 Volts and Gnd.
arduino logs14,"This is a seven-channel relay module, but out of these 7 relays, I will be using only two relays. One relay will be connected with the Arduino’s digital pin 12 and the other relay will be connected with the Arduino’s digital pin 13."
arduino logs14,Arduino Interfacing with MAX232 and HMI TFT LCD module:
arduino logs14,"The HMI TFT LCD display module connection with the MAX232 board and Arduino remain the same as explained in my previous tutorial, the link is given above. This time only the relay module is added. All the connections are done as per the circuit diagram. In the above image, a variable resistor is missing, which you can connect by following the same connections as explained in the circuit diagram."
arduino logs14,HMI TFT LCD Module Control Panel GUI:
arduino logs14,"As you can see in the images above, I am using the same GUI, this time I added the control button on the main screen. So, when I click on the control button it takes me to the image8 which is the control panel user interface."
arduino logs14,"This time I used the Return pressed key value function. I selected the variable memory as 0011, which is same for all the buttons. But the keys values are different. For the load1 I selected 0001, for the load2 I selected 0002, and so on up to 0005. You can select any Keys value you want. Finally, when I click on the Back button it takes me to the main screen."
arduino logs14,"On the sensor user interface, I selected the variable memory 0002 for the Sensor1 and 0006 for the Sensor 2 which you can see in the Arduino programming given below. So that’s all about the GUI of the HMI TFT LCD Display Module. Now, let’s have a look at the Arduino programming."
arduino logs14,HMI Arduino Monitoring and ControlProject Programming:
arduino logs14,HMI Arduino Monitoring and ControlProgram Explanation:
arduino logs14,#include <SoftwareSerial.h>
arduino logs14,"SoftwareSerial max232(2,3);"
arduino logs14,I started off with the SoftwareSerial library. The SoftwareSerial is basically a library that enables the Serial Communication on digital pins other than the Arduino’s default Serial Port. Using the SoftwareSerial library we can create multiple software serial ports with speeds up to 115200bps.
arduino logs14,"In this particular project, you can also use the Arduino’s default Serial port which is on Pin number 0 and pin number 1. But trust me this will really make you tired, because each time you upload a program, you will have to remove the wires. That’s why I always say never use the Arduino’s default Serial Port for the communication with other devices. The Arduino’s default Serial Port should only be used for debugging purposes."
arduino logs14,I created a software Serial Port with the name max232 on the Arduino’s pin number 2 and pin number 3. Pin number 2 is the RX while pin number 3 is the TX.
arduino logs14,#define Sensor1_H               0x00
arduino logs14,#define Sensor1_L               0x02
arduino logs14,#define Sensor2_H               0x00
arduino logs14,#define Sensor2_L               0x06
arduino logs14,Then I defined the Sensors High and Low bytes. These are the same address used in the GUI. 0x0002 and 0x0006.
arduino logs14,Then I defined a pin for the potentiometer. A potentiometer is connected with the Analog Pin A0 of the Arduino.
arduino logs14,int vr = A0;
arduino logs14,"unsigned char sensor1_send[8]= {0xA5, 0x5A, 0x05, 0x82, Sensor1_H, Sensor1_L, 0x00, 0x00};"
arduino logs14,"unsigned char sensor2_send[8]= {0xA5, 0x5A, 0x05, 0x82, Sensor2_H, Sensor2_L,  0x00, 0x00};"
arduino logs14,These are the same commands which I have already explained in my previous tutorial.
arduino logs14,char data;
arduino logs14,String mystring;
arduino logs14,int load1 = 13;
arduino logs14,int load1f = 0;
arduino logs14,int load2 = 12;
arduino logs14,int load2f = 0;
arduino logs14,Then I defined a variable data of the type character. Then I defined another variable mystring of the type String. Then I defined pins for the relays which are connected with the Arduino’s pin number 13 and 12. The load1f and load2f will be used as the flags.
arduino logs14,void setup()
arduino logs14,{
arduino logs14,Serial.begin(115200);
arduino logs14,max232.begin(115200);
arduino logs14,"pinMode(vr,INPUT);"
arduino logs14,"pinMode(load1, OUTPUT);"
arduino logs14,"pinMode(load2, OUTPUT);"
arduino logs14,"digitalWrite(load1, LOW);"
arduino logs14,"digitalWrite(load2, LOW);"
arduino logs14,}
arduino logs14,"In this void setup function, I activated the serial communication and set the sensor as input and  loads as OUTPUT."
arduino logs14,Then starts the void loop function.
arduino logs14,if (max232.available()>0)
arduino logs14,{
arduino logs14,data = max232.read();
arduino logs14,mystring = mystring + byte(data) ;
arduino logs14,delay(10);
arduino logs14,}
arduino logs14,"The above condition means if the Arduino has received data from the HMI TFT LCD display Module, simply read the max232 port store the character in variable data. Convert the received character into the byte and add it with the mystring to make the complete message."
arduino logs14,if (max232.available() == 0)
arduino logs14,{
arduino logs14,//Serial.println(mystring);
arduino logs14,load1control();
arduino logs14,load2control();
arduino logs14,// Sensors data to HMI Intelligent TFT LCD module
arduino logs14,int sensor1 = analogRead(vr);
arduino logs14,int sensor2 = -53;
arduino logs14,sensor1_send[6] = highByte(sensor1);
arduino logs14,sensor1_send[7] = lowByte(sensor1);
arduino logs14,"max232.write(sensor1_send,8);"
arduino logs14,delay(100);
arduino logs14,sensor2_send[6] = highByte(sensor2);
arduino logs14,sensor2_send[7] = lowByte(sensor2);
arduino logs14,"max232.write(sensor2_send,8);"
arduino logs14,delay(100);
arduino logs14,mystring = “”;
arduino logs14,}
arduino logs14,"This condition means if there is no more data on the max232 port then execute the load1control() and load2control() functions. Then we read the sensor and store the value variable Sensor1 which is of the type integer. In sensor2 we store a random value of -53, to check if we can display the negative value. The we divide the sensors values in high bytes and low bytes and the store the results at desired locations in the array. Then finally we empty the mystring value."
arduino logs14,void load1control()
arduino logs14,{
arduino logs14,if (mystring.endsWith(“101”)&& (load1f == 0))
arduino logs14,{
arduino logs14,mystring = “”;
arduino logs14,if(digitalRead(load1) == LOW)
arduino logs14,{
arduino logs14,"digitalWrite(load1,HIGH);"
arduino logs14,Serial.println(“load1 High”);
arduino logs14,}
arduino logs14,load1f = 1;
arduino logs14,}
arduino logs14,if (mystring.endsWith(“101”) && (load1f == 1))
arduino logs14,{
arduino logs14,mystring = “”;
arduino logs14,if(digitalRead(load1) == HIGH)
arduino logs14,{
arduino logs14,"digitalWrite(load1,LOW);"
arduino logs14,Serial.println(“load1 LOW”);
arduino logs14,}
arduino logs14,load1f = 0;
arduino logs14,}
arduino logs14,}
arduino logs14,"Load1control() function is a user defined function, it has no return type and doesn’t take any argument as the input."
arduino logs14,if (mystring.endsWith(“101”)&& (load1f == 0))
arduino logs14,"This condition means if the mystring ends with the 101 and load1f is 0 then empty the mystring variable, and check if the load is off then turn on the load. And change the load1f status from 0 to 1."
arduino logs14,if (mystring.endsWith(“101”) && (load1f == 1))
arduino logs14,"If the same button is pressed again and the load1f is equal to 1, empty the mystring variable , and if the load1 is high then turn OFF the load1, and again change the load1f status from 1 to 0."
arduino logs14,Similarly for the load2.
arduino logs14,The same way you can do it for all the 5 buttons.
arduino logs14,For the complete step by step explanation and practical demonstration watch videos give below. So now you know this code is the combination of the sensor monitoring and load controller projects.
arduino logs14,Related Videos:
arduino logs14,Arduino HMI Sensor Monitoring:
arduino logs14,Arduino HMI 220Vac Load Controller:
arduino logs14,Arduino HMI GUI Designing:
arduino logs14,Engr. Shahzada Fahad
arduino logs14,Related Articles
arduino logs14,Digital 360° Tilt Sensor with Arduino and ESP32
arduino logs14,Underwater Ultrasonic Sensor with Arduino
arduino logs14,"Weighing Scale using Arduino, HX711, and a Load Cell"
arduino logs14,Force Sensitive Resistor FSR with Arduino
arduino logs14,One Comment
arduino logs14,This looks like a display from the companyhttps://www.stoneitech.com/I have one of these screens in my hands. I’m still getting familiar with their gui software.
arduino logs14,Leave a ReplyCancel reply
arduino logs14,Your email address will not be published.Required fields are marked*
arduino logs14,Comment*
arduino logs14,Name*
arduino logs14,Email*
arduino logs14,Website
arduino logs14,"Save my name, email, and website in this browser for the next time I comment."
arduino logs14,Δ
arduino logs14,"pH meter Arduino, pH Meter Calibration, DIYMORE pH Sensor Arduino Code"
arduino logs14,Arduino Libraries Download and Projects they are used in “Project codes”
arduino logs14,"Decoder, 3 to 8 Decoder Block Diagram, Truth Table, and Logic Diagram"
arduino logs14,We are using cookies to give you the best experience on our website.
arduino logs14,You can find out more about which cookies we are using or switch them off insettings.
arduino logs14,This website uses cookies so that we can provide you with the best user experience possible. Cookie information is stored in your browser and performs functions such as recognising you when you return to our website and helping our team to understand which sections of the website you find most interesting and useful.
arduino logs14,Strictly Necessary Cookie should be enabled at all times so that we can save your preferences for cookie settings.
arduino logs14,"If you disable this cookie, we will not be able to save your preferences. This means that every time you visit this website you will need to enable or disable cookies again."
arduino logs15,"GSM based Water Level Monitoring and Control using Arduino, Sim900A, and Ultrasonic Sensor"
arduino logs15,Table of Contents
arduino logs15,GSM Based Water Level Monitoring:
arduino logs15,"GSM based Water Level Monitoring and Control using Arduino, Sim900A, and Ultrasonic Sensor-In today’s article, you will learn how to makeGSM based Water Level Monitoring and control systemusing Arduino Nano,GSM SIM900A module, and HC-SR04 Ultrasonic Sensor."
arduino logs15,"By the way, I have written many articles related to thewater level monitoringand control system, in which I have used different technologies to monitor water levels and control water pumps. For example,"
arduino logs15,"Wireless Water level monitoring using Long-range LoRa transceiver modules, with the help of thisprojectwater level inside a tank can be monitored within a range of 5 Kilometers."
arduino logs15,"IoT based water level monitoring and control system using ESP32 WiFi + Bluetooth module, Waterproof ultrasonic Sensor, and the new Blynk V2.0. With the help of thiswater level monitoring system, you can monitor the water level inside a tank from anywhere in the world."
arduino logs15,I also made a water level monitoring system using aPressure Sensorand displayed the water level information on LEDs.
arduino logs15,"If you’re interested in exploring technologies beyond GSM, such as LoRa and IoT platforms, I highly recommend read my previous articles on theWater Level Monitoring and Control Systems."
arduino logs15,Amazon Links:
arduino logs15,Arduino Nano USB-C Type (Recommended)
arduino logs15,HC-SR04 Ultrasonic Sensor
arduino logs15,GSM SIM900A
arduino logs15,*Disclosure: These are affiliate links. As an Amazon Associate I earn from qualifying purchases.
arduino logs15,"Anyway, let’s get back to our project."
arduino logs15,"For the demonstration purposes, I am going to monitor the water level inside a bucket which you can think of as the water tank and you can think of this 110/220Vac Bulb as the water Pump."
arduino logs15,The Ultrasonic sensor is right on top of the water tank. Everything is in place and it looks good; so let’s go ahead and power up the entire system.
arduino logs15,"As usual, I am using my designedArduino and LoRa based development board, because I specially designed it for projects like these. I am not using a separate power supply for the GSM SIM900A module, because my board has a 5V and 3A power supply which is more than enough to power up the Arduino, GSM, and relays."
arduino logs15,If you don’t want to make such a development board then you can make a dedicated5V and 3A power supply.
arduino logs15,"When the 110/220Vac supply is connected never touch the relay contacts as it can be dangerous. So, as far as possible, wear protective gloves and perform such high voltage experiments in the presence of a companion or someone having basic knowledge of the electrical systems."
arduino logs15,"When the water level in the water tank drops below a certain level, the Arduino starts sending alert messages with the help of GSM module."
arduino logs15,"In the programming, I’ve utilized a timer to ensure that alert messages are generated every 2 minutes. Having an alert message every 2 minutes could indeed be quite annoying. However, it’s important to note that this time duration is adjustable, and I will explain how to modify it later in this article."
arduino logs15,"We have two options, we can turn ON the water pump automatically or we can do it manually. In my case, I don’t want the water pump to turn ON automatically. Anyway, let’s write a message to turn ON the water pump."
arduino logs15,"abc123 is a password to add a little bit of security so that nobody else can control the water pump, you can use any combination of letters, characters, and numbers. Then the word relay, and command on. The % signs are used to separate these parameters. I have already explained this in my GSM based Home automation project. Anyway, the message is ready and let’s send it to control the water pump."
arduino logs15,"You can see the bulb just turned ON which represents a water pump. Now, it will stay ON until the water tank is filled. I filled the Bucket and then the Light “Water Pump” automatically turned OFF."
arduino logs15,"I have also added another feature that is; you can check the water level inside a water tank at anytime, all you need is to write a message which consists of a password and the word level."
arduino logs15,"Anyway, before I send this message, first let’s remove some water. Now, let’s send the message and check the level."
arduino logs15,"This is pretty amazing; with this feature you will never run out of water because you can check the water level at anytime and you can turn ON the water pump whenever you want, you don’t need to wait for the water tank to get completely empty."
arduino logs15,"GSM based Water Level Monitoring, Circuit:"
arduino logs15,Connect the 5V TXD and RXD pins of the GSM SIM900A module to the Arduino digital pins D9 and D10. Connect the 5V and GND pins of the GSM module to the 5V and 3A power supply Vin and GND. The power supply 5V and GND are connected to the Arduino Vin and GND pins.
arduino logs15,Connect the VCC and GND pins of the HC-SR04 Ultrasonic Sensor to the Arduino Vin and GND pins. Connect the Trigger and Echo pins of the Ultrasonic Sensor to the Arduino D2 and D3 pins respectively.
arduino logs15,Connect the VCC and GND wires of the relay module to the 5V and GND. Connect the relay input pin to the Arduino digital pin D4. The Vin and Gnd wires should be connected to a 5V and 3A power supply.
arduino logs15,"You can follow this circuit diagram if you want to make your own 5V and 3A power supply. Now, let’s go ahead and take a look at the programming."
arduino logs15,"GSM based Water Level Monitoring, Programming:"
arduino logs15,About the code:
arduino logs15,"I started off by adding the SoftwareSerial.h header file. Using the SoftwareSerial we can define multiple serial ports. You know, in Arduino Uno and Arduino Nano we have only one serial port that is available on pins 0 and 1. As I want to use the Arduino’s default serial port for the debugging purposes; so that’s why I defined another serial port for the GSM SIM900A module."
arduino logs15,"Next, I defined pins for the Trigger, Echo, and Relay."
arduino logs15,"I also defined some variables for storing the water level value, password, incoming message, and alert message."
arduino logs15,I also defined some variables for the timer.
arduino logs15,"Code inside the setup() function is exactly the same as explained in my previous GSM based home automation project. So, let’s go to the loop() function."
arduino logs15,"Using the millis() function, we calculate the seconds and minutes."
arduino logs15,"So, when the minutes are greater than or equal to 2,  we set the Zero_Level_Flag to false which signals the Arduino to send an alert message. When the alert message is sent the Zero_Level_flag is again set to true, and this whole process starts again."
arduino logs15,"All the other instructions are from myGSM based home automation project, all these instructions are used to split the string message and store the corresponding values in variables. Then we use these different parameters for requesting the water level and for controlling the water pump. I highly recommend you guys should watch my video on theGSM based home automation project. Anyway, that’s all for now."
arduino logs15,Watch Video Tutorial:
arduino logs15,Engr. Shahzada Fahad
arduino logs15,Related Articles
arduino logs15,Digital 360° Tilt Sensor with Arduino and ESP32
arduino logs15,Underwater Ultrasonic Sensor with Arduino
arduino logs15,"Weighing Scale using Arduino, HX711, and a Load Cell"
arduino logs15,Force Sensitive Resistor FSR with Arduino
arduino logs15,3 Comments
arduino logs15,♥️♥️♥️ Sir Your project is best for Educational and professional knowledge. I really like your projects regularly.*I want to know that this is a COMPLETE PROJECT can I use for my home 🏠.Means no other code required..Kindly update as soon as possible.
arduino logs15,Would like to buy GSM based water level indicator for 10 numbers overhead water storage tanks in my society.
arduino logs15,Does the SIM900A module connects directly to the arduino ? because I have read that the required current for the GSM module is 2A and the Arduino UNO cannot provide that much current. How are you using the SIM900A without any external power supply with the arduino ?
arduino logs15,Leave a ReplyCancel reply
arduino logs15,Your email address will not be published.Required fields are marked*
arduino logs15,Comment*
arduino logs15,Name*
arduino logs15,Email*
arduino logs15,Website
arduino logs15,"Save my name, email, and website in this browser for the next time I comment."
arduino logs15,Δ
arduino logs15,"pH meter Arduino, pH Meter Calibration, DIYMORE pH Sensor Arduino Code"
arduino logs15,Arduino Libraries Download and Projects they are used in “Project codes”
arduino logs15,"Decoder, 3 to 8 Decoder Block Diagram, Truth Table, and Logic Diagram"
arduino logs15,We are using cookies to give you the best experience on our website.
arduino logs15,You can find out more about which cookies we are using or switch them off insettings.
arduino logs15,This website uses cookies so that we can provide you with the best user experience possible. Cookie information is stored in your browser and performs functions such as recognising you when you return to our website and helping our team to understand which sections of the website you find most interesting and useful.
arduino logs15,Strictly Necessary Cookie should be enabled at all times so that we can save your preferences for cookie settings.
arduino logs15,"If you disable this cookie, we will not be able to save your preferences. This means that every time you visit this website you will need to enable or disable cookies again."
arduino logs16,Arduino GSM Motor speed controller and monitoring System
arduino logs16,Table of Contents
arduino logs16,Arduino GSM Motor Speed Controller:
arduino logs16,"Arduino GSM Motor speed controller and monitoring-In today’s article, you will learn how to make a highly securedMotor speed controller and Monitoring systemusingArduinoand aGSM moduleSIM900A."
arduino logs16,"Before, I practically demonstrate its functionality; first I would like to talk about some basic things which I believe as a beginner you should know."
arduino logs16,"As usual, I am using my designed Arduino Nano Development board but you can also use Arduino Uno. The reason I am using this development board is because it has this 5V and 3A regulated power supply."
arduino logs16,"I am going to need this power supply to power up the GSM Sim900A module. Because, the Arduino onboard voltage regulator isn’t powerful enough to supply the required current to the GSM module. So, this is the main reason I built myself this Arduino development board and now I can power up GSM modules,high torque servos, and other input and output devices."
arduino logs16,"So, just drop the idea of using the Arduino Nano or Arduino Uno onboard voltage regulator to power up the GSM module, because if you do so,"
arduino logs16,"So, if you want your GSM module to work smoothly; get yourself a readymade 5V and 2 to 3A power supply, and if you are good at making things then you can make thisdevelopment board, or you can only make a dedicated5V and 3A power supply."
arduino logs16,"Anyway, instead of using the 320A Brushed DC Motor controller; you can useany DC motor controllerand the same thing applies to the 775 Dc Motor, you can start with any small DC motor, and even if you want you can also use a Brushless DC motor but then you will have to use this type of the ESC as you can see in the image below “30A”."
arduino logs16,I am going to use my created4S lithium Ion batteryto power up the 320A Motor driver and I am going to power up the Arduino board using a 12V adaptor.
arduino logs16,"Well, I can power up this entire system using a 4S lithium Ion Battery, but it’s a good practice to keep the motor supply separate."
arduino logs16,"If you remember, in the start of the article, I said this is the highly secured motor speed controller and monitoring system."
arduino logs16,"Because, to control the motor speed, first you will have to enter the password. This password can consist of letters, numbers, and special characters. Without a password, nobody would be able to control the motor speed or request the motor speed value from the Arduino."
arduino logs16,"Then the word dcmotor, and finally the speed value. The speed value should be between 0 and 100. 0 means OFF and 100 means full motor speed."
arduino logs16,"You might be thinking why am I using percentage signs; well I am doing this because when the Arduino receives the message. Then the Arduino can easily split the message using % sign as the delimiter. Anyway, the message is ready, and I am going to send it to the Arduino."
arduino logs16,Note: for the practical demonstration watch the video tutorial given at the end of this article.
arduino logs16,"During the practical demonstration, I run the motor at 50% speed, 10% speed, 100%, and I also turned off the motor."
arduino logs16,"Next, I demonstrated, how to request the motor speed value from the Arduino, for this, first I set the motor speed to 80%."
arduino logs16,"Now, to request the speed value, for this, first we type the password, then the word request   followed by the word speed. When the Arduino receives this message, it knows the person is requesting the motor speed value. The message is ready and let’s send it to the Arduino."
arduino logs16,"This value is in microseconds and falls within the range of 1500 to 2000. A value of 1500 microseconds turns off the motor, while a value of 2000 microseconds sets the motor speed to 100%. In the programming, the map function has been utilized to convert a range of 0 to 100 into the range of 1500 to 2000. Anyway, now let’s go ahead and take a look at the connections."
arduino logs16,Amazon Links:
arduino logs16,Arduino Nano USB-C Type (Recommended)
arduino logs16,GSM Sim900A Module
arduino logs16,775 DC Motor
arduino logs16,320A Brushed Motor Controller
arduino logs16,*Disclosure: These are affiliate links. As an Amazon Associate I earn from qualifying purchases.
arduino logs16,For the Beginners:
arduino logs16,If you guys are new to the Arduino then I highly recommend read my articles on
arduino logs16,Arduino GSM Motor Controller Circuit Diagram:
arduino logs16,The VCC and GND wires of the Brushed Motor Controller are connected to the Vin and GND pins. The signal Wire is connected to the Arduino PWM Pin 3.
arduino logs16,"These Red and Black wires with the XT60 connector are used to connect a 3S, 4S, or 5S Lipo or Lithium Ion battery to power up the DC Motor. In my case, I have connected the 775 Brushed DC motor with the controller output wires."
arduino logs16,Connect the power supply pins of the GSM Sim900a module to the regulated 5v and 3A power supply. The 5V and GND wires from the 5V and 3A power supply are connected to the Arduino Vin and Gnd pins.
arduino logs16,Connect the GSM module TXD 5V pin to the Arduino digital pin D9 and connect the RXD 5V pin to the Arduino digital pin D10.
arduino logs16,"For the 5V and 3A power supply, you can follow this circuit diagram. Now, let’s go ahead and take a look at the programming."
arduino logs16,Arduino GSM Motor Controller Programming:
arduino logs16,"I started off by adding the SoftwareSerial.h and Servo.h header files. With the help of SoftwareSerial; I can defined multiple serial ports. As you can see using the SoftwareSerial I have defined another serial port using the Arduino pins 9 and 10. I could also connect the GSM module to the Arduino default Serial port, but I used it for the debugging purposes."
arduino logs16,A “Servo” object named “ESC” is created to control the speed of DC motor using 320A Brushed Motor controller.
arduino logs16,I also defined a variable mspeed of the type integer. I have used it to store the Mapped value.
arduino logs16,"I also defined a variable passcode of the type String, so that I can use a combination of letters, numbers, and characters. So, my password is “abc123”. If I want to change my password then I can simply change this passcode."
arduino logs16,I also defined variables for storing the incoming and outgoing messages.
arduino logs16,"Code in the void setup() function is exactly the same, as used in my previousGSM based Home Automation project. So, let’s go to the loop() function."
arduino logs16,"We simply check if a message is received then store the entire string message in the variable incoming, and then using the % sign as the delimiter we split the message, and store the corresponding values in variables password, mtype, and mvalue."
arduino logs16,And then I have used two conditions that check if the user want to set the motor speed or if the user is requesting the motor speed value.
arduino logs16,sendSMS() function is a user-defined function and it has no return type and it takes one argument as the input and it’s the text message we want to send. Make sure you change this number.
arduino logs16,"The getValue() function is used to split the message using any character as the delimiter. So, that’s all about the programming."
arduino logs16,Watch Video Tutorial:
arduino logs16,Engr. Shahzada Fahad
arduino logs16,Related Articles
arduino logs16,Digital 360° Tilt Sensor with Arduino and ESP32
arduino logs16,Underwater Ultrasonic Sensor with Arduino
arduino logs16,"Weighing Scale using Arduino, HX711, and a Load Cell"
arduino logs16,Force Sensitive Resistor FSR with Arduino
arduino logs16,Leave a ReplyCancel reply
arduino logs16,Your email address will not be published.Required fields are marked*
arduino logs16,Comment*
arduino logs16,Name*
arduino logs16,Email*
arduino logs16,Website
arduino logs16,"Save my name, email, and website in this browser for the next time I comment."
arduino logs16,Δ
arduino logs16,"pH meter Arduino, pH Meter Calibration, DIYMORE pH Sensor Arduino Code"
arduino logs16,Arduino Libraries Download and Projects they are used in “Project codes”
arduino logs16,"Decoder, 3 to 8 Decoder Block Diagram, Truth Table, and Logic Diagram"
arduino logs16,We are using cookies to give you the best experience on our website.
arduino logs16,You can find out more about which cookies we are using or switch them off insettings.
arduino logs16,This website uses cookies so that we can provide you with the best user experience possible. Cookie information is stored in your browser and performs functions such as recognising you when you return to our website and helping our team to understand which sections of the website you find most interesting and useful.
arduino logs16,Strictly Necessary Cookie should be enabled at all times so that we can save your preferences for cookie settings.
arduino logs16,"If you disable this cookie, we will not be able to save your preferences. This means that every time you visit this website you will need to enable or disable cookies again."
arduino logs13,"CO2 Sensor with Arduino, indoor air quality monitoring system, co2 ppm meter"
arduino logs13,Table of Contents
arduino logs13,CO2 Sensor Arduino:
arduino logs13,"NDIR CO2 Sensor, Carbon Dioxide Sensor for indoor air quality monitoring using Arduino-The concentration of carbon dioxide (CO2) in the Earth’s atmosphere has been increasing primarily due to human activities, such as the burning of fossil fuels (coal, oil, and natural gas), deforestation, and certain industrial processes. This increase in CO2 emissions has been linked to global warming and climate change."
arduino logs13,"Before the Industrial Revolution (mid-18th to mid-19th century), the atmospheric concentration of CO2 was relatively stable at around 280ppm (parts per million). However, since then, the concentration of CO2 has risen significantly. In September 2021, the concentration of CO2 in the atmosphere was about 415 ppm, which represents a significant increase of more than 45% compared to pre-industrial levels. But now in 2023 the concentration of CO2 in the atmosphere is around 424 ppm which is the highest value since 2.1 million years. The raise of atmospheric CO2 content to some extent results in global climate change. It’s important to note that the exact concentration of CO2 can vary slightly depending on the location and time of measurement."
arduino logs13,How to accurately measure carbon dioxide gas concentration is becoming a universal research topic.
arduino logs13,"DFRobot released its latest high-precisioninfrared CO2 sensor. The effectively measuring range is from 400 to 5000ppm. This sensor is based on non-dispersive infrared (NDIR) technology and has good selectivity and oxygen-free dependency. Besides, its service life could up to 5 years!"
arduino logs13,"As usual, before trying something complex, first, I am going to start with a getting started tutorial, so that you guys can better understand how to use this beautiful piece of hardware. So, in this tutorial, I am going to make a simpleindoor air quality monitoring systemusing the Gravity Infrared CO2 Sensor V2.0, Arduino, an i2c supported SSD1306 Oled display module, and a 5V buzzer."
arduino logs13,"I am going to use my latestArduino and LoRa based development board, because it already has all the required components and I only need to connect this CO2 sensor."
arduino logs13,"According to the American Society of Heating, Refrigerating, and Air-Conditioning Engineers (ASHRAE) Standard 62.1, the recommend CO2 concentration for occupied spaces is below 1000 ppm. However, achieving lower level, such as below 800 ppm or even 600 ppm, is often desirable for improved air quality."
arduino logs13,"So, I am going to use this CO2 sensor for measuring the CO2 levels inside my room and studio. This can help me determine if the ventilation is adequate. As you might know, when the concentration of CO2 in the air exceeds 1000 ppm, it can have several effects; for example, reduced concentration, attention, and decision-making abilities. This can affect productivity and performance, particularly in environments such as offices, classrooms, and workplaces."
arduino logs13,"I want to keep theCO2 concentrationin my workshop as low as possible. So, I am going to keep theCO2 ppmvalue below 600. And if it exceeds 600ppm the buzzer will turn ON. And then I can go ahead and open the windows or turn ON the exhaust fan, etc."
arduino logs13,"So, without any further delay, let’s get started!!!"
arduino logs13,Amazon Links:
arduino logs13,Arduino Nano USB-C Type (Recommended)
arduino logs13,Co2 sensor
arduino logs13,SSD1306 Oled display Module
arduino logs13,5V Buzzer
arduino logs13,*Disclosure: These are affiliate links. As an Amazon Associate I earn from qualifying purchases.
arduino logs13,Gravity Infrared CO2 Sensor V2.0
arduino logs13,Technical Specifications:
arduino logs13,Operating Voltage: 4.5 ~ 5.5V
arduino logs13,Output: Analog (0.4 ~ 2V)
arduino logs13,Measurement Principle: NDIR (non-dispersive infrared)
arduino logs13,Measurement Range: 400 ~ 5000 ppm
arduino logs13,Accuracy: ±100ppm + 6% readings
arduino logs13,Response Time: <90s
arduino logs13,Average Power: <430mW at 5V
arduino logs13,Operation temperature: 00C ~ 500C
arduino logs13,Operation Humidity: 0 ~ 95% RH (No condensation)
arduino logs13,Life Span: >5 years
arduino logs13,Features:
arduino logs13,Zero Calibration
arduino logs13,"This sensor automatically calibrates itself, but you can also manually calibrate it."
arduino logs13,Method 1: Manual zero calibration
arduino logs13,Short circuit the HD and GND of the sensor to calibrate it. It always needs to last for over 7 seconds at a low level. Make sure that the sensor runs stably for over 20 minutes at a concentration of 400ppm before the calibration. But I don’t do it manually. I let the sensor calibrate itself automatically.
arduino logs13,Method 2: Automatic zero calibration
arduino logs13,The automatic calibration function means that the sensor will intelligently determine the zero point according to the ambient CO2 concentration and automatically calibrate it after a period of continuous operation. The calibration starts from power-on and is performed once every 24 hours. The zero point for automatic calibration is 400 ppm. This calibration is suitable for office and home environment.
arduino logs13,What should be the CO2 level inside a room?
arduino logs13,"The recommended CO2 concentration level inside a room depends on several factors, including the purpose of the room, occupancy levels, and ventilation systems in place. Generally, maintaining a lower CO2 concentration is desirable for good indoor air quality and occupant comfort."
arduino logs13,"The American Society of Heating, Refrigerating, and Air-Conditioning Engineers (ASHRAE) provides guidelines for acceptable indoor CO2 levels. According to ASHRAE Standard 62.1, the recommended CO2 concentration for occupied spaces is below 1,000 parts per million (ppm) above outdoor ambient levels. However, achieving lower levels, such as below 800 ppm or even 600 ppm, is often desirable for improved air quality."
arduino logs13,"It’s important to note that the CO2 concentration is not necessarily a direct measure of other indoor air pollutants. High CO2 levels can indicate inadequate ventilation, which can lead to a buildup of other contaminants such as volatile organic compounds (VOCs) and odors. Therefore, maintaining proper ventilation and air exchange rates is crucial for maintaining good indoor air quality."
arduino logs13,"Different organizations and countries may have their own guidelines and regulations regarding indoor CO2 levels, so it’s advisable to refer to local building codes or consult with relevant authorities for specific recommendations in your region."
arduino logs13,Monitoring devices such as CO2 sensors can be used to measure and track the CO2 levels inside a room. These sensors can help determine if the ventilation is adequate and assist in maintaining a healthy indoor environment.
arduino logs13,What happens when CO2 level inside a room increases above 1000 ppm?
arduino logs13,"When the concentration of CO2 in the air exceeds 1,000 parts per million (ppm), it can have several effects on both human health and indoor air quality. Here are some potential impacts:"
arduino logs13,"Decreased Cognitive Function:High levels of CO2 can impair cognitive function and lead to reduced concentration, attention, and decision-making abilities. This can affect productivity and performance, particularly in environments such as offices, classrooms, and workplaces."
arduino logs13,"Discomfort and Fatigue:Elevated CO2 levels can cause discomfort, drowsiness, and fatigue among occupants. This can contribute to reduced comfort and well-being in indoor spaces."
arduino logs13,"Headaches and Dizziness:Breathing in high levels of CO2 may cause headaches, dizziness, and even shortness of breath in some individuals. These symptoms can further affect comfort and overall health."
arduino logs13,"Poor Indoor Air Quality:High CO2 levels often indicate insufficient ventilation in indoor spaces. Inadequate ventilation can result in the buildup of other indoor pollutants, such as volatile organic compounds (VOCs), odors, and airborne contaminants, which can further impact air quality and human health."
arduino logs13,"Potential Health Risks:Prolonged exposure to high levels of CO2 can potentially lead to more severe health effects, including respiratory issues, increased heart rate, elevated blood pressure, and in extreme cases, asphyxiation. However, it’s important to note that reaching such high CO2 concentrations in well-ventilated spaces is unlikely."
arduino logs13,"To maintain a healthy indoor environment, it is recommended to ensure adequate ventilation, monitor CO2 levels, and take corrective measures if the concentrations exceed acceptable thresholds. Proper ventilation systems, such as mechanical ventilation or opening windows for natural ventilation, can help remove stale air and replenish it with fresh outdoor air, effectively lowering CO2 levels and improving indoor air quality."
arduino logs13,What is NDIR Technology?
arduino logs13,NDIR stands for Non-Dispersive Infrared technology. It is a sensing technique used for the detection and measurement of gases in various applications.
arduino logs13,"NDIR technology relies on the principle that different gases absorb infrared light at specific wavelengths. By passing infrared light through a sample gas and measuring the amount of light absorbed, NDIR sensors can determine the concentration of the target gas in the sample."
arduino logs13,Here’s a simplified explanation of how NDIR technology works:
arduino logs13,Light Source: An infrared light source emits infrared radiation at specific wavelengths.
arduino logs13,"Sample Chamber: The sample gas, which may contain the target gas to be measured, is passed through a sample chamber."
arduino logs13,Optical Filter: An optical filter is placed in front of a detector. This filter allows only the specific wavelength of infrared light that the target gas absorbs to pass through.
arduino logs13,Detector: The detector measures the intensity of the infrared light that reaches it after passing through the sample chamber. The intensity is affected by the amount of infrared light absorbed by the target gas.
arduino logs13,"Signal Processing: The detector sends the measured intensity to signal processing electronics, which calculate the gas concentration based on the known absorption characteristics of the target gas."
arduino logs13,"NDIR technology offers several advantages for gas detection and measurement, including:"
arduino logs13,Specificity: NDIR sensors can be designed to detect specific gases by selecting appropriate infrared wavelengths.
arduino logs13,"Sensitivity: NDIR sensors can achieve high sensitivity, allowing accurate measurements even at low gas concentrations."
arduino logs13,"Stability: NDIR sensors are known for their long-term stability and resistance to environmental factors, such astemperature and humidity."
arduino logs13,"Wide Range: NDIR technology can be applied to measure a wide range of gases, including carbon dioxide (CO2), carbon monoxide (CO), methane (CH4), and various hydrocarbons."
arduino logs13,"Due to its accuracy and reliability, NDIR technology finds applications in various industries, including environmental monitoring, industrial safety, indoor air quality monitoring, gas leak detection, and combustion analysis, among others."
arduino logs13,Infrared CO2 Sensor interfacing with Arduino:
arduino logs13,I am using my Arduino Nano development board but you can also do the same exact connections on a breadboard.
arduino logs13,Simply connect the RED and Black wires to the Arduino 5V and GND pins. And connect the Green wire to the Arduino pin 2.
arduino logs13,The SSD1306 Oled display module VCC and GND pins are connected to the Arduino 3.3V and GND pins. Whereas the SCL and SDA pins of the Oled display module are connected to the Arduino Analog pins A5 and A4. A5 is the SCL and A4 is the SDA.
arduino logs13,The 5V buzzer is connected to the Arduino pin 8.
arduino logs13,"During the practical demonstration, when I was using the Arduino 5V the sensor would behave in an abnormal way. Then I switched to my 5V and 3A power supply."
arduino logs13,I have a detailed tutorial on how to make your own5V and 3A power supplyfor your projects.
arduino logs13,Download the Required Libraries:
arduino logs13,Adafruit_GFX
arduino logs13,Adafruit_SSD1306
arduino logs13,"Or if you want to install these libraries using the Arduino IDE, then you can follow these steps."
arduino logs13,"Go to the Sketch menu > then to Include Library, and click on the Manage Libraries. search for the Adafruit_GFX library and install it. Next, search for the Adafruit_SSD1306 library and install it. I have explained this in the video tutorial available at the end of this article."
arduino logs13,Gravity Infrared CO2 Arduino Programming:
arduino logs13,"I downloaded this code from the DFrobot official website and of course I made a few changes. I added code for the Oled display module and for the 5V buzzer. So, when the CO2 ppm level inside a room increases above 600 ppm the buzzer is automatically turned ON and when the CO2 ppm level decreases below 600 ppm the buzzer is automatically turned OFF."
arduino logs13,"Along with the Buzzer you can also use a relay to control the Exhaust Fan, or to open the window. It depends on you, what exactly you want to control when the CO2 ppm value increases inside the room. Anyway, I have already uploaded this program and now let’s watch the Gravity Infrared CO2 Sensor V2.0 in action."
arduino logs13,Arduino and CO2 Sensor Practical Demonstration:
arduino logs13,I am going to usemy 4S lithium Ion batteryto power up the Arduino. So that I can freely move around and complete my testing.
arduino logs13,"One more thing that I would like to talk about is, I am not using the Arduino 5V but I am using the 5V from my regulated power supply its 3A which is more than enough for its smooth operation."
arduino logs13,"When you power up the Arduino, wait for around 10 minutes. Because this sensor needs to be properly warmed up. During the preheating phase you may see unstable and inaccurate values and once the preheating phase is completed then the CO2 ppm value gets stable."
arduino logs13,"I have been testing this sensor for hours, and the CO2 ppm value is quite stable. The CO2 ppm value in my studio is high because all the windows are closed, and there is no ventilation. Since the CO2 ppm value is greater than 600 ppm, that’s why the buzzer is on."
arduino logs13,"This sensor has been ON for around 4 hours and is still functioning well. If your power supply is good, and you have properly warmed up this CO2 sensor, I don’t think you will face any issues in using it. The more time passes, the more stable this sensor becomes. The value is so high because there is no ventilation in this room, and on top of that, I have also smoked cigarettes."
arduino logs13,"Anyways, my sensor is stable because I am using a powerful regulated 5V and 3A power supply. So if you want your sensor to work stably, I recommend using a good power supply. If you power it up with Arduino, you might encounter some problems."
arduino logs13,"Next, I will take this sensor outside to see if the CO2 ppm level decreases or not."
arduino logs13,"As soon as I took this sensor outside, the ppm value started to decrease, which means this sensor is working. You can see the final outdoor CO2 ppm value is around 430ppm. I have been testing this sensor for hours, and it’s working flawlessly. The values are pretty stable, and I’m sure it’s because of my 5V and 3A power supply."
arduino logs13,"Now again, I am going to my studio and let’s see if I can lower the co2 ppm level by opening the door and windows. And I have also turned ON the Fan. As you can see the co2 ppm level inside this room is reducing because of the fresh air. The value was further reducing."
arduino logs13,This is pretty amazing and now I can keep track of the co2 concentration in my studio.
arduino logs13,"Now, I am going to take it to my bed room. Right now, the co2 ppm level inside my bedroom is around 635."
arduino logs13,I Opened the door and now let’s see if the co2 ppm level is going to decrease below 600ppm.
arduino logs13,"The buzzer just turned OFF, because now the Co2 ppm value is below 600. So, I just built myself this super awesome indoor and outdoor air quality monitoring system or co2 meter."
arduino logs13,Co2 meter uses:
arduino logs13,"My designed co2 meter can be used in various settings for different purposes, including:"
arduino logs13,"Indoor Air Quality (IAQ) Monitoring: CO2 meters are employed in offices, schools, homes, and other indoor spaces to monitor and assess the level of CO2. Elevated CO2 levels can indicate inadequate ventilation, potentially leading to discomfort, decreased productivity, and poor air quality."
arduino logs13,"HVAC Systems: CO2 meters are often integrated into Heating, Ventilation, and Air Conditioning (HVAC) systems to regulate ventilation and ensure adequate fresh air supply. By measuring CO2 levels, the HVAC system can adjust the airflow accordingly, improving energy efficiency and occupant comfort."
arduino logs13,"Greenhouses: In agricultural applications, CO2 ppm meters are used to monitor and control CO2 levels in greenhouses. Supplementing CO2 in controlled environments can enhance plant growth and productivity."
arduino logs13,"Industrial Settings: CO2 meters are utilized in industrial facilities, factories, and manufacturing plants to monitor and maintain safe CO2 levels. In certain industries, such as breweries and beverage production, CO2 ppm meters are essential for quality control and process optimization."
arduino logs13,"Safety and Compliance: CO2 ppm meters can also serve as safety devices in environments where the buildup of CO2 can be hazardous, such as confined spaces or areas with potential leaks or emissions. They help ensure compliance with safety regulations and provide early warnings in case of CO2 accumulation."
arduino logs13,"CO2 ppm meters typically display the CO2 concentration in parts per million (ppm) on a digital screen. Some models may also include additional features like data logging, alarm systems, and connectivity options for remote monitoring or integration with building automation systems."
arduino logs13,It’s worth noting that CO2 ppm meters should be calibrated periodically to maintain accurate measurements. The calibration process involves exposing the meter to a known CO2 concentration (usually outdoor air) and adjusting it accordingly.
arduino logs13,"Overall, CO2 ppm meters are valuable tools for monitoring and managing indoor air quality, ventilation, and ensuring safety in various applications."
arduino logs13,Watch Video Tutorial:
arduino logs13,Engr. Shahzada Fahad
arduino logs13,Related Articles
arduino logs13,Digital 360° Tilt Sensor with Arduino and ESP32
arduino logs13,Underwater Ultrasonic Sensor with Arduino
arduino logs13,"Weighing Scale using Arduino, HX711, and a Load Cell"
arduino logs13,Force Sensitive Resistor FSR with Arduino
arduino logs13,One Comment
arduino logs13,"Hello, Electronic Clinic has my admiration for how you comprehensively approach solving various problems. You helped me a lot to understand the BLYNK application. Thank you. Bilik I."
arduino logs13,Leave a ReplyCancel reply
arduino logs13,Your email address will not be published.Required fields are marked*
arduino logs13,Comment*
arduino logs13,Name*
arduino logs13,Email*
arduino logs13,Website
arduino logs13,"Save my name, email, and website in this browser for the next time I comment."
arduino logs13,Δ
arduino logs13,"pH meter Arduino, pH Meter Calibration, DIYMORE pH Sensor Arduino Code"
arduino logs13,Arduino Libraries Download and Projects they are used in “Project codes”
arduino logs13,"Decoder, 3 to 8 Decoder Block Diagram, Truth Table, and Logic Diagram"
arduino logs13,We are using cookies to give you the best experience on our website.
arduino logs13,You can find out more about which cookies we are using or switch them off insettings.
arduino logs13,This website uses cookies so that we can provide you with the best user experience possible. Cookie information is stored in your browser and performs functions such as recognising you when you return to our website and helping our team to understand which sections of the website you find most interesting and useful.
arduino logs13,Strictly Necessary Cookie should be enabled at all times so that we can save your preferences for cookie settings.
arduino logs13,"If you disable this cookie, we will not be able to save your preferences. This means that every time you visit this website you will need to enable or disable cookies again."
